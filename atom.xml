<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xmlxyl&#39;s blog</title>
  
  <subtitle>Make a little progress every day.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-31T17:25:08.117Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xmlxyl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test</title>
    <link href="http://yoursite.com/2019/06/01/test/"/>
    <id>http://yoursite.com/2019/06/01/test/</id>
    <published>2019-05-31T17:25:08.000Z</published>
    <updated>2019-05-31T17:25:08.117Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端体系知识点（持续更新）</title>
    <link href="http://yoursite.com/2019/05/06/%E5%89%8D%E7%AB%AF%E4%BD%93%E7%B3%BB%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
    <id>http://yoursite.com/2019/05/06/前端体系知识点（持续更新）/</id>
    <published>2019-05-06T08:20:00.000Z</published>
    <updated>2019-05-24T09:22:26.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h1><h2 id="变量和类型"><a href="#变量和类型" class="headerlink" title="变量和类型"></a>变量和类型</h2><ul><li><p>1.JavaScript规定了几种语言类型；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ECMAScript的基本</span><br></pre></td></tr></table></figure></li><li><p>闭包是什么</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在函数嵌套中外部函数是没有方式访问到内部函数中的变量和函数，当一个嵌套函数引用外部函数的变量的时候，外部函数在执行的时候产生闭包。</span><br><span class="line">闭包的作用：闭包的作用就是在函数以外的任何地方访问到函数内的变量对象，使用闭包的内部函数在内存中执行完毕之后，引用的变量会一直存在函数中，延长了变量的声明周期。</span><br><span class="line">缺点：javascript有一个垃圾回收机制，在桟堆里声明的变量当在内存中调用并且没有使用的话，在运行当中就会被当成垃圾回收，当一个嵌套函数引用外部函数的变量的时候，外部函数在执行的时候产生闭包，由于闭包的特性变量会一直存在函数中javascript的回收机制收回不了闭包的引用，会导内存的泄露和性能的损耗。</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      前端工程师吃饭的家伙，深度、广度一样都不能差。
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>webpack学习——工作原理（上）</title>
    <link href="http://yoursite.com/2019/04/24/webpack%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>http://yoursite.com/2019/04/24/webpack学习——工作原理（上）/</id>
    <published>2019-04-24T02:05:34.000Z</published>
    <updated>2019-04-26T10:45:30.446Z</updated>
    
    <content type="html"><![CDATA[<p>对于webpack的认识，项目中用到vue的前端工程师对vue-cli脚手架应该都不陌生，不得不说脚手架既方便而且很好用，修改起来也很方便，有使用经验的都知道webpack里面各个配置项的功能，打包的时候只需要一句npm run build就可以完成打包工作了，可是webpack我们还不知道打包的过程中发生了什么，它是如何去运作的，打包的时候报错，也只是通过goole，baidu来帮忙解决问题，搜索出来后至于为什么要这样修改，什么原理，很少人会去纠结，不管，能解决就好的心态。所以，了解原理也是很有必要的，对于换工作的小伙伴面试的时候有好处。</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>每个开发工具都会有自己的运行原理，webpack首先得明白几个概念。</p><ul><li>Enrty: 入口，webpack构建的起始点。</li><li>Module: 模块，webpack里面一切皆是模块，也是代表着文件，从Enrty配置的入口开始，递归找出依赖的模块。</li><li>Chunk: 代码块，找出递归依赖模块经转换后组合成代码块。</li><li>Loader: 模块转换器，也就是将模块的内容按照需求转换成新内容。</li><li>Plugin: 扩展插件，webpack构建过程中，会在特定的时机广播对应的时间，而插件可以监听这些事件的发生。</li></ul><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p>webpack构建流程，详细过程如下:</p><ul><li>初始化: 从配置文件或者是shell（一个梳理梳理代码逻辑的模块），得到最终参数，实例化插件new Plugin()</li><li>开始编译: 通过初始化得到了最终参数，实例化一个Compiler对象，加载插件（依次调用插件中的apply方法），通过执行Compiler.run开始编译。</li><li>确定入口: 根据配置中Entry找到所有入口文件（一般情况下只设置一个）</li><li>编译模块: 从Entry出发，调用配置的loader，对模块进行转发，同时找出模块依赖的模块（下文有解释怎么找），一次递归，直到所有依赖模块找到完成本步骤处理。</li><li>完成模块编译: 现在已经完成了模块的编译，使用loader对所有模块进行了转换，得到了转换后的新内容以及依赖关系。</li><li>输出资源: 根据与模块之间的依赖关系，组装成一个个chunk代码块，并且生成文件输出列表。</li><li>输出成功: 根据配置中的输出路径和文件名，将文件写入文件系统，完成构建。</li></ul><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>整个构建打包的过程会发生很多事件，来供Plugin监听，这些事件具体看可以分为三个阶段，分别是初始化阶段、编译阶段、输出阶段，具体介绍下表：</p><h2 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h2><table><thead><tr><th style="text-align:left">事件</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">初始化</td><td style="text-align:left">从配置文件或者是shell（一个梳理梳理代码逻辑的模块），得到最终参数，实例化插件new Plugin()</td></tr><tr><td style="text-align:left">实例化Compiler</td><td style="text-align:left">通过初始化得到了最终参数，实例化一个Compiler对象，加载插件（依次调用插件中的apply方法），通过执行Compiler.run开始编译</td></tr><tr><td style="text-align:left">加载插件</td><td style="text-align:left">依次调用插件中的apply方法，同时也会将Compiler对象实例传入，就可以调用Webpack提供的API,compiler实例可以说是Webpack实例</td></tr><tr><td style="text-align:left">environment</td><td style="text-align:left">将node.js风格的文件系统应用到compiler对象，便可以直接通过compiler来对文件进行操作</td></tr><tr><td style="text-align:left">entry-option</td><td style="text-align:left">读取配置中的Entry，依次实例化出对应EntryPlugin，为后面该Entry的递归解析工作做准备</td></tr><tr><td style="text-align:left">after-plugins</td><td style="text-align:left">调完所有内置和配置的插件的apply方法</td></tr><tr><td style="text-align:left">after-resolvers</td><td style="text-align:left">根据配置初始化resolvers，resolvers负责在文件系统中寻找指定路径的文件</td></tr></tbody></table><h2 id="编译阶段"><a href="#编译阶段" class="headerlink" title="编译阶段"></a>编译阶段</h2><h2 id="输出化阶段"><a href="#输出化阶段" class="headerlink" title="输出化阶段"></a>输出化阶段</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
    
    <summary type="html">
    
      作为一个前端工程师关于自动化构建工具——webpack应该很熟悉了，我们不仅应该要会使用，而且应该要知道它的工作原理和打包的过程中发生了什么。
    
    </summary>
    
      <category term="webpack" scheme="http://yoursite.com/categories/webpack/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>VueJS中学习使用Vuex详解</title>
    <link href="http://yoursite.com/2019/03/18/VueJS%E4%B8%AD%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8Vuex%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/03/18/VueJS中学习使用Vuex详解/</id>
    <published>2019-03-18T08:32:26.000Z</published>
    <updated>2019-03-28T03:47:26.841Z</updated>
    
    <content type="html"><![CDATA[<p>小结一下vuex的作用和一点自己的理解<br><a id="more"></a></p><p>##什么是vuex</p><p>在SPA单页面组件的开发中 Vue的vuex和React的Redux 都统称为同一状态管理，个人的理解是全局状态管理更合适；简单的理解就是你在state中定义了一个数据之后，你可以在所在项目中的任何一个组件里进行获取、进行修改，并且你的修改可以得到全局的响应变更。下面咱们一步一步地剖析下vuex的使用:</p><p>首先要安装、使用 vuex</p><p>首先在 vue 2.0+ 你的vue-cli项目中安装 vuex :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure></p><p>然后 在src文件目录下新建一个名为store的文件夹，为方便引入并在store文件夹里新建一个index.js,里面的内容如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;;</span><br><span class="line">import Vuex from &apos;vuex&apos;;</span><br><span class="line">Vue.use(Vuex);</span><br><span class="line">const store = new Vuex.Store();</span><br><span class="line"> </span><br><span class="line">export default store;</span><br></pre></td></tr></table></figure><p>接下来，在 main.js里面引入store，然后再全局注入一下，这样一来就可以在任何一个组件里面使用this.$store了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import store from &apos;./store&apos;//引入store</span><br><span class="line"> </span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  router,</span><br><span class="line">  store,//使用store</span><br><span class="line">  template: &apos;&lt;App/&gt;&apos;,</span><br><span class="line">  components: &#123; App &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>说了上面的前奏之后，接下来就是纳入正题了，就是开篇说的state的玩法。回到store文件的index.js里面，我们先声明一个state变量，并赋值一个空对象给它，里面随便定义两个初始属性值；然后再在实例化的Vuex.Store里面传入一个空对象，并把刚声明的变量state仍里面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;;</span><br><span class="line">import Vuex from &apos;vuex&apos;;</span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"> const state=&#123;//要设置的全局访问的state对象</span><br><span class="line">     showFooter: true,</span><br><span class="line">     changableNum:0</span><br><span class="line">     //要设置的初始属性值</span><br><span class="line">   &#125;;</span><br><span class="line"> const store = new Vuex.Store(&#123;</span><br><span class="line">       state</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">export default store;</span><br></pre></td></tr></table></figure></p><p>实际上做完上面的三个步骤后，你已经可以用this.$store.state.showFooter或this.$store.state.changebleNum在任何一个组件里面获取showfooter和changebleNum定义的值了，但这不是理想的获取方式；vuex官方API提供了一个getters，和vue计算属性computed一样，来实时监听state值的变化(最新状态)，并把它也仍进Vuex.Store里面，具体看下面代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;;</span><br><span class="line">import Vuex from &apos;vuex&apos;;</span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"> const state=&#123;   //要设置的全局访问的state对象</span><br><span class="line">     showFooter: true,</span><br><span class="line">     changableNum:0</span><br><span class="line">     //要设置的初始属性值</span><br><span class="line">   &#125;;</span><br><span class="line">const getters = &#123;   //实时监听state值的变化(最新状态)</span><br><span class="line">    isShow(state) &#123;  //方法名随意,主要是来承载变化的showFooter的值</span><br><span class="line">       return state.showFooter</span><br><span class="line">    &#125;,</span><br><span class="line">    getChangedNum()&#123;  //方法名随意,主要是用来承载变化的changableNum的值</span><br><span class="line">       return state.changebleNum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">       state,</span><br><span class="line">       getters</span><br><span class="line">&#125;);</span><br><span class="line">export default store;</span><br></pre></td></tr></table></figure></p><p>光有定义的state的初始值，不改变它不是我们想要的需求，接下来要说的就是mutations了，mutattions也是一个对象，这个对象里面可以放改变state的初始值的方法，具体的用法就是给里面的方法传入参数state或额外的参数,然后利用vue的双向数据驱动进行值的改变，同样的定义好之后也把这个mutations扔进Vuex.Store里面，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;;</span><br><span class="line">import Vuex from &apos;vuex&apos;;</span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"> const state=&#123;   //要设置的全局访问的state对象</span><br><span class="line">     showFooter: true,</span><br><span class="line">     changableNum:0</span><br><span class="line">     //要设置的初始属性值</span><br><span class="line">   &#125;;</span><br><span class="line">const getters = &#123;   //实时监听state值的变化(最新状态)</span><br><span class="line">    isShow(state) &#123;  //承载变化的showFooter的值</span><br><span class="line">       return state.showFooter</span><br><span class="line">    &#125;,</span><br><span class="line">    getChangedNum()&#123;  //承载变化的changebleNum的值</span><br><span class="line">       return state.changableNum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const mutations = &#123;</span><br><span class="line">    show(state) &#123;   //自定义改变state初始值的方法，这里面的参数除了state之外还可以再传额外的参数(变量或对象);</span><br><span class="line">        state.showFooter = true;</span><br><span class="line">    &#125;,</span><br><span class="line">    hide(state) &#123;  //同上</span><br><span class="line">        state.showFooter = false;</span><br><span class="line">    &#125;,</span><br><span class="line">    newNum(state,sum)&#123; //同上，这里面的参数除了state之外还传了需要增加的值sum</span><br><span class="line">       state.changableNum+=sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> const store = new Vuex.Store(&#123;</span><br><span class="line">       state,</span><br><span class="line">       getters,</span><br><span class="line">       mutations</span><br><span class="line">&#125;);</span><br><span class="line">export default store;</span><br></pre></td></tr></table></figure></p><p>这时候你完全可以用 this.$store.commit(‘show’) 或 this.$store.commit(‘hide’) 以及 this.$store.commit(‘newNum’,6) 在别的组件里面进行改变showfooter和changebleNum的值了，但这不是理想的改变值的方式；因为在 Vuex 中，mutations里面的方法 都是同步事务，意思就是说：比如这里的一个this.$store.commit(‘newNum’,sum)方法,两个组件里用执行得到的值，每次都是一样的，这样肯定不是理想的需求</p><p>好在vuex官方API还提供了一个actions，这个actions也是个对象变量，最大的作用就是里面的Action方法 可以包含任意异步操作，这里面的方法是用来异步触发mutations里面的方法，actions里面自定义的函数接收一个context参数和要变化的形参，context与store实例具有相同的方法和属性，所以它可以执行context.commit(‘ ‘),然后也不要忘了把它也扔进Vuex.Store里面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;;</span><br><span class="line">import Vuex from &apos;vuex&apos;;</span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"> const state=&#123;   //要设置的全局访问的state对象</span><br><span class="line">     showFooter: true,</span><br><span class="line">     changableNum:0</span><br><span class="line">     //要设置的初始属性值</span><br><span class="line">   &#125;;</span><br><span class="line">const getters = &#123;   //实时监听state值的变化(最新状态)</span><br><span class="line">    isShow(state) &#123;  //承载变化的showFooter的值</span><br><span class="line">       return state.showFooter</span><br><span class="line">    &#125;,</span><br><span class="line">    getChangedNum()&#123;  //承载变化的changebleNum的值</span><br><span class="line">       return state.changableNum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const mutations = &#123;</span><br><span class="line">    show(state) &#123;   //自定义改变state初始值的方法，这里面的参数除了state之外还可以再传额外的参数(变量或对象);</span><br><span class="line">        state.showFooter = true;</span><br><span class="line">    &#125;,</span><br><span class="line">    hide(state) &#123;  //同上</span><br><span class="line">        state.showFooter = false;</span><br><span class="line">    &#125;,</span><br><span class="line">    newNum(state,sum)&#123; //同上，这里面的参数除了state之外还传了需要增加的值sum</span><br><span class="line">       state.changableNum+=sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> const actions = &#123;</span><br><span class="line">    hideFooter(context) &#123;  //自定义触发mutations里函数的方法，context与store 实例具有相同方法和属性</span><br><span class="line">        context.commit(&apos;hide&apos;);</span><br><span class="line">    &#125;,</span><br><span class="line">    showFooter(context) &#123;  //同上注释</span><br><span class="line">        context.commit(&apos;show&apos;);</span><br><span class="line">    &#125;,</span><br><span class="line">    getNewNum(context,num)&#123;   //同上注释，num为要变化的形参</span><br><span class="line">        context.commit(&apos;newNum&apos;,num)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br><span class="line">  const store = new Vuex.Store(&#123;</span><br><span class="line">       state,</span><br><span class="line">       getters,</span><br><span class="line">       mutations,</span><br><span class="line">       actions</span><br><span class="line">&#125;);</span><br><span class="line">export default store;</span><br></pre></td></tr></table></figure></p><p>而在外部组件里进行全局执行actions里面方法的时候，你只需要用执行</p><p>this.$store.dispatch(‘hideFooter’)</p><p>或this.$store.dispatch(‘showFooter’)</p><p>以及this.$store.dispatch(‘getNewNum’，6) //6要变化的实参</p><p>dispatch：含有异步操作，例如向后台提交数据，写法： this.$store.dispatch(‘action方法名’,值)</p><p>commit：同步操作，写法：this.$store.commit(‘mutations方法名’,值)</p><p>这样就可以全局改变showfooter或changebleNum的值了，如下面的组件中,需求是跳转组件页面后，根据当前所在的路由页面进行隐藏或显示页面底部的tabs选项卡<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">    &lt;FooterBar v-if=&quot;isShow&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import FooterBar from &apos;@/components/common/FooterBar&apos;</span><br><span class="line">import config from &apos;./config/index&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;App&apos;,</span><br><span class="line">  components:&#123;</span><br><span class="line">    FooterBar:FooterBar</span><br><span class="line">  &#125;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">     isShow()&#123;</span><br><span class="line">       return this.$store.getters.isShow;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch:&#123;</span><br><span class="line">    $route(to,from)&#123; //跳转组件页面后，监听路由参数中对应的当前页面以及上一个页面</span><br><span class="line">        console.log(to)</span><br><span class="line">      if(to.name==&apos;book&apos;||to.name==&apos;my&apos;)&#123; // to.name来获取当前所显示的页面，从而控制该显示或隐藏footerBar组件</span><br><span class="line">        this.$store.dispatch(&apos;showFooter&apos;) // 利用派发全局state.showFooter的值来控制        </span><br><span class="line">        this.$store.dispatch(&apos;hideFooter&apos;)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.$store.dispatch(&apos;hideFooter&apos;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小结一下vuex的作用和一点自己的理解&lt;br&gt;
    
    </summary>
    
      <category term="Vue.js" scheme="http://yoursite.com/categories/Vue-js/"/>
    
    
      <category term="vueJs" scheme="http://yoursite.com/tags/vueJs/"/>
    
      <category term="vuex" scheme="http://yoursite.com/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>greenSock</title>
    <link href="http://yoursite.com/2019/03/04/greenSock/"/>
    <id>http://yoursite.com/2019/03/04/greenSock/</id>
    <published>2019-03-04T02:02:14.000Z</published>
    <updated>2019-04-08T09:32:23.583Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p> 个人git仓库有相关包下载，打开终端clone下来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">指令：git clone https://github.com/wx170903/greensock.git</span><br></pre></td></tr></table></figure></p><p> 基本操作——TweenMax.to( );</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Jquery选择器选择1以变量保存起来var $box = $(&apos;#box&apos;);</span><br><span class="line">TweenMax.to($box, 7, &#123; &apos;left&apos;: 300, backgroundColor: &quot;pink&quot; &#125;);</span><br><span class="line">上面的代码会在7秒之内把$box元素从CSS中定义的位置移动到距离body-300px的边缘并且换成pink颜色。</span><br></pre></td></tr></table></figure><p>基本操作——TweenMax.from( );</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var $box = $(&apos;#box&apos;);</span><br><span class="line">TweenMax.from($box, 2, &#123;x: &apos;-=500px&apos;,repeat:-1, autoAlpha: 1&#125;);</span><br><span class="line">在代码中autoAlpha: 0表示它会把元素初始化为opacity:0;visibility:hidden。当执行动画效果的时候它会把visibility的值设置为inherit以及opacity值设置为1。从而产生一个渐现的效果。</span><br></pre></td></tr></table></figure><p>基本操作——TweenMax.set( );</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">有时候，我们只是想设置元素的一些CSS属性并不需要动画效果，比如，重设元素的位置。</span><br><span class="line">这个时候就可以使用GreenSock提供的.set()方法。注：定义的变量就不写出来的。</span><br><span class="line">TweenLite.set($box, &#123;x: &apos;-=200px&apos;, scale: 0.3&#125;);</span><br><span class="line">TweenLite.set($box, &#123;x: &apos;+=100px&apos;, scale: 0.6, delay: 1&#125;);</span><br><span class="line">TweenLite.set($box, &#123;x: &apos;-50%&apos;, scale: 1, delay: 2&#125;);</span><br><span class="line">运行上面的代码，可以看到元素只是单纯的在改变属性并没有动画效果。</span><br></pre></td></tr></table></figure><p>基本操作——TweenMax.fromTo( );</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这个方法结合了上面的，从头到尾定义动画的起始位置并且不重复。</span><br><span class="line">TweenLite.fromTo($box, 2, &#123;x: &apos;0&apos;&#125;, &#123;x: 150&#125;);</span><br><span class="line">把上面的代码放入到JS代码中，就可以看到运行的动画效果。</span><br><span class="line">盒子从-=200px的位置走到150px的位置，在括号里面可以添置变化属性（比如颜色，大小，不透明度等）；</span><br><span class="line">x:150会覆盖在CSS中定义的transform: translate(–50%, –50%)的样式，用新的transform: matrix(1, 0, 0, 1, 150, -50);样式来代替。</span><br></pre></td></tr></table></figure><p>接下来，可以给元素加一些缓动曲线，使之更符合真实的物体运动效果。GreenSock也提供了各种的运动曲线，来使动画效果更加自然。</p>]]></content>
    
    <summary type="html">
    
      这是一个很好的动画库，全面的API。
    
    </summary>
    
      <category term="js动画" scheme="http://yoursite.com/categories/js%E5%8A%A8%E7%94%BB/"/>
    
    
      <category term="JS动画库" scheme="http://yoursite.com/tags/JS%E5%8A%A8%E7%94%BB%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>gulp使用小结</title>
    <link href="http://yoursite.com/2018/12/24/gulp%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/2018/12/24/gulp使用小结/</id>
    <published>2018-12-24T03:43:14.000Z</published>
    <updated>2019-04-08T07:24:43.522Z</updated>
    
    <content type="html"><![CDATA[<p>一般简单的项目不会用到webpack搭建项目，推荐一下用gulp开发一些做比较简单的项目。<br><a id="more"></a></p><h3 id="glup安装"><a href="#glup安装" class="headerlink" title="glup安装"></a>glup安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --global gulp-cli</span><br><span class="line">$ npm install --save-dev gulp</span><br></pre></td></tr></table></figure><h3 id="安装各种插件"><a href="#安装各种插件" class="headerlink" title="安装各种插件"></a>安装各种插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">npm install --save gulp            //本地使用</span><br><span class="line">npm install --save gulp-imagemin   //压缩图片</span><br><span class="line">npm install --save gulp-minify-css //压缩css</span><br><span class="line">npm install --save gulp-ruby-sass  //sass</span><br><span class="line">npm install --save gulp-jshint     //js代码检测</span><br><span class="line">npm install --save gulp-uglify     //js压缩</span><br><span class="line">npm install --save gulp-concat     //文件合并</span><br><span class="line">npm install --save gulp-rename     //文件重命名</span><br><span class="line">npm install --save png-sprite      //png合并</span><br><span class="line">npm install --save gulp-htmlmin    //压缩html</span><br><span class="line">npm install --save gulp-clean      //清空文件夹</span><br><span class="line">npm install --save browser-sync    //文件修改浏览器自动刷新</span><br><span class="line">npm install --save gulp-shell      //执行shell命令</span><br><span class="line">npm install --save gulp-ssh        //操作远程机器</span><br><span class="line">npm install --save run-sequence    //task顺序执行</span><br></pre></td></tr></table></figure><h3 id="创建glupfile-js"><a href="#创建glupfile-js" class="headerlink" title="创建glupfile.js"></a>创建glupfile.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">(示例1)</span><br><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line">var pug = require(&apos;gulp-pug&apos;);</span><br><span class="line">var less = require(&apos;gulp-less&apos;);</span><br><span class="line">var minifyCSS = require(&apos;gulp-csso&apos;);</span><br><span class="line">var concat = require(&apos;gulp-concat&apos;);</span><br><span class="line">var sourcemaps = require(&apos;gulp-sourcemaps&apos;);</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;html&apos;, function()&#123;</span><br><span class="line">  return gulp.src(&apos;client/templates/*.pug&apos;)</span><br><span class="line">    .pipe(pug())</span><br><span class="line">    .pipe(gulp.dest(&apos;build/html&apos;))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;css&apos;, function()&#123;</span><br><span class="line">  return gulp.src(&apos;client/templates/*.less&apos;)</span><br><span class="line">    .pipe(less())</span><br><span class="line">    .pipe(minifyCSS())</span><br><span class="line">    .pipe(gulp.dest(&apos;build/css&apos;))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;js&apos;, function()&#123;</span><br><span class="line">  return gulp.src(&apos;client/javascript/*.js&apos;)</span><br><span class="line">    .pipe(sourcemaps.init())</span><br><span class="line">    .pipe(concat(&apos;app.min.js&apos;))</span><br><span class="line">    .pipe(sourcemaps.write())</span><br><span class="line">    .pipe(gulp.dest(&apos;build/js&apos;))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;default&apos;, [ &apos;html&apos;, &apos;css&apos;, &apos;js&apos; ]);</span><br></pre></td></tr></table></figure><h3 id="glup-语法"><a href="#glup-语法" class="headerlink" title="glup 语法"></a>glup 语法</h3><ul><li><p>glup.src() 转化的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">gulp.src(globs[, options])</span><br><span class="line">globs : String or Array</span><br><span class="line"></span><br><span class="line">glup.src(&apos;client/template/*.jade&apos;)</span><br><span class="line">    .pipe(jade())</span><br><span class="line">    .pipe(minify())</span><br><span class="line">    .pipe(glup.dest(&apos;build/minifiled_templates&apos;))</span><br><span class="line"></span><br><span class="line">// 示例</span><br><span class="line">client/</span><br><span class="line">  a.js</span><br><span class="line">  bob.js</span><br><span class="line">  bad.js</span><br><span class="line">glup.src([&apos;client/*.js&apos;, &apos;!client/b*.js&apos;, &apos;client/bad.js&apos;]) </span><br><span class="line">// 要所有.js结尾的文件, 不要以b开头的 , 要bad.js</span><br></pre></td></tr></table></figure></li><li><p>glup.dest() 数据流变成文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gulp.dest(path[, options])</span><br><span class="line">path: String or Function</span><br><span class="line"></span><br><span class="line">gulp.src(&apos;./client/templates/*.jade&apos;)</span><br><span class="line">  .pipe(jade())</span><br><span class="line">  .pipe(gulp.dest(&apos;./build/templates&apos;))  // 路径</span><br><span class="line">  .pipe(minify())</span><br><span class="line">  .pipe(gulp.dest(&apos;./build/minified_templates&apos;));  // 放置路径</span><br></pre></td></tr></table></figure></li><li><p>glup.task() 声明一个任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(name [, deps, fn])</span><br><span class="line">name: String 不应该有空格</span><br><span class="line">deps: Array</span><br><span class="line">fn: Function</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;somename&apos;, function() &#123;</span><br><span class="line">  // Do ...</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(&apos;mytask&apos;, [&apos;array&apos;, &apos;of&apos;, &apos;task&apos;, &apos;names&apos;], function() &#123;</span><br><span class="line">  // Do stuff</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>glup.watch() 监控文件的变动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gulp.watch(glob[, opts], tasks)</span><br><span class="line">glob: String or Array</span><br><span class="line">tasks: Array</span><br><span class="line"></span><br><span class="line">var watcher = gulp.watch(&apos;js/**/*.js&apos;, [&apos;uglify&apos;,&apos;reload&apos;]);</span><br><span class="line">watcher.on(&apos;change&apos;, function(event) &#123;</span><br><span class="line">  console.log(&apos;File &apos; + event.path + &apos; was &apos; + event.type + &apos;, running tasks...&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="glup使用案例"><a href="#glup使用案例" class="headerlink" title="glup使用案例"></a>glup使用案例</h3><ul><li>demo1目录结构如下。把demo1中的 index.html压缩，把src里面的less编译、合并、压缩、重命名、存储到dist。src里面的图片压缩、合并存储到dist。src里面的js做代码检查，压缩，合并，存储到dist。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">+ demo1</span><br><span class="line">        + dist</span><br><span class="line">            + css</span><br><span class="line">                - merge.min.css</span><br><span class="line">            + js</span><br><span class="line">                - merge.min.js</span><br><span class="line">            + imgs</span><br><span class="line">                - 1.png</span><br><span class="line">                - 2.png</span><br><span class="line">            - index.html</span><br><span class="line">        + src</span><br><span class="line">            + css</span><br><span class="line">                - a.css</span><br><span class="line">                - b.css</span><br><span class="line">            + js</span><br><span class="line">                - a.js</span><br><span class="line">                - b.js</span><br><span class="line">            + imgs</span><br><span class="line">                - 1.png</span><br><span class="line">                - 2.png</span><br><span class="line">            - index.html</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">(glupfile.js)</span><br><span class="line">    var gulp = require(&apos;gulp&apos;);</span><br><span class="line">    // 引入组件</span><br><span class="line">    var minifycss = require(&apos;gulp-minify-css&apos;), // CSS压缩</span><br><span class="line">        uglify = require(&apos;gulp-uglify&apos;), // js压缩</span><br><span class="line">        concat = require(&apos;gulp-concat&apos;), // 合并文件</span><br><span class="line">        rename = require(&apos;gulp-rename&apos;), // 重命名</span><br><span class="line">        clean = require(&apos;gulp-clean&apos;), //清空文件夹</span><br><span class="line">        minhtml = require(&apos;gulp-htmlmin&apos;), //html压缩</span><br><span class="line">        jshint = require(&apos;gulp-jshint&apos;), //js代码规范性检查</span><br><span class="line">        imagemin = require(&apos;gulp-imagemin&apos;); //图片压缩</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    gulp.task(&apos;html&apos;, function() &#123;</span><br><span class="line">      return gulp.src(&apos;src/*.html&apos;)</span><br><span class="line">        .pipe(minhtml(&#123;collapseWhitespace: true&#125;))</span><br><span class="line">        .pipe(gulp.dest(&apos;dist&apos;));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    gulp.task(&apos;css&apos;, function(argument) &#123;</span><br><span class="line">        gulp.src(&apos;src/css/*.css&apos;)</span><br><span class="line">            .pipe(concat(&apos;merge.css&apos;))</span><br><span class="line">            .pipe(rename(&#123;</span><br><span class="line">                suffix: &apos;.min&apos;</span><br><span class="line">            &#125;))</span><br><span class="line">            .pipe(minifycss())</span><br><span class="line">            .pipe(gulp.dest(&apos;dist/css/&apos;));</span><br><span class="line">    &#125;);</span><br><span class="line">    gulp.task(&apos;js&apos;, function(argument) &#123;</span><br><span class="line">        gulp.src(&apos;src/js/*.js&apos;)</span><br><span class="line">            .pipe(jshint())</span><br><span class="line">            .pipe(jshint.reporter(&apos;default&apos;))</span><br><span class="line">            .pipe(concat(&apos;merge.js&apos;))</span><br><span class="line">            .pipe(rename(&#123;</span><br><span class="line">                suffix: &apos;.min&apos;</span><br><span class="line">            &#125;))</span><br><span class="line">            .pipe(uglify())</span><br><span class="line">            .pipe(gulp.dest(&apos;dist/js/&apos;));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    gulp.task(&apos;img&apos;, function(argument)&#123;</span><br><span class="line">        gulp.src(&apos;src/imgs/*&apos;)</span><br><span class="line">            .pipe(imagemin())</span><br><span class="line">            .pipe(gulp.dest(&apos;dist/imgs&apos;));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    gulp.task(&apos;clear&apos;, function()&#123;</span><br><span class="line">        gulp.src(&apos;dist/*&apos;,&#123;read: false&#125;)</span><br><span class="line">            .pipe(clean());</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    gulp.task(&apos;build&apos;, [&apos;html&apos;, &apos;css&apos;, &apos;js&apos;, &apos;img&apos;]);</span><br><span class="line"></span><br><span class="line">$ glup build</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般简单的项目不会用到webpack搭建项目，推荐一下用gulp开发一些做比较简单的项目。&lt;br&gt;
    
    </summary>
    
      <category term="js工具" scheme="http://yoursite.com/categories/js%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="自动化构建工具" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>移动端虚拟键盘和滚动穿透小结</title>
    <link href="http://yoursite.com/2018/07/31/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%99%9A%E6%8B%9F%E9%94%AE%E7%9B%98%E5%92%8C%E6%BB%9A%E5%8A%A8%E7%A9%BF%E9%80%8F%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/2018/07/31/移动端虚拟键盘和滚动穿透小结/</id>
    <published>2018-07-31T02:34:12.000Z</published>
    <updated>2018-12-09T14:14:41.198Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下最近遇到的两个小bug，也不算小bug，可能在不同的移动端浏览器表现不同吧。一个是虚拟键盘顶起，一个是滚动穿透问题。<br><a id="more"></a></p><h1 id="虚拟键盘"><a href="#虚拟键盘" class="headerlink" title="虚拟键盘"></a>虚拟键盘</h1><p>首先需要明确的一点是，虚拟键盘的顶起在IOS端和Android端有很大的不同变现。</p><h2 id="监听移动端软键盘弹起和收起"><a href="#监听移动端软键盘弹起和收起" class="headerlink" title="监听移动端软键盘弹起和收起"></a>监听移动端软键盘弹起和收起</h2><h3 id="1-Android端-监听resize"><a href="#1-Android端-监听resize" class="headerlink" title="1. Android端 监听resize"></a>1. <strong>Android端</strong> 监听resize</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> winHeight = $(<span class="built_in">window</span>).height();</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">window</span>).resize(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> thisHeight = $(<span class="keyword">this</span>).height();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>( winHeight - thisHeight &gt; <span class="number">140</span>) &#123;</span><br><span class="line">    <span class="comment">// 键盘弹起，140px是一个预估值，可更改</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 键盘收起</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-IOS端-监听input失焦blur"><a href="#2-IOS端-监听input失焦blur" class="headerlink" title="2. IOS端 监听input失焦blur"></a>2. <strong>IOS端</strong> 监听input失焦blur</h3><p>ios中的键盘或者第三方键盘并不会监听到<code>window resize</code>事件，所以不能用<code>resize</code>监听，所以需要通过输入框是否获取焦点来判断。</p><p>在Android中，有一些机型，键盘收起了，输入框仍处于焦点状态，并没有触发<code>focusout</code>事件。</p><p>因为<code>focusin</code>和<code>focusout</code>支持冒泡，对应focus和blur，所以根据需求，我们可以选择相应的事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'focusin'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">　　<span class="comment">//软键盘弹出的事件处理</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'focusout'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">　　<span class="comment">//软键盘收起的事件处理</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="input-textarea-contenteditable-quot-true-quot-置底问题"><a href="#input-textarea-contenteditable-quot-true-quot-置底问题" class="headerlink" title="input textarea contenteditable=&quot;true&quot; 置底问题"></a><code>input</code> <code>textarea</code> <code>contenteditable=&quot;true&quot;</code> 置底问题</h2><p>这里也需要了解一下，IOS和Android关于<code>fixed</code>属性的支持是不一样的。</p><h3 id="1-IOS端"><a href="#1-IOS端" class="headerlink" title="1. IOS端"></a>1. IOS端</h3><p>ios中，虚拟键盘顶起来之后，整个页面都会被键盘部分压缩。也就是说页面的高度会变小，并且所有的<code>fixed</code>都会变成<code>absolute</code>。</p><p>也就是说，之前在ios端fixed到底部的<code>input</code>框等可focus元素，会变成<code>absolute</code>定位，并且随着页面能够滑动。</p><h3 id="2-Android端"><a href="#2-Android端" class="headerlink" title="2. Android端"></a>2. Android端</h3><p>android端中，虚拟键盘顶起来之后，<code>fixed</code>属性不会失效，唤起的键盘是覆盖在页面上的，不会压缩页面。</p><h2 id="项目中的bug及一些思考"><a href="#项目中的bug及一些思考" class="headerlink" title="项目中的bug及一些思考"></a>项目中的bug及一些思考</h2><p>在最近的一个项目中，移动端页面布局，因为现在手机的高度不同，简单的背景图并不能放文字了，文字会拉伸，我需要设置一个<code>footer</code>放到底部，这里我最开始考虑的就是用<code>fixed</code>布局到最底部，结果当键盘顶起来的时候，文字也就跟着一起顶上去了，整个页面使用的是<code>overflow: hidden</code>。</p><p>这里就需要监听键盘顶起事件，并执行相应的给元素添加相关css的功能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oHeight = $(<span class="built_in">document</span>).height();</span><br><span class="line"><span class="comment">// 监听键盘事件</span></span><br><span class="line">$(<span class="built_in">window</span>).resize(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ($(<span class="built_in">document</span>).height() &lt; oHeight) &#123;</span><br><span class="line">    $(<span class="string">'footer'</span>).addClass(<span class="string">'hide'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $(<span class="string">'footer'</span>).removeClass(<span class="string">'hide'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>另外，关于底部的输入框顶起的问题，我看了一下手机版微博的解决方案，在Android端，虚拟键盘顶起，应该直接是fixed在底部，在IOS端则是整个添加了一个评论的浮层，总来来说也是一个不错的方案。</p><p><img src="https://images-1253206717.cos.ap-guangzhou.myqcloud.com/little_tricks/ios_input.jpg" alt></p><p><img src="https://images-1253206717.cos.ap-guangzhou.myqcloud.com/little_tricks/android_input.jpg" alt></p><p>最后介绍一个神奇的东西<code>Element.scrollIntoView()</code>，这个东西能把底部的输入框提高到可视区域，不过经过测试，键盘顶起是需要时间的，我们需要确保，在键盘调起之后，确保元素调用<code>scrollIntoView()</code>。</p><p>下面是我写的一段代码:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#el'</span>).on(<span class="string">'focus'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'#el'</span>).scrollIntoView();</span><br><span class="line">  &#125;, <span class="number">300</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="滚动穿透"><a href="#滚动穿透" class="headerlink" title="滚动穿透"></a>滚动穿透</h1><p>在移动端中，滚动穿透问题很常见，处理起来也比较繁琐。下面我还是按照不同的方法进行分类：</p><h2 id="touchmove事件中调用preventDefault"><a href="#touchmove事件中调用preventDefault" class="headerlink" title="touchmove事件中调用preventDefault()"></a>touchmove事件中调用<code>preventDefault()</code></h2><p>这个方法适用于，弹出框内容无需滚动。如果弹出层内部有滚动事件，将会导致，弹出层的滚动事件也无法滚动。</p><h2 id="添加相关的类"><a href="#添加相关的类" class="headerlink" title="添加相关的类"></a>添加相关的类</h2><p>给html上添加一个noscroll的类<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.noscroll</span>,</span><br><span class="line"><span class="selector-class">.noscroll</span> body</span><br><span class="line">  <span class="attribute">overflow</span>: hidden</span><br><span class="line"><span class="selector-class">.noscroll</span> body</span><br><span class="line">  poition: relative</span><br></pre></td></tr></table></figure></p><p>缺点：</p><ol><li>html和body的滚动都禁止了，弹出层关闭后，会丢失原有的滚动位置，需要用JS来还原</li><li>有些页面的北京还有能滚的动的效果</li></ol><h2 id="fixed加上js恢复记录位置"><a href="#fixed加上js恢复记录位置" class="headerlink" title="fixed加上js恢复记录位置"></a>fixed加上js恢复记录位置</h2><p>css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span><span class="selector-class">.mask-open</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scrollTop = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">open.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  scrollTop = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.body.classList.add(<span class="string">'mask-open'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.body.style.top = -scrollTop + <span class="string">'px'</span>; <span class="comment">// 脱离文档流后回到当前位置</span></span><br><span class="line"></span><br><span class="line">  mask.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  mask.style.display = <span class="string">'none'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.body.classList.remove(<span class="string">'mask-open'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.body.scrollTop = <span class="built_in">document</span>.documentElement.scrollTop = scrollTop <span class="comment">// 滚动到相应位置，确保兼容性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 参考</p><ul><li>虚拟键盘<ul><li><a href="https://cloud.tencent.com/developer/article/1004930" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1004930</a></li><li><a href="http://www.cnblogs.com/wangyihong/p/7514304.html" target="_blank" rel="noopener">http://www.cnblogs.com/wangyihong/p/7514304.html</a></li></ul></li><li>滚动穿透<ul><li><a href="https://segmentfault.com/q/1010000002942948" target="_blank" rel="noopener">https://segmentfault.com/q/1010000002942948</a></li><li><a href="https://github.com/pod4g/tool/wiki/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%BB%9A%E5%8A%A8%E7%A9%BF%E9%80%8F%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">https://github.com/pod4g/tool/wiki/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%BB%9A%E5%8A%A8%E7%A9%BF%E9%80%8F%E9%97%AE%E9%A2%98</a> </li></ul></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下最近遇到的两个小bug，也不算小bug，可能在不同的移动端浏览器表现不同吧。一个是虚拟键盘顶起，一个是滚动穿透问题。&lt;br&gt;
    
    </summary>
    
      <category term="移动端bug" scheme="http://yoursite.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AFbug/"/>
    
    
      <category term="移动端" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="bug" scheme="http://yoursite.com/tags/bug/"/>
    
      <category term="兼容性" scheme="http://yoursite.com/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>touch事件&amp;&amp;mouse事件&amp;&amp;PC端&amp;&amp;移动端总结</title>
    <link href="http://yoursite.com/2018/07/12/touch%E4%BA%8B%E4%BB%B6-mouse%E4%BA%8B%E4%BB%B6-PC%E7%AB%AF-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/07/12/touch事件-mouse事件-PC端-移动端总结/</id>
    <published>2018-07-12T09:04:01.000Z</published>
    <updated>2019-04-08T09:28:31.644Z</updated>
    
    <content type="html"><![CDATA[<p>最近几天看的东西比较杂，抽空做下小总结。本来想研究下PC端的mousedown，mousemove，mouseup在移动端的浏览器的表现，如何用touch来替代，结果不知不觉，重新看了下JS高程的事件处理章节，关于各种浏览器的clinetX,pageX也看了不少，接下来就做下总结了。<br><a id="more"></a></p><h1 id="touches对象的各种参数"><a href="#touches对象的各种参数" class="headerlink" title="touches对象的各种参数"></a>touches对象的各种参数</h1><h2 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h2><ul><li><code>touchstart</code>: 手指放在屏幕上的时候出发：即使已经有一个手指放在屏幕上也会触发。</li><li><code>touchmove</code>：当手指在屏幕上连续地出发。期间调用<code>preventDefault()</code>会阻止默认滚动。</li><li><code>touchend</code>：当手指从屏幕上移开时出发。</li><li><code>touchcancel</code>：当系统停止跟踪触摸时出发。</li></ul><p>这几个事件都会冒泡，也都能取消。</p><p>下面放一下移动端跟踪触摸的时候三个event事件属性。</p><ul><li><code>touches</code>：表示当前跟踪的触摸操作的<code>Touch</code>对象的数组。</li><li><code>targetTouches</code>：特定于事件目标的<code>Touch</code>对象的数组。</li><li><code>changedTouches</code>：表示自上次触摸以来发生改变的<code>Touch</code>对象的数组。</li></ul><h3 id="touches"><a href="#touches" class="headerlink" title="touches"></a>touches</h3><p>下面是touches属性介绍：</p><table><thead><tr><th>属性</th><th>属性含义</th></tr></thead><tbody><tr><td>clientX, Y</td><td>触摸目标在视口中的x, y坐标，不包括任何滚动偏移</td></tr><tr><td>force</td><td>触摸手指挤压触摸平面的压力大小0.0-1.0之间</td></tr><tr><td>identifier</td><td>表示触摸的唯一ID</td></tr><tr><td>pageX, Y</td><td>触摸目标在页面中的x, y坐标</td></tr><tr><td>radiusX, Y</td><td>能够包围用户和触摸平面的接触面的最小椭圆的水平轴(X轴),垂直轴(Y轴)半径</td></tr><tr><td>rotationAngle</td><td>上述椭圆的能精准覆盖用户与触摸平面的接触面的角度，取值0-90之间</td></tr><tr><td>screenX, Y</td><td>返回触点相对于屏幕左边沿的的X, y坐标. 不包含页面滚动的偏移量</td></tr><tr><td>target</td><td>触摸touchstart触摸在屏幕上返回的element</td></tr></tbody></table><h1 id="mouse事件的各种参数"><a href="#mouse事件的各种参数" class="headerlink" title="mouse事件的各种参数"></a>mouse事件的各种参数</h1><p>DOM3级事件中有九个鼠标事件，顺便放一下<a href="https://developer.mozilla.org/zh-CN/docs/Web/Events" target="_blank" rel="noopener">事件速查表</a>.</p><table><thead><tr><th>事件名</th><th>触发条件</th></tr></thead><tbody><tr><td>click</td><td>用户点击主鼠标按钮或者按下回车键触发</td></tr><tr><td>dbclick</td><td>用户双击主鼠标按钮触发</td></tr><tr><td>mousemove</td><td>鼠标指针在元素内部移动时重复触发</td></tr><tr><td>mouseup</td><td>用户释放鼠标shi</td></tr><tr><td>mousedown</td><td>用户按下任意鼠标按钮触发，不能通过键盘触发这个事件</td></tr><tr><td>mouseenter</td><td>指针移到有事件监听的元素内（不冒泡）</td></tr><tr><td>mouseleave</td><td>指针移出元素范围外（不冒泡）</td></tr><tr><td>mouseover</td><td>指针移到有事件监听的元素或者它的子元素内</td></tr><tr><td>mouseout</td><td>指针移出元素，或者移到它的子元素上</td></tr></tbody></table><p>这里了解一下click的顺序，<code>mousedown</code> -&gt; <code>mouseup</code> -&gt; <code>click</code>。这里click是依赖先行事件mousedown，mouseup运行的。也就是说，假如我们的拖动的div上绑定有一个click事件，拖动的过程中，就会在mouseup后面触发click事件。所以我们可以将click事件绑定到mouseup上面，判断是否有mousemove来考虑触发click上绑定的事件的时机。</p><h1 id="事件处理，事件监听，事件委托"><a href="#事件处理，事件监听，事件委托" class="headerlink" title="事件处理，事件监听，事件委托"></a>事件处理，事件监听，事件委托</h1><p>DOM事件流规定中，事件流包含三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。在DOM事件流中，实际的元素在捕获阶段不会接收到事件。这意味着事件处理会被当做冒泡阶段的一部分。</p><h2 id="事件处理的几种常见方法"><a href="#事件处理的几种常见方法" class="headerlink" title="事件处理的几种常见方法"></a>事件处理的几种常见方法</h2><h3 id="1-HTML事件处理程序"><a href="#1-HTML事件处理程序" class="headerlink" title="1. HTML事件处理程序"></a>1. HTML事件处理程序</h3><p>直接在html上绑定一个事件，事件处理程序一般以<code>&#39;on&#39;</code>开头。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定执行语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"click me"</span> <span class="attr">onclick</span>=<span class="string">"alert('clicked')"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定函数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"click me"</span> <span class="attr">onclick</span>=<span class="string">"showMessage()"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">showMessage</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">'clickclickclicked!'</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上述事件处理程序会创建一个封装着元素属性值的函数。这个函数中有一个局部变量event，也就是事件对象。</p><p>通过event变量，可以直接访问到事件对象，你不用从函数的参数列表读取。在函数内部，this等于事件的目标元素。那么这里需要注意了，事件处理函数中的this指向的问题。所以在需要添加到this的函数中，我们有时会用词法作用域context来保存需要调用的上下文。像上一篇文章中<a href="https://hddhyq.github.io/2018/07/08/%E5%87%BD%E6%95%B0%E5%8E%BB%E6%8A%96debounce%E5%92%8C%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81throttle%E7%9A%84%E5%BA%94%E7%94%A8/#more" target="_blank" rel="noopener">函数节流</a>，就用到了相关保存运行时this的方法。</p><h3 id="2-DOM-0级事件处理"><a href="#2-DOM-0级事件处理" class="headerlink" title="2. DOM 0级事件处理"></a>2. DOM 0级事件处理</h3><p>使用传统的JavaScript指定事件处理方式，先获取到相关的需要操作对象的引用。</p><p>每个元素都有自己的事件处理程序属性，这些属性通常全部小写。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'myBtn'</span>);</span><br><span class="line"></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'this.id'</span>);  <span class="comment">// 'myBtn'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空事件绑定</span></span><br><span class="line">btn.onclick = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>这种形式添加的事件处理程序会在事件流的冒泡阶段被处理。</p><h3 id="3-DOM-2级事件处理程序"><a href="#3-DOM-2级事件处理程序" class="headerlink" title="3. DOM 2级事件处理程序"></a>3. DOM 2级事件处理程序</h3><p>所有的DOM节点都包含两个方法，<code>addEventListener()</code>和<code>removeEventListener()</code>，并接受三个参数：事件名，作为事件处理程序的函数和一个布尔值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'myBtn'</span>);</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello hdd'</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">btn.removeEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 没有用</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello hdd'</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>); </span><br><span class="line"><span class="comment">// 上述代码无法删除相关的事件处理函数，因为两个匿名函数不是同一个函数了。</span></span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'myBtn'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handler =  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello hdd'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, handler, <span class="literal">false</span>);</span><br><span class="line">btn.removeEventListener(<span class="string">'click'</span>, handler, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>event对象包含与创建它的特定事件有关的属性和方法。触发的事件类型不一样，可用的属性和方法也不一样。不过所有事件都会有下表列出的成员。下表的属性都是只读的。</p><table><thead><tr><th>属性/方法</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>bubbles</td><td>Boolean</td><td>表明事件是否冒泡</td></tr><tr><td>cancelable</td><td>Boolean</td><td>表明是否可以取消事件的默认行为</td></tr><tr><td>currentTarget</td><td>Element</td><td>其事件处理程序当前正在处理的那个元素</td></tr><tr><td>defaultPrevented</td><td>Boolean</td><td>是否调用preventDefault()</td></tr><tr><td>detail</td><td>Integer</td><td>与事件相关的细节信息</td></tr><tr><td>eventPhase</td><td>Interger</td><td>调用事件处理程序的阶段：1.捕获阶段2.处于目标3.冒泡阶段</td></tr><tr><td>preventDefault()</td><td>Function</td><td>取消事件的默认行为。如果cancelable是true，则可以使用这个方法</td></tr><tr><td>stopImmediatePropagation()</td><td>Function</td><td>取消事件的进一步捕获或冒泡，同时阻止任何使劲按处理程序被调用</td></tr><tr><td>stopPropagation</td><td>Function</td><td>取消使劲按的进一步捕获或冒泡。如果bubbles为true，则可以使用这个方法</td></tr><tr><td>target</td><td>Element</td><td>事件的目标</td></tr><tr><td>trusted</td><td>Boolean</td><td>true表示浏览器生成的，false表示开发者通过JavaScript创建的</td></tr><tr><td>type</td><td>String</td><td>被触发的事件类型</td></tr><tr><td>view</td><td>AbstractView</td><td>与事件关联的抽象试图。等同于发生对象的window对象</td></tr></tbody></table><p>在事件处理程序的内部，this始终等于<code>currentTarget</code>的值，而<code>target</code>则只包含事件的实际目标。下面点击子元素：</p><ol><li>子元素绑定事件处理程序，父元素绑定事件处理函数。<code>currentTarget</code>等于父元素，<code>target</code>等于子元素</li><li>子元素不绑定事件处理程序，父元素绑定事件处理函数。<code>currentTarget</code>等于父元素，<code>target</code>等于子元素</li><li>子元素绑定事件处理程序，父元素不绑定事件处理函数。<code>currentTarget</code>等于子元素，<code>target</code>等于子元素</li></ol><p>下面看几种常见的事件处理的冒泡次序：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'myBtn'</span>);</span><br><span class="line"></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(event.eventPhase);   <span class="comment">// 2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(event.eventPhase);   <span class="comment">// 1</span></span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(event.eventPhase);   <span class="comment">// 3</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后，事件处理程序执行期间，event对象一直存在，一旦事件处理程序执行完成，event对象就会销毁。</p><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>想页面添加大量的事件处理程序会占用大量的内存，内存中的对象越多，性能也就越差。而且，必须事先指定所有事件处理程序而导致的DOM访问次数会延迟整个页面的交互就绪时间。</p><p>要理解事件委托，事件冒泡和捕获必须梳理一下。</p><p>当一个事件发生在具有父元素的元素导航，现代浏览器运行两个不同的阶段-捕获阶段和冒泡阶段。</p><p>在现代浏览器中，默认情况下，多有时间处理程序都在冒泡阶段注册，因此当我们点击子元素的时候。会沿着这个事件冒泡线路：</p><ul><li>发现了子元素的事件处理程序，并运行了它。</li><li>往外冒泡发现父元素的事件处理程序，并运行它。</li></ul><p>避免这个问题的方法就是使用<code>stopPropagation()</code>修复问题。</p><p>利用了事件冒泡会发现父元素的事件处理程序。我们就可以利用事件委托。</p><p>如果我们有大量子元素，想要点击任何一个都可以运行一段代码，可以将事件监听器设置在父节点元素，而且对于新添加的元素，事件委托很好的能为动态添加的元素动态的绑定事件处理函数。下面是例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"lists"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"list1"</span>&gt;</span>列表第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"list2"</span>&gt;</span>列表第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"list3"</span>&gt;</span>列表第三项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">'lists'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;  <span class="comment">// 也可以绑定lists元素</span></span><br><span class="line">  <span class="keyword">var</span> target = event.target;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span>(target.id) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'list1'</span>:</span><br><span class="line">      <span class="built_in">console</span>.log(target.innerHTML);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'list2'</span>:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'我是第二项'</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'list3'</span>:</span><br><span class="line">      alert(<span class="string">'hello world'</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="浏览器中事件相关的常见几种位置坐标"><a href="#浏览器中事件相关的常见几种位置坐标" class="headerlink" title="浏览器中事件相关的常见几种位置坐标"></a>浏览器中事件相关的常见几种位置坐标</h1><h2 id="clientX-Y"><a href="#clientX-Y" class="headerlink" title="clientX/Y"></a>clientX/Y</h2><p>获取到的是触发点相对浏览器可视区域左上角距离，不随页面滚动而改变。</p><h2 id="pageX-Y"><a href="#pageX-Y" class="headerlink" title="pageX/Y"></a>pageX/Y</h2><p>pageX/Y获取到的是触发点相对文档区域左上角距离，会随着页面滚动而改变。</p><h2 id="offsetX-Y"><a href="#offsetX-Y" class="headerlink" title="offsetX/Y"></a>offsetX/Y</h2><p>offsetX/Y获取到是触发点相对被触发dom的左上角距离，不过左上角基准点在不同浏览器中有区别，其中在IE中以内容区左上角为基准点不包括边框，如果触发点在边框上会返回负值，而chrome中以边框左上角为基准点。</p><h2 id="layerX-Y"><a href="#layerX-Y" class="headerlink" title="layerX/Y"></a>layerX/Y</h2><p>layerX/Y获取到的是触发点相对被触发dom左上角的距离，数值与offsetX/Y相同，这个变量就是firefox用来替代offsetX/Y的，基准点为边框左上角，但是有个条件就是，被触发的dom需要设置为<code>position:relative</code>或者<code>position:absolute</code>，否则会返回相对html文档区域左上角的距离。</p><h2 id="screenX-Y"><a href="#screenX-Y" class="headerlink" title="screenX/Y"></a>screenX/Y</h2><p>screenX/Y获取到的是触发点相对显示器屏幕左上角的距离，不随页面滚动而改变。</p><p>一个图解释：</p><p><img src="https://images-1253206717.cos.ap-guangzhou.myqcloud.com/little_tricks/screenX_Y.jpg" alt></p><h1 id="简单的移动端-PC端拖动代码"><a href="#简单的移动端-PC端拖动代码" class="headerlink" title="简单的移动端/PC端拖动代码"></a>简单的移动端/PC端拖动代码</h1><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/brokenbonesdd/jabtn2g6/embedded/js,html,css,result/dark" frameborder="0" allowfullscreen></iframe><p>上面的代码中，我将事件的type做了一下判断，进而绑定相关的。</p><h1 id="关于拖拽事件的常见bug及处理方式"><a href="#关于拖拽事件的常见bug及处理方式" class="headerlink" title="关于拖拽事件的常见bug及处理方式"></a>关于拖拽事件的常见bug及处理方式</h1><p>介绍下常见的，拖拽小问题。</p><h2 id="1-鼠标移动过快，离开拖拽物体"><a href="#1-鼠标移动过快，离开拖拽物体" class="headerlink" title="1. 鼠标移动过快，离开拖拽物体"></a>1. 鼠标移动过快，离开拖拽物体</h2><p>由于拖拽的div太小了，拖拽物体不在随着鼠标移动，前面介绍事件的时候也提到了，鼠标移动元素，<code>mousemove</code>事件不再触发，这时我们可以将拖拽物体上的<code>mousemve</code>事件放到<code>document</code>上面，同时将<code>mouseup</code>也改为<code>document</code>上面的事件</p><h2 id="2-会出现将div脱出浏览器窗口"><a href="#2-会出现将div脱出浏览器窗口" class="headerlink" title="2. 会出现将div脱出浏览器窗口"></a>2. 会出现将div脱出浏览器窗口</h2><p>限制div的拖动距离</p><p>还有一些常见bug，一般阻止默认事件都可以解决。</p><h1 id="部分参考"><a href="#部分参考" class="headerlink" title="部分参考"></a>部分参考</h1><ul><li><a href="http://www.cnblogs.com/moqiutao/p/5050225.html" target="_blank" rel="noopener">http://www.cnblogs.com/moqiutao/p/5050225.html</a></li><li><a href="http://www.cnblogs.com/yufann/p/JS-Summary9.html" target="_blank" rel="noopener">http://www.cnblogs.com/yufann/p/JS-Summary9.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近几天看的东西比较杂，抽空做下小总结。本来想研究下PC端的mousedown，mousemove，mouseup在移动端的浏览器的表现，如何用touch来替代，结果不知不觉，重新看了下JS高程的事件处理章节，关于各种浏览器的clinetX,pageX也看了不少，接下来就做下总结了。&lt;br&gt;
    
    </summary>
    
      <category term="JS工具" scheme="http://yoursite.com/categories/JS%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="JS基础事件" scheme="http://yoursite.com/tags/JS%E5%9F%BA%E7%A1%80%E4%BA%8B%E4%BB%B6/"/>
    
      <category term="触摸" scheme="http://yoursite.com/tags/%E8%A7%A6%E6%91%B8/"/>
    
  </entry>
  
  <entry>
    <title>你不知道的JS-this和原型对象</title>
    <link href="http://yoursite.com/2018/05/14/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JS-this%E5%92%8C%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2018/05/14/你不知道的JS-this和原型对象/</id>
    <published>2018-05-14T07:11:34.000Z</published>
    <updated>2019-04-08T09:28:55.397Z</updated>
    
    <content type="html"><![CDATA[<p>这里我总结了下，《你不知道的javaScript上卷》第二部分的内容，总结的可能比较简短，相关的知识点，与设计模式中间有重合，设计模式中的相关设计模式，后期也会补上。<br><a id="more"></a></p><h1 id="关于this"><a href="#关于this" class="headerlink" title="关于this"></a>关于this</h1><h2 id="为什么要用this呢？"><a href="#为什么要用this呢？" class="headerlink" title="为什么要用this呢？"></a>为什么要用this呢？</h2><p>如果没有this，我们需要调用变量名，才能在函数或者方法中调用相关它自己，如果有了this，我们就能用一种更优雅的方式“传递”一个对象的引用。因此可以将API设计的更加简洁并且易于复用。</p><p>随着你使用的模式越来越复杂，显示传递上下文对象会使代码变得越来越混乱，使用this则不会这样。</p><h2 id="误解"><a href="#误解" class="headerlink" title="误解"></a>误解</h2><p>关于两种常见的对于this的解释，但是他们都是错误的。</p><h3 id="指向自身"><a href="#指向自身" class="headerlink" title="指向自身"></a>指向自身</h3><p>很多人很容易吧this联想到它的英文意思，指向函数本身，但是this的绑定是动态的！</p><p>看一个例子吧</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">"foo: "</span> + num );</span><br><span class="line">  <span class="comment">// 记录 foo 被调用的次数</span></span><br><span class="line">  <span class="keyword">this</span>.count++;</span><br><span class="line">&#125;</span><br><span class="line">foo.count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i &gt; <span class="number">5</span>) &#123;</span><br><span class="line">    foo( i );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// foo: 6</span></span><br><span class="line"><span class="comment">// foo: 7</span></span><br><span class="line"><span class="comment">// foo: 8</span></span><br><span class="line"><span class="comment">// foo: 9</span></span><br><span class="line"><span class="comment">// foo 被调用了多少次？</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( foo.count ); <span class="comment">// 0 -- WTF?</span></span><br></pre></td></tr></table></figure><p>上面的this绑定到哪里了呢？答案是全局。</p><h3 id="它的作用域"><a href="#它的作用域" class="headerlink" title="它的作用域"></a>它的作用域</h3><p>第二种常见的误解是，this指向函数的作用域。</p><p>再看一个例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">this</span>.bar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure><p>这里我们既想用词法作用域，又想调用this来引入我们想用的函数体的变量。</p><p>这里稍微解析一下， <code>this.bar()</code> 引用的是外部的全局的 <code>bar()</code> 函数，这样里面的语句， <code>console.log(this.a)</code> 查找的也是全局的 <code>a</code> 变量。我们知道函数定义的 <code>a</code> 变量是影响不了全局的 <code>a</code> 变量的。所以这里我们会抛出一个引用错误。</p><h3 id="this到底是什么"><a href="#this到底是什么" class="headerlink" title="this到底是什么"></a>this到底是什么</h3><p>排除了错误的理解后，我们看看this到底是什么样的机制。</p><p>之前我们说过this是在运行时进行绑定的，并不是在编写时绑定，他的上下文取决于函数调用时的各种条件。this的绑定和函数声明的位置灭有任何关系，只取决于函数的调用方式。</p><p>当一个函数被调用时，会创建一个活动记录（有时候也称为执行上下文）。这个记录会包含函数在哪里被调用（调用栈）、函数的调用方法、传入的参数等消息。this就是记录的其中一个属性，会在函数执行的过程中用到。</p><p>下一章我们会学习如何寻找函数的滴啊用位置，从而判断函数在执行的过程中会如何绑定this。</p><h1 id="this全面解析"><a href="#this全面解析" class="headerlink" title="this全面解析"></a>this全面解析</h1><h2 id="调用位置"><a href="#调用位置" class="headerlink" title="调用位置"></a>调用位置</h2><p>就像前面说的，调用位置就是函数在代码中被调用的位置（而不是声明的位置）。只有仔细分析调用位置才能回答这个问题：这个this到底引用的是什么？</p><p>通常来说，寻找滴啊用位置就是寻找“函数被调用的位置”，但是做起来没有这么简单，因为某些编程模式可能会隐藏真正的调用位置。</p><p>最重要的是要分析调用栈（就是为了到达当前执行位置所调用的所有函数）。我们关心的调用位置就在当前正在执行的函数的前一个调用中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当前调用栈是：baz</span></span><br><span class="line">  <span class="comment">// 因此，当前调用位置是全局作用域</span></span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">"baz"</span> );</span><br><span class="line">  bar(); <span class="comment">// &lt;-- bar 的调用位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当前调用栈是 baz -&gt; bar</span></span><br><span class="line">  <span class="comment">// 因此，当前调用位置在 baz 中</span></span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">"bar"</span> );</span><br><span class="line">  foo(); <span class="comment">// &lt;-- foo 的调用位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当前调用栈是 baz -&gt; bar -&gt; foo</span></span><br><span class="line">  <span class="comment">// 因此，当前调用位置在 bar 中 // 这里放一个断点可以查看当前调用栈，倒数第二个就是真正的调用位置。</span></span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">"foo"</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">baz(); <span class="comment">// &lt;-- baz 的调用位置</span></span><br></pre></td></tr></table></figure><h2 id="绑定规则"><a href="#绑定规则" class="headerlink" title="绑定规则"></a>绑定规则</h2><p>这里也简要的解释四种规则：</p><h3 id="1-默认绑定"><a href="#1-默认绑定" class="headerlink" title="1. 默认绑定"></a>1. 默认绑定</h3><p>最常用的函数调用类型：独立函数调用。可以把这条规则看做是无法应用其他规则时的默认规则。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">foo(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>怎么知道应用了默认绑定呢？可以通过调用位置来看看 <code>foo()</code> 是如何调用的。在代码中，<code>foo()</code>是直接使用不带任何修饰的函数引用进行调用的，因此只能使用默认绑定，无法应用其他规则。如果使用严格模式，将默认无法使用默认绑定的，因为this会绑定为undefined。</p><h3 id="2-隐式绑定"><a href="#2-隐式绑定" class="headerlink" title="2. 隐式绑定"></a>2. 隐式绑定</h3><p>另一种需要考虑的规则是调用位置是否有上下文对象，或者说是否被某个对象拥有或者包含。</p><p>常见的对象的方法，就是隐式绑定。对象属性引用链只有最顶层或者说最后一层会影响调用位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  a: <span class="number">42</span>,</span><br><span class="line">  foo: foo</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  a: <span class="number">2</span>,</span><br><span class="line">  obj2: obj2</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj1.obj2.foo(); <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><h4 id="隐式丢失"><a href="#隐式丢失" class="headerlink" title="隐式丢失"></a>隐式丢失</h4><p>因为this的绑定会根据runtime，所以，思考下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">2</span>,</span><br><span class="line">  foo: foo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = obj.foo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"全局对象a"</span>;</span><br><span class="line"></span><br><span class="line">bar(); <span class="comment">// 全局对象a</span></span><br></pre></td></tr></table></figure><p>还有一种是常见的回调函数中的this隐式丢失，看下面代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">2</span>,</span><br><span class="line">  foo: foo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"oops, global"</span>; <span class="comment">// a 是全局对象的属性</span></span><br><span class="line"></span><br><span class="line">setTimeout( obj.foo, <span class="number">100</span> ); <span class="comment">// "oops, global"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript 环境中内置的 setTimeout() 函数实现和下面的伪代码类似：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTimeout</span>(<span class="params">fn,delay</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 等待 delay 毫秒</span></span><br><span class="line">  fn(); <span class="comment">// &lt;-- 调用位置！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来，我们会介绍相关的通过固定this来fix,this所指向的对象或者说上下文context。</p><h3 id="3-显示绑定"><a href="#3-显示绑定" class="headerlink" title="3. 显示绑定"></a>3. 显示绑定</h3><p>分析隐式绑定时，我们必须在一个对象的内部包含一个指向函数的属性，并通过这个属性间接引用函数，从而把this间接（隐式）绑定到这个对象上。</p><p>我们可以通过call(..)和apply(..)方法，来在某个函数中强制指定到this的上下文。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a:<span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo.call( obj ); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>可惜，显式绑定仍然无法解决我们之前提出的丢失绑定问题。</p><h4 id="1-硬绑定"><a href="#1-硬绑定" class="headerlink" title="1. 硬绑定"></a>1. 硬绑定</h4><p>思考下面代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  foo.call(obj);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  foo.call(obj);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这里，我们在 <code>bar</code> 内部实现了一个 <code>foo.call(obj)</code>，因此强制把 <code>foo</code> 的 <code>this</code> 绑定到了 <code>obj</code> 。无论之后如何调用函数 <code>bar</code> ，它总会在 <code>obj</code> 上调用 <code>foo</code> 。这种绑定是一种显式的强制绑定，因此我们称之为 <strong>硬绑定</strong>。</p><p>ES5中提供了内置的方法，<strong>Function.prototype.bind</strong></p><h4 id="2-API调用的“上下文”"><a href="#2-API调用的“上下文”" class="headerlink" title="2. API调用的“上下文”"></a>2. API调用的“上下文”</h4><p>第三方库的许多函数，以及 <strong>JavaScript</strong> 语言和宿主环境中许多新的内置函数，都提供了一<br>个可选的参数，通常被称为“上下文”（context），其作用和 bind(..) 一样，确保你的回调<br>函数使用指定的 <code>this</code>。</p><p>举个栗子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( el, <span class="keyword">this</span>.id );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  id: <span class="string">"awesome"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 foo(..) 时把 this 绑定到 obj</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach( foo, obj );</span><br><span class="line"><span class="comment">// 1 awesome 2 awesome 3 awesome</span></span><br></pre></td></tr></table></figure></p><p>这些函数实际上就是通过 call(..) 或者 apply(..) 实现了显式绑定，这样你可以少些一些<br>代码。</p><h3 id="4-new绑定"><a href="#4-new绑定" class="headerlink" title="4. new绑定"></a>4. new绑定</h3><p>在JavaScript中，构造函数只是一些使用 <code>new</code> 操作符时被调用的函数。它们并不会属于某个类，也不会实例化一个类。实际上，它们甚至不能说是一种特殊的函数类型，它们只是被 <code>new</code> 操作符调用的普通函数。</p><p>使用 <code>new</code> 来调用函数，或者说发生构造函数调用时，会自动执行下面的操作。</p><ol><li>创建（或者说构造）一个全新的对象。</li><li>这个新对象会被执行[[原型]]连接。</li><li>这个新对象会绑定到函数调用的 <code>this</code> 。</li><li>如果函数没有返回其他对象，那么 <code>new</code> 表达式中的函数调用会自动返回这个新对象。</li></ol><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><ol><li>函数是否在new中调用（new绑定）？如果是的话this绑定的是新创建的对象。</li><li>函数是否通过call、apply（显示绑定）或者硬绑定调用？如果是的话，this绑定的是制定的对象。</li><li>函数是否在某个上下文对象中调用（隐式绑定）？如果是的话，this绑定的是那个上下文对象。</li><li>如果都不是的话，使用默认绑定。如果在严格模式下，就绑定到undefined，否则绑定到全局对象。</li></ol><h2 id="绑定例外"><a href="#绑定例外" class="headerlink" title="绑定例外"></a>绑定例外</h2><p>在某些场景下 this 的绑定行为会出乎意料，你认为应当应用其他绑定规则时，实际上应用<br>的可能是默认绑定规则。</p><h3 id="1-被忽略的this"><a href="#1-被忽略的this" class="headerlink" title="1. 被忽略的this"></a>1. 被忽略的this</h3><p>如果你把null或者undefined作为this的绑定对象传入call、apply或者bind，这些值在调用的时候会被忽略，实际应用的是默认绑定规则。</p><p>如果函数并不关心this的话，你仍然需要传入一个占位符，常见的就是用null，可是这里用null来忽略this绑定可能会产生一些副作用。如果这个函数中确实使用了this，那默认绑定规则会把this绑定到全局对象，在浏览器这个对象是window，这将产生不可预计的后果。</p><p><strong>更安全的this</strong></p><p>一种“更安全”的做法是，闯入一个特殊的对象，常见方法，<code>Object.create(null)</code>。如果引入的是这个空对象，这样就比较安全了，这样很明确的表示this是空，即使函数中调用了this，也不会更改全局对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = <span class="number">200</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ø = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">foo.call(ø)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="comment">// 200 2</span></span><br></pre></td></tr></table></figure><h3 id="2-间接引用"><a href="#2-间接引用" class="headerlink" title="2. 间接引用"></a>2. 间接引用</h3><p>另一个需要注意的是，你有可能（有意或者无意地）创建一个函数的“间接引用”，在这<br>种情况下，调用这个函数会应用默认绑定规则。</p><p>常见的就是赋值的时候发生。</p><p>注意：对于默认绑定来说，决定 this 绑定对象的并不是调用位置是否处于严格模式，而是函数体是否处于严格模式。如果函数体处于严格模式，this 会被绑定到 undefined，否则this 会被绑定到全局对象。</p><h3 id="3-软绑定"><a href="#3-软绑定" class="headerlink" title="3. 软绑定"></a>3. 软绑定</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Function</span>.prototype.softBind) &#123;</span><br><span class="line">  <span class="built_in">Function</span>.prototype.softBind = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fn = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 捕获所有 curried 参数</span></span><br><span class="line">    <span class="keyword">var</span> curried = [].slice.call( <span class="built_in">arguments</span>, <span class="number">1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> bound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fn.apply(</span><br><span class="line">          (!<span class="keyword">this</span> || <span class="keyword">this</span> === (<span class="built_in">window</span> || global)) ?</span><br><span class="line">            obj : <span class="keyword">this</span></span><br><span class="line">          curried.concat.apply( curried, <span class="built_in">arguments</span> )</span><br><span class="line">      );</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    bound.prototype = <span class="built_in">Object</span>.create( fn.prototype );</span><br><span class="line">    <span class="keyword">return</span> bound;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>softBind(..)</code>的其他原理和ES5内置的bind(..)类似。它会对制定函数进行封装，首先会检查调用时的this，如果this绑定到全局对象或者undefined，那就把指定的默认对象obj绑定到this，否则不会修改this。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"name: "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">"obj"</span> &#125;,</span><br><span class="line">    obj2 = &#123; <span class="attr">name</span>: <span class="string">"obj2"</span> &#125;,</span><br><span class="line">    obj3 = &#123; <span class="attr">name</span>: <span class="string">"obj3"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fooOBJ = foo.softBind( obj );</span><br><span class="line"></span><br><span class="line">fooOBJ(); <span class="comment">// name: obj</span></span><br><span class="line"></span><br><span class="line">obj2.foo = foo.softBind(obj);</span><br><span class="line"></span><br><span class="line">obj2.foo(); <span class="comment">// name: obj2 &lt;---- 看！！！</span></span><br><span class="line"></span><br><span class="line">fooOBJ.call( obj3 ); <span class="comment">// name: obj3 &lt;---- 看！</span></span><br><span class="line"></span><br><span class="line">setTimeout( obj2.foo, <span class="number">10</span> );</span><br><span class="line"><span class="comment">// name: obj &lt;---- 应用了软绑定</span></span><br></pre></td></tr></table></figure></p><h2 id="this词法"><a href="#this词法" class="headerlink" title="this词法"></a>this词法</h2><p>这里介绍一下箭头函数: <code>() =&gt; {}</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  a: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  a: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = foo.call(obj1);</span><br><span class="line">bar.call(obj2);</span><br></pre></td></tr></table></figure></p><p><code>foo()</code> 内部创建的箭头函数会捕获调用时<code>foo()</code>的this。由于 <code>foo()</code> 的this绑定到obj1，bar（引用箭头函数）的this也会绑定到obj1，箭头函数的绑定无法被修改。（new也不行！）</p><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>两种形式的定义：声明（文字）形式和构造形式。</p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>了解一下，简单基本类型：<code>string</code>、<code>number</code>、<code>boolean</code>、<code>null</code>和<code>undefined</code>。null有时会被当做一种对象类型，但是这其实只是语言本身的一个bug。</p><p>JS中有很多复杂基本类型。这些是一些特殊的对象子类型。函数就是对象的一个子类型（从技术角度来说就是“可调用的对象”）</p><p>Javascript中的函数是“一等公民”，因为它们本质上和普通的对象一样（只是可以调用），所以可以像操作其他对象一样操作函数（比如当做另一个函数的参数）。</p><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><p>内置对象有：<code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Object</code>、<code>Function</code>、<code>Array</code>、<code>Date</code>、<code>RegExp</code>和<code>Error</code>。</p><p>关于字面量的基本类型调用 <code>Object.prototype.toString()</code> 都会转化成对应的包装类型。</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>内容听名字似乎存储在对象内部，其实在语言中，这些值的储存方式是多种多样的，一般不会存在对象容器的内部。存储在对象容器的内部的是这些属性的名称，它们就像指针（从技术角度来说就是引用）一样，指向这些值真正的存储位置。</p><p><code>.a</code>通常指的是属性访问，[“a”] 语法通常被称为“键访问”。在 <code>[&quot;..&quot;]</code> 语法使用字符串来访问属性，所以可以在程序中构造这个字符串。</p><h3 id="可计算属性名"><a href="#可计算属性名" class="headerlink" title="可计算属性名"></a>可计算属性名</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prefix = <span class="string">"foo"</span>;</span><br><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">  [prefix + <span class="string">"bar"</span>]: <span class="string">"hello"</span>,</span><br><span class="line">  [prefix + <span class="string">"baz"</span>]: <span class="string">"world"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myObject[<span class="string">"foobar"</span>]; <span class="comment">// hello</span></span><br><span class="line">myObject[<span class="string">"foobaz"</span>]; <span class="comment">// world</span></span><br></pre></td></tr></table></figure><h3 id="属性与方法"><a href="#属性与方法" class="headerlink" title="属性与方法"></a>属性与方法</h3><p>如果访问的对象是一个函数，在JS中，我们喜欢称之为 “方法”，实际上呢，这个所谓的“方法”也仅仅是对方法的引用。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组支持[]访问形式，不过数组期待的是数字下标。所以你添加的属性值并不会使数组的<code>length</code>变长。你完全可以把数组当做一个普通的键/值对来使用。</p><p>而且要注意了：<strong>如果你试图向数组添加一个属性，但是属性名“看起来”像一个数字，那它会变成<br>一个数值下标（因此会修改数组的内容而不是添加一个属性）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = [ <span class="string">"foo"</span>, <span class="number">42</span>, <span class="string">"bar"</span> ];</span><br><span class="line"></span><br><span class="line">myArray[<span class="string">"3"</span>] = <span class="string">"baz"</span>;</span><br><span class="line"></span><br><span class="line">myArray.length; <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">myArray[<span class="number">3</span>]; <span class="comment">// "baz"</span></span><br></pre></td></tr></table></figure><h3 id="复制对象"><a href="#复制对象" class="headerlink" title="复制对象"></a>复制对象</h3><p>复制不可避免需要讨论到的就是深拷贝和浅拷贝。</p><p>对于JSON安全的对象，这有一种方法可以用：<code>var newObj = JSON.parse( JSON.stringify( someObj ) );</code></p><p>ES6中定义的 <code>Object.assign(..)</code> 可以用在浅拷贝上，<code>Object.assign(..)</code> 方法的第一个参数是目标对象，之后还可以跟一个或多个源对象。它会遍历一个或者多个源对象。它会遍历一个或多个源对象的多有自由键并把它们复制（使用 = 操作符赋值）到目标对象，最后返回目标对象。</p><h4 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h4><p>在ES5之前，JavaScript语言本身并没有提供可以直接检测属性特性的方法，比如判断属性是否是只读。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">a:<span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor( myObject, <span class="string">"a"</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// value: 2,</span></span><br><span class="line"><span class="comment">// writable: true,</span></span><br><span class="line"><span class="comment">// enumerable: true,</span></span><br><span class="line"><span class="comment">// configurable: true</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p><code>Object.getOwnPropertyDescriptor(..)</code>和<code>Object.defineProperty(..)</code>了解一下。</p><p>常见配置：</p><ol><li>Writable 是否可以修改属性的值</li><li>Configurable 只要属性是可配置的，就可以使用 <code>defineProperty(..)</code> 方法来修改属性描述符。关于<code>Configurable</code>配置为false，<code>writable</code>可以由<code>true</code>变为<code>false</code>，并且不能再变回来啦！操作不可逆哈。</li><li>Enumerable 最后一个属性描述符（还有两个，我们会在介绍 getter 和 setter 时提到）<br>是 <code>enumerable</code>。</li></ol><p>放一下总结好了，这本书就总结到这里了：</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>JavaScript 中的对象有字面形式（比如 var a = { .. }）和构造形式（比如 var a = newArray(..)）。字面形式更常用，不过有时候构造形式可以提供更多选项。</p><p>许多人都以为“JavaScript 中万物都是对象”，这是错误的。对象是 6 个（或者是 7 个，取决于你的观点）基础类型之一。对象有包括 function 在内的子类型，不同子类型具有不同的行为，比如内部标签 [object Array] 表示这是对象的子类型数组。</p><p>对象就是键 / 值对的集合。可以通过 .propName 或者 [“propName”] 语法来获取属性值。访问属性时，引擎实际上会调用内部的默认 [[Get]] 操作（在设置属性值时是 [[Put]]），[[Get]] 操作会检查对象本身是否包含这个属性，如果没找到的话还会查找 [[Prototype]]链（参见第 5 章）。</p><p>属性的特性可以通过属性描述符来控制，比如 writable 和 configurable。此外，可以使用Object.preventExtensions(..)、Object.seal(..) 和 Object.freeze(..) 来设置对象（及其属性）的不可变性级别。</p><p>属性不一定包含值——它们可能是具备 getter/setter 的“访问描述符”。此外，属性可以是可枚举或者不可枚举的，这决定了它们是否会出现在 for..in 循环中。</p><p>你可以使用 ES6 的 for..of 语法来遍历数据结构（数组、对象，等等）中的值，for..of会寻找内置或者自定义的 @@iterator 对象并调用它的 next() 方法来遍历数据值。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里我总结了下，《你不知道的javaScript上卷》第二部分的内容，总结的可能比较简短，相关的知识点，与设计模式中间有重合，设计模式中的相关设计模式，后期也会补上。&lt;br&gt;
    
    </summary>
    
      <category term="JS基础" scheme="http://yoursite.com/categories/JS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="你不知道的JS" scheme="http://yoursite.com/tags/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JS/"/>
    
  </entry>
  
  <entry>
    <title>你不知道的JS总结-作用域和闭包(二)</title>
    <link href="http://yoursite.com/2018/02/05/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JS%E6%80%BB%E7%BB%93-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85-%E4%BA%8C/"/>
    <id>http://yoursite.com/2018/02/05/你不知道的JS总结-作用域和闭包-二/</id>
    <published>2018-02-05T15:10:19.000Z</published>
    <updated>2019-04-08T09:29:01.349Z</updated>
    
    <content type="html"><![CDATA[<p>关于你不知道的JS总结-作用域和闭包的第二部分。<br><a id="more"></a></p><h1 id="第-4-章-提升"><a href="#第-4-章-提升" class="headerlink" title="第 4 章 提升"></a>第 4 章 提升</h1><h2 id="先有鸡还是先有蛋"><a href="#先有鸡还是先有蛋" class="headerlink" title="先有鸡还是先有蛋"></a>先有鸡还是先有蛋</h2><p>关于JS的代码执行顺序，直觉上是由上到下一行一行执行的。实际上并不完全正确，考虑下下面的代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log( a );</span><br></pre></td></tr></table></figure></p><p>你认为<code>console.log( a );</code>声明会输出什么呢？很多人会认为是<code>undefined</code>，其实真实的输出结果是2。而<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( a );</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><p>这段代码输出结果又是<code>ReferenceError</code>异常。</p><p>按照第一章的编译器顺序，正确的思考思路是，包括变量和函数在内的所有声明都会在任何代码被执行前首先被处理。</p><p>所以看到的<code>var a = 2;</code>其实是<code>var a;</code> 和 <code>a = 2;</code>两个声明。代码的编译过程是如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加上顺序，流程如下：</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">a = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><p>从上面的例子可以看出，是现有声明，再有赋值。这个过程就好像变量和函数声明从它们在代码中出现的位置被“移动”到了最上面。这个过程就叫作提升。</p><blockquote><p>只有声明本身会被提升，而赋值或其他运行逻辑会留在原地。如果提升改变了代码执行的顺序，会造成非常严重的破坏。</p></blockquote><h3 id="关于函数的声明"><a href="#关于函数的声明" class="headerlink" title="关于函数的声明"></a>关于函数的声明</h3><p>首先看一段代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foo();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( a ); <span class="comment">// undefined</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>foo 函数的声明（这个例子还包括实际函数的隐含值）被提升了，因此第一行中的调用可以正常执行。</p><p>正确的执行顺序：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  <span class="built_in">console</span>.log( a ); <span class="comment">// undefined</span></span><br><span class="line">  a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure></p><p><strong>函数声明会被提升，但是函数表达式却不会被提升。</strong></p><p>下面看一段函数表达式的代码片段：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">foo(); <span class="comment">// TypeError</span></span><br><span class="line">bar(); <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 经过提升</span></span><br><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line">foo(); <span class="comment">// TypeError</span></span><br><span class="line">bar(); <span class="comment">// ReferenceError</span></span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bar = ...self...</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="函数优先"><a href="#函数优先" class="headerlink" title="函数优先"></a>函数优先</h2><p>函数声明和变量声明都会被提升，那么哪一个的优先权大呢？答案就在标题。<br>看这一段代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">foo(); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="number">1</span> );</span><br><span class="line">&#125;</span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="number">2</span> );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这个代码片段会被引擎理解为如下形式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="number">1</span> );</span><br><span class="line">&#125;</span><br><span class="line">foo(); <span class="comment">// 1</span></span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="number">2</span> );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>尽管　<code>var foo</code> 出现在<code>function foo()...</code>，但它是一个重复的声明，会被忽略掉。因为函数声明会被提升到普通变量之前。</p><p>而且，后面的函数声明会覆盖前面的声明。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">foo(); <span class="comment">// 3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="number">1</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="number">2</span> );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="number">3</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一个普通块内部的函数声明通常会被提升到所在作用域的顶部，这个过程 <strong>不会像下面的代码暗示的那样可以被条件判断所控制：</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">foo(); <span class="comment">// "b"</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">"a"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">"b"</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们习惯将 <code>var a = 2</code>; 看作一个声明，而实际上 <strong>JavaScript</strong> 引擎并不这么认为。它将 <code>var a</code>和 <code>a = 2</code> 当作两个单独的声明，第一个是编译阶段的任务，而第二个则是执行阶段的任务。</p><p>这意味着无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。可以将这个过程形象地想象成所有的声明（变量和函数）都会被“移动”到各自作用域的最顶端，这个过程被称为<strong>提升</strong>。</p><p>声明本身会被提升，而包括函数表达式的赋值在内的赋值操作并不会提升。</p><p>要注意避免重复声明，特别是当普通的 <code>var</code> 声明和函数声明混合在一起的时候，否则会引起很多危险的问题！</p><h1 id="第-5-章-作用域闭包"><a href="#第-5-章-作用域闭包" class="headerlink" title="第 5 章 作用域闭包"></a>第 5 章 作用域闭包</h1><h2 id="启示"><a href="#启示" class="headerlink" title="启示"></a>启示</h2><p>闭包无处不在，你所需要的只是理解它</p><h2 id="实质问题"><a href="#实质问题" class="headerlink" title="实质问题"></a>实质问题</h2><p>闭包的定义：</p><blockquote><p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。</p></blockquote><p>下面这段代码的定义：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( a ); <span class="comment">// 2</span></span><br><span class="line">  &#125;</span><br><span class="line">  bar();</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure></p><p>上面的代码中，基于词法作用域，函数<code>bar()</code>可以访问外部作用域中的变量a（利用RHS引用调用）。这里的词法作用域的利用，是闭包的一部分，也是最重要的一部分。</p><p>从纯学术的角度说，函数 <code>bar()</code> 具有一个涵盖 <code>foo()</code> 作用域的闭包（事实上，涵盖了它能访问的所有作用域，比如全局作用域））。也可以认为 bar() 被封闭在了 foo() 的作用域中。为什么呢？原因简单明了，因为 bar() 嵌套在 foo() 内部。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( a );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> baz = foo();</span><br><span class="line">baz(); <span class="comment">// 2 —— 朋友，这就是闭包的效果。</span></span><br></pre></td></tr></table></figure></p><p>函数<code>bar()</code>的词法作用域能够访问<code>foo()</code>的内部作用域。然后我们将<code>bar()</code>函数本身当做一个值类型进行传递。上面这个例子中，我们就是将bar所应用的函数对象本身当做返回值。</p><p>在<code>foo()</code>执行后，其返回值（也就是内部的 <code>bar()</code> 函数）赋值给变量 <code>baz</code> 并调用 <code>baz()</code>，实际上只是通过不同的标识符引用调用了内部的函数<code>bar()</code>。</p><p><code>bar()</code>显然可以被正常执行，但是在这个例子中，它在自己定义的词法作用域以外的地方执行。</p><p><code>foo()</code> 执行后，通常会期待 <code>foo()</code> 的整个内部作用域都被销毁，因为我们知道引擎有垃圾回收器用来释放不再使用的内存空间。由于看上去 <code>foo()</code> 的内容不会再被使用，所以很自然地会考虑对其进行回收。</p><p>而闭包的“神奇”之处正是可以阻止这件事情的发生。事实上内部作用域依然存在，因此没有被回收。谁在使用这个内部作用域？原来是 <code>bar()</code> 本身在使用。</p><p>拜 <code>bar()</code> 所声明的位置所赐，它拥有涵盖 <code>foo()</code> 内部作用域的闭包，使得该作用域能够一直存活，以供 <code>bar()</code> 在之后任何时间进行引用。</p><p><code>bar()</code> 依然持有对该作用域的引用，而这个引用就叫作闭包。</p><p>因此，在<strong>几微秒</strong>之后变量 baz 被实际调用（调用内部函数 <code>bar</code>），不出意料它可以访问定义时的词法作用域，因此它也可以如预期般访问变量 a。</p><p>这个函数在定义时的词法作用域以外的地方被调用。闭包使得函数可以继续访问定义时的词法作用域。</p><p>当然，无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都可以观察到闭包。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( a ); <span class="comment">// 2</span></span><br><span class="line">  &#125;</span><br><span class="line">  bar( baz );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  fn(); <span class="comment">// 妈妈快看呀，这就是闭包！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。</p></blockquote><h2 id="现在我懂了"><a href="#现在我懂了" class="headerlink" title="现在我懂了"></a>现在我懂了</h2><p>来看这段代码。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wait</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">  setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( message );</span><br><span class="line">  &#125;, <span class="number">1000</span> );</span><br><span class="line">&#125;</span><br><span class="line">wait( <span class="string">"Hello, closure!"</span> );</span><br></pre></td></tr></table></figure></p><p>将一个内部函数（名为 <code>timer</code>）传递给 <code>setTimeout(..)</code>。<code>timer</code> 具有涵盖 <code>wait(..)</code> 作用域的闭包，因此还保有对变量 <code>message</code> 的引用。</p><p><code>wait(..)</code> 执行 1000 毫秒后，它的内部作用域并不会消失，<code>timer</code> 函数依然保有 <code>wait(..)</code>作用域的闭包。</p><p>深入到引擎的内部原理中，内置的工具函数 <code>setTimeout(..)</code> 持有对一个参数的引用，这个参数也许叫作 <code>fn</code> 或者 <code>func</code>，或者其他类似的名字。引擎会调用这个函数，在例子中就是内部的 <code>timer</code> 函数，而词法作用域在这个过程中保持完整。</p><p><strong>这就是闭包。</strong></p><p>本质上无论何时何地，如果将函数（访问它们各自的词法作用域）当作第一级的值类型并到处传递，你就会看到闭包在这些函数中的应用。在定时器、事件监听器、Ajax 请求、跨窗口通信、Web Workers 或者任何其他的异步（或者同步）任务中，只要使用了回调函数，实际上就是在使用闭包！</p><p>IIFE模式，因为函数（示例代码中的 IIFE）并不是在它本身的词法作用域以外执行的。它在定义时所在的作用域中执行。这是是创建了一个闭包但是并不能调用。</p><h2 id="循环和闭包"><a href="#循环和闭包" class="headerlink" title="循环和闭包"></a>循环和闭包</h2><p>要说明闭包，for循环是最常见的例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( i );</span><br><span class="line">  &#125;, i*<span class="number">1000</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们预期的效果是:分别输出数字 1~5，每秒一次，每次一个。</p><p>得到的结果是，每秒一次的频率输出五次 6。</p><p>首先我们看一下6是怎么来的。这个例子中的终止条件是<code>i&lt;=5</code>。所以首次成立时的i的值是6，因此，输出显示的是循环结束时 i 的最终值。</p><p>仔细想一下，这好像又是显而易见的，延迟函数的回调会在循环结束时才执行。事实上，当定时器运行时即使每个迭代中执行的是 <code>setTimeout(.., 0)</code>，所有的回调函数依然是在循环结束后才会被执行，因此会每次输出一个 6 出来。</p><p>缺陷是我们试图假设循环中的每个迭代在运行时都会给自己“捕获”一个 i 的<strong>副本</strong>。但是根据作用域的工作原理，实际情况是尽管循环中的五个函数是在各个迭代中分别定义的，但是它们都被封闭在一个<strong>共享的全局作用域中</strong>，因此实际上只有一个 i。</p><p>我们需要更多的闭包作用域，特别是在循环的过程中每个迭代都需要一个闭包作用域。</p><p>首先试下IIFE<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log( i );</span><br><span class="line">    &#125;, i*<span class="number">1000</span> );</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125; <span class="comment">// 这样的写法不行，为什么呢？因为每个IIFE中i的值并没有定义，也就是说这个作用于是空的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//　改进</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</span><br><span class="line">    setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log( j );</span><br><span class="line">    &#125;, j*<span class="number">1000</span> );</span><br><span class="line">  &#125;)( i );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>重返块作用域</strong></p><p>我们使用 IIFE 在每次迭代时都创建一个新的作用域。换句话说，每次迭代我们都需要一个块作用域。第 3 章介绍了 let 声明，可以用来劫持块作用域，并且在这个块作用域中声明一个变量。</p><p>本质上这是将一个块转换成一个可以被关闭的作用域。因此，下面这些看起来很酷的代码就可以正常运行了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> j = i; <span class="comment">// 是的，闭包的块作用域！</span></span><br><span class="line">  setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( j );</span><br><span class="line">  &#125;, j*<span class="number">1000</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for 循环头部的 let 声明还会有一个特殊的行为。这个行为指出变量在循环过程中不止被声明一次，每次迭代都会声明。随后的每个迭代都会使用上一个迭代结束时的值来初始化这个变量。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( i );</span><br><span class="line">  &#125;, i*<span class="number">1000</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>还有其他的代码模式利用闭包的强大威力，但从表面上看，它们似乎与回调无关。下面一起来研究其中最强大的一个：<strong>模块</strong>。</p><p>模块模式需要具备两个必要条件。</p><ol><li>必须有外部的封闭函数，该函数必须至少被调用一次（每次调用都会创建一个新的模块实例）。</li><li>封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态。</li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>闭包就好像从 JavaScript 中分离出来的一个充满神秘色彩的未开化世界，只有最勇敢的人才能够到达那里。但实际上它只是一个标准，显然就是关于如何在函数作为值按需传递的词法环境中书写代码的。</p><p>当函数可以记住并访问所在的词法作用域，即使函数是在当前词法作用域之外执行，这时就产生了闭包。</p><p>如果没能认出闭包，也不了解它的工作原理，在使用它的过程中就很容易犯错，比如在循环中。但同时闭包也是一个非常强大的工具，可以用多种形式来实现模块等模式。</p><p>模块有两个主要特征：（1）为创建内部作用域而调用了一个包装函数；（2）包装函数的返回值必须至少包括一个对内部函数的引用，这样就会创建涵盖整个包装函数内部作用域的闭包。</p><p>现在我们会发现代码中到处都有闭包存在，并且我们能够识别闭包然后用它来做一些有用的事！</p><h1 id="附录-A-动态作用域"><a href="#附录-A-动态作用域" class="headerlink" title="附录 A 动态作用域"></a>附录 A 动态作用域</h1><p>JS中作用域就是词法作用域，（事实上大部分语言都是基于词法作用域的）。</p><p>而JS中，this的机制，类似于动态作用域。</p><p>词法作用域是一套关于引擎如何寻找变量以及会在何处找到变量的规则。词法作用域最重要的特征是它的定义过程发生在代码的<strong>书写阶段</strong>（假设你没有使用eval() 或 with）。而动态作用域，是一个运行时被被动确定状态的形式。</p><p>例子:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( a ); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">  foo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">bar();</span><br></pre></td></tr></table></figure></p><p>词法作用域让 <code>foo()</code> 中的 <code>a</code> 通过 <strong>RHS</strong> 引用到了全局作用域中的 <code>a</code>，因此会输出 2。</p><p>而动态作用域并不关心函数和作用域是如何声明以及在何处声明的，只关心它们从何处调用。换句话说，作用域链是基于调用栈的，而不是代码中的作用域嵌套。</p><p>因此，如果 JavaScript 具有动态作用域，理论上，上面代码中的 <code>foo()</code> 在执行时将会输出 3。</p><p>为什么会这样？因为当 <code>foo()</code> 无法找到 <code>a</code> 的变量引用时，会顺着调用栈在调用 <code>foo()</code> 的地方查找 <code>a</code>，而不是在嵌套的词法作用域链中向上查找。由于 <code>foo()</code> 是在 <code>bar()</code> 中调用的，引擎会检查 <code>bar()</code> 的作用域，并在其中找到值为 3 的变量 <code>a</code>。</p><h1 id="附录-B-块作用域的替代方案"><a href="#附录-B-块作用域的替代方案" class="headerlink" title="附录 B 块作用域的替代方案"></a>附录 B 块作用域的替代方案</h1><p>第 3 章深入研究了块作用域。至少从 ES3 发布以来，JavaScript 中就有了块作用域，而with 和 catch 分句就是块作用域的两个小例子。</p><p>但随着 ES6 中引入了 let，我们的代码终于有了创建完整、不受约束的块作用域的能力。块作用域在功能上和代码风格上都拥有很多激动人心的新特性。</p><p>但如果我们想在 ES6 之前的环境中使用块作用域呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log( a ); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( a ); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure><p>这段代码在 ES6 环境中可以正常工作。但是在 ES6 之前的环境中如何才能实现这个效果？答案是使用 catch。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;<span class="keyword">throw</span> <span class="number">2</span>;&#125;<span class="keyword">catch</span>(a)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( a ); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( a ); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure></p><p>了解原理剩下就交给ES6转换器吧。</p><h1 id="附录-C-this-词法"><a href="#附录-C-this-词法" class="headerlink" title="附录 C this 词法"></a>附录 C this 词法</h1><p>ES6 中有一个主题用非常重要的方式将 this同词法作用域联系起来了，我们会简单地讨论一下。</p><p>ES6 添加了一个特殊的语法形式用于函数声明，叫作箭头函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log( a );</span><br><span class="line">&#125;;</span><br><span class="line">foo( <span class="number">2</span> ); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><p>这里称作“胖箭头”的写法通常被当作单调乏味且冗长（挖苦）的 function 关键字的简写。</p><p>看这段代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  id: <span class="string">"awesome"</span>,</span><br><span class="line">  cool: <span class="function"><span class="keyword">function</span> <span class="title">coolFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.id );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> id = <span class="string">"not awesome"</span></span><br><span class="line">obj.cool(); <span class="comment">// 酷</span></span><br><span class="line">setTimeout( obj.cool, <span class="number">100</span> ); <span class="comment">// 不酷</span></span><br></pre></td></tr></table></figure></p><p>问题在于 cool() 函数丢失了同 this 之间的绑定。解决这个问题有好几种办法，但最长用的就是 var self = this;。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">  cool: <span class="function"><span class="keyword">function</span> <span class="title">coolFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (self.count &lt; <span class="number">1</span>) &#123;</span><br><span class="line">      setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        self.count++;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">"awesome?"</span> );</span><br><span class="line">      &#125;, <span class="number">100</span> );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.cool(); <span class="comment">// 酷吧？</span></span><br></pre></td></tr></table></figure><p><code>var self = this</code> 这种解决方案圆满解决了理解和正确使用 <code>this</code> 绑定的问题，并且没有把问题过于复杂化，它使用的是我们非常熟悉的工具：词法作用域。</p><p>ES6 中的箭头函数引入了一个叫作 this 词法的行为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">  cool: <span class="function"><span class="keyword">function</span> <span class="title">coolFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.count &lt; <span class="number">1</span>) &#123;</span><br><span class="line">      setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 箭头函数是什么鬼东西？</span></span><br><span class="line">        <span class="keyword">this</span>.count++;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">"awesome?"</span> );</span><br><span class="line">      &#125;, <span class="number">100</span> );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.cool(); <span class="comment">// 很酷吧 ?</span></span><br></pre></td></tr></table></figure></p><p>简单来说，箭头函数在涉及 <code>this</code> 绑定时的行为和普通函数的行为完全不一致。它放弃了所有普通 <code>this</code> 绑定的规则，取而代之的是用当前的词法作用域覆盖了 <code>this</code> 本来的值。</p><p>因此，这个代码片段中的箭头函数并非是以某种不可预测的方式同所属的 <code>this</code> 进行了解绑定，而只是“继承”了 <code>cool()</code> 函数的 <code>this</code> 绑定（因此调用它并不会出错）。</p><p>箭头函数将程序员们经常犯的一个错误给标准化了，也就是混淆了 <code>this</code> 绑定规则和词法作用域规则。</p><p>换句话说：为什么要自找麻烦使用 <code>this</code> 风格的代码模式呢？把它和词法作用域结合在一起非常让人头疼。在代码中使用两种风格其中的一种是非常自然的事情，但是不要将两种风格混在一起使用。</p><blockquote><p>另一个导致箭头函数不够理想的原因是它们是匿名而非具名的。具名函数比<br>匿名函数更可取的原因参见第 3 章。</p></blockquote><p>在我看来，解决这个“问题”的另一个更合适的办法是正确使用和包含 this 机制。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">  cool: <span class="function"><span class="keyword">function</span> <span class="title">coolFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.count &lt; <span class="number">1</span>) &#123;</span><br><span class="line">      setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count++; <span class="comment">// this 是安全的</span></span><br><span class="line">        <span class="comment">// 因为 bind(..)</span></span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">"more awesome"</span> );</span><br><span class="line">      &#125;.bind( <span class="keyword">this</span> ), <span class="number">100</span> ); <span class="comment">// look, bind()!</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.cool(); <span class="comment">// 更酷了。</span></span><br></pre></td></tr></table></figure></p><p>无论你是喜欢箭头函数中 this 词法的新行为模式，还是喜欢更靠得住的 bind()，都需要注意箭头函数不仅仅意味着可以少写代码。</p><p>它们之间有意为之的不同行为需要我们理解和掌握，才能正确地使用它们。</p><p>现在我们已经完全理解了词法作用域（还有闭包），理解 this 词法是小菜一碟！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于你不知道的JS总结-作用域和闭包的第二部分。&lt;br&gt;
    
    </summary>
    
      <category term="JS基础" scheme="http://yoursite.com/categories/JS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="你不知道的JS" scheme="http://yoursite.com/tags/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JS/"/>
    
  </entry>
  
  <entry>
    <title>你不知道的JS总结-作用域和闭包(一)</title>
    <link href="http://yoursite.com/2018/02/05/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JS%E6%80%BB%E7%BB%93-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85(%E4%B8%80)/"/>
    <id>http://yoursite.com/2018/02/05/你不知道的JS总结-作用域和闭包(一)/</id>
    <published>2018-02-05T08:37:10.000Z</published>
    <updated>2019-04-08T09:29:04.460Z</updated>
    
    <content type="html"><![CDATA[<p>这几天读了下《你不知道的JavaScript（上卷）》,对于书中<strong>作用域和闭包</strong>的知识点做一下总结<br><a id="more"></a></p><h1 id="第-1-章-作用域是什么"><a href="#第-1-章-作用域是什么" class="headerlink" title="第 1 章 作用域是什么"></a>第 1 章 作用域是什么</h1><p>要了解作用域的规则，首先需要了解简单的编译原理。</p><h2 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h2><p>尽管通常将 JavaScript 归类为“动态”或“解释执行”语言，但事实上它是一门编译语言。</p><p>在传统编译语言的流程中，程序中的一段源代码在执行之前会经历三个步骤，统称为“编译”。</p><ul><li><p>分词/词法分析（Tokenizing/Lexing）</p><p>这个过程会将由字符组成的字符串分解成（对编程语言来说）有意义的代码块，这些代码块被称为词法单元（token）。<br>如：var a = 2;  =&gt;  var、a、=、2 、;</p></li><li><p>解析/语法分析（Parsing）</p><p>这个过程是将词法单元流（数组）转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树。这个树被称为“抽象语法树”（Abstract Syntax Tree，AST）。</p></li><li><p>代码生成</p><p>将 AST 转换为可执行代码的过程称被称为代码生成。</p></li></ul><h2 id="理解作用域"><a href="#理解作用域" class="headerlink" title="理解作用域"></a>理解作用域</h2><p>  需要理解三个处理过程中的参与者：</p><ul><li><p>引擎</p><p>从头到尾负责整个 JavaScript 程序的编译及执行过程。</p></li><li><p>编译器</p><p>引擎的好朋友之一，负责语法分析及代码生成等脏活累活（详见前一节的内容）。</p></li><li><p>作用域</p><p>引擎的另一位好朋友，负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。</p></li></ul><p>例子: <code>var a = 2;</code></p><p>变量的赋值操作会执行两个动作，首先编译器会在当前作用域中声明一个变量（如果之前没有声明过），然后在运行时引擎会在作用域中查找该变量，如果能够找到就会对它赋值。</p><p>在赋值中，对于引擎来讲，引擎会为变量 a 进行 <strong>LHS</strong> 查询。另外一个查找的类型叫作 <strong>RHS</strong>。</p><p><strong>RHS</strong> 查询与简单地查找某个变量的值别无二致，而 <strong>LHS</strong> 查询则是试图找到变量的容器本身，从而可以对其赋值。<strong>RHS</strong> 并不是真正意义上的“赋值操作的右侧”，更准确地说是“非左侧”。</p><p>你可以将 <strong>RHS</strong> 理解成 retrieve his source value（取到它的源值）。</p><h2 id="作用域嵌套"><a href="#作用域嵌套" class="headerlink" title="作用域嵌套"></a>作用域嵌套</h2><p>当一个块或函数嵌套在另一个块或函数中时，就发生了作用域的嵌套。因此，在当前作用域中无法找到某个变量时引擎就会在外层嵌套的作用域中继续查找，直到找到该变量，或抵达最外层的作用域（也就是全局作用域）为止。</p><p><img src="https://images-1253206717.cos.ap-guangzhou.myqcloud.com/UDntKnowJS/作用域.png" alt></p><p>不管是<strong>LHS</strong> 和 <strong>RHS</strong>都需要对作用域按照上图进行查找。一旦抵达全局作用域，无论你有没有找到所需变量，查找过程都会终止。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p><strong>LHS</strong>和<strong>RHS</strong>,在最终没有找到变量的时候处理方式会有差异:</p><ul><li><strong>RHS</strong> 抛出异常<code>ReferenceError</code></li><li><strong>LHS</strong> 在严格模式，抛出异常<code>ReferenceError</code>,正常模式，会创建一个具有该名称的变量，并将其返还给引擎。</li></ul><p><strong>RHS</strong>　中，如果找到一个变量对这个变量进行不合理的操作。会抛出<code>TypeError</code></p><p><code>ReferenceError</code> 同作用域判别失败相关，而 <code>TypeError</code> 则代表作用域判别成功了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>作用域是一套规则，用于确定在何处以及如何查找变量（标识符）。如果查找的目的是对变量进行赋值，那么就会使用 <strong>LHS</strong> 查询；如果目的是获取变量的值，就会使用 <strong>RHS</strong> 查询。赋值操作符会导致 <strong>LHS</strong> 查询。＝操作符或调用函数时传入参数的操作都会导致关联作用域的赋值操作。</p><p>JavaScript 引擎首先会在代码执行前对其进行编译，在这个过程中，像 <code>var a = 2</code> 这样的声明会被分解成两个独立的步骤：</p><ol><li>首先，var a 在其作用域中声明新变量。这会在最开始的阶段，也就是代码执行前进行。</li><li>接下来，a = 2 会查询（LHS 查询）变量 a 并对其进行赋值。</li></ol><p><strong>LHS</strong> 和 <strong>RHS</strong> 查询都会在当前执行作用域中开始，如果有需要（也就是说它们没有找到所需的标识符），就会向上级作用域继续查找目标标识符，这样每次上升一级作用域（一层楼），最后抵达全局作用域（顶层），无论找到或没找到都将停止。不成功的 <strong>RHS</strong> 引用会导致抛出 <code>ReferenceError</code> 异常。不成功的 <strong>LHS</strong> 引用会导致自动隐式地创建一个全局变量（非严格模式下），该变量使用 LHS 引用的目标作为标识符，或者抛出 <code>ReferenceError</code> 异常（严格模式下）。</p><h1 id="第-2-章-词法作用域"><a href="#第-2-章-词法作用域" class="headerlink" title="第 2 章 词法作用域"></a>第 2 章 词法作用域</h1><p>作用域共有两种主要的工作模型。第一种是最为普遍的，被大多数编程语言所采用的 <strong>词法作用域</strong> ，我们会对这种作用域进行深入讨论。另外一种叫作 <strong>动态作用域</strong>，仍有一些编程语言在使用（比如 Bash 脚本、Perl 中的一些模式等）。</p><h2 id="词法阶段"><a href="#词法阶段" class="headerlink" title="词法阶段"></a>词法阶段</h2><p>第 1 章介绍过，大部分标准语言编译器的第一个工作阶段叫作词法化（也叫单词化）。回忆一下，词法化的过程会对源代码中的字符进行检查，如果是有状态的解析过程，还会赋予单词语义。</p><p>简单地说，词法作用域就是定义在词法阶段的作用域。换句话说，词法作用域是由你在写代码时将变量和块作用域写在哪里来决定的，因此当词法分析器处理代码时会保持作用域不变（大部分情况下是这样的）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = a * <span class="number">2</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( a, b, c );</span><br><span class="line">  &#125;</span><br><span class="line">  bar( b * <span class="number">3</span> );</span><br><span class="line">&#125;</span><br><span class="line">foo( <span class="number">2</span> ); <span class="comment">// 2, 4, 12</span></span><br></pre></td></tr></table></figure><p>这个例子中有三个逐级嵌套的作用域。为了帮助理解，可以将它们想象成几个逐级包含<br>的气泡。<br><img src="https://images-1253206717.cos.ap-guangzhou.myqcloud.com/UDntKnowJS/wordScope.png" alt></p><ol><li>包含着整个全局作用域，其中只有一个标识符：foo。</li><li>包含着 foo 所创建的作用域，其中有三个标识符：a、bar 和 b。</li><li>包含着 bar 所创建的作用域，其中只有一个标识符：c</li></ol><p>没有任何函数的气泡可以（部分地）同时出现在两个外部作用域的气泡中，就如同没有任何函数可以部分地同时出现在两个父级函数中一样。</p><p>作用域查找会在找到第一个匹配的标识符时停止。在多层的嵌套作用域中可以定义同名的标识符，这叫作“ <strong>遮蔽效应</strong> ”（内部的标识符“遮蔽”了外部的标识符）。抛开遮蔽效应，作用域查找始终从运行时所处的最内部作用域开始，逐级向外或者说向上进行，直到遇见第一个匹配的标识符为止。</p><p>无论函数在<em>哪里</em>被调用，也无论它<em>如何</em>被调用，它的词法作用域都<em>只由</em>函数被声明时所处的位置决定。</p><h2 id="欺骗词法"><a href="#欺骗词法" class="headerlink" title="欺骗词法"></a>欺骗词法</h2><p>如果词法作用域完全由写代码期间函数所声明的位置来定义，怎样才能在运行时来“修改”（也可以说欺骗）词法作用域呢？</p><p>JavaScript 中有两种机制来实现这个目的</p><ol><li><p>eval </p><p>JavaScript 中的 eval(..) 函数可以接受一个字符串为参数，并将其中的内容视为好像在书写时就存在于程序中这个位置的代码。</p></li><li>with<br>JavaScript 中另一个难以掌握（并且现在也不推荐使用）的用来欺骗词法作用域的功能是with 关键字。</li></ol><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>这是我们抛弃上述两个方法的主要原因，</p><p>JavaScript 引擎会在编译阶段进行数项的性能优化。其中有些优化依赖于能够根据代码的词法进行静态分析，并预先确定所有变量和函数的定义位置，才能在执行过程中快速找到标识符。</p><p>但如果引擎在代码中发现了 eval(..) 或 with，它只能简单地假设关于标识符位置的判断都是无效的，因为无法在词法分析阶段明确知道 eval(..) 会接收到什么代码，这些代码会如何对作用域进行修改，也无法知道传递给 with 用来创建新词法作用域的对象的内容到底是什么。</p><p>如果代码中大量使用 eval(..) 或 with，那么运行起来一定会变得非常慢。无论引擎多聪明，试图将这些悲观情况的副作用限制在最小范围内，也无法避免如果没有这些优化，代码会运行得更慢这个事实。</p><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>词法作用域意味着作用域是由书写代码时函数声明的位置来决定的。编译的词法分析阶段基本能够知道全部标识符在哪里以及是如何声明的，从而能够预测在执行过程中如何对它们进行查找。</p><p>JavaScript 中有两个机制可以“欺骗”词法作用域：eval(..) 和 with。前者可以对一段包含一个或多个声明的“代码”字符串进行演算，并借此来修改已经存在的词法作用域（在运行时）。后者本质上是通过将一个对象的引用当作作用域来处理，将对象的属性当作作用域中的标识符来处理，从而创建了一个新的词法作用域（同样是在运行时）。</p><p>这两个机制的副作用是引擎无法在编译时对作用域查找进行优化，因为引擎只能谨慎地认为这样的优化是无效的。使用这其中任何一个机制都将导致代码运行变慢。不要使用它们。</p><h1 id="第-3-章-函数作用域和块作用域"><a href="#第-3-章-函数作用域和块作用域" class="headerlink" title="第 3 章 函数作用域和块作用域"></a>第 3 章 函数作用域和块作用域</h1><h2 id="函数中的作用域"><a href="#函数中的作用域" class="headerlink" title="函数中的作用域"></a>函数中的作用域</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">  <span class="comment">// 一些代码</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 更多的代码</span></span><br><span class="line">  <span class="keyword">var</span> c = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论标识符声明出现在作用域中的何处，这个标识符所代表的变量或函数都将附属于所处作用域的气泡。 在下一章<strong>提升</strong>中会着重介绍。</p><p>函数作用域的含义是指，属于这个函数的全部变量都可以在整个函数的范围内使用及复用（事实上在嵌套的作用域中也可以使用）。这种设计方案是非常有用的，能充分利用JavaScript 变量可以根据需要改变值类型的“动态”特性。</p><h2 id="隐藏内部实现"><a href="#隐藏内部实现" class="headerlink" title="隐藏内部实现"></a>隐藏内部实现</h2><p>对函数的传统认知就是先声明一个函数，然后再向里面添加代码。但反过来想也可以带来一些启示：从所写的代码中挑选出一个任意的片段，然后用函数声明对它进行包装，实际上就是把这些代码“隐藏”起来了。</p><p>有很多原因促成了这种基于作用域的隐藏方法。它们大都是从最小特权原则中引申出来的，也叫最小授权或最小暴露原则。这个原则是指在软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的 API 设计。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  b = a + doSomethingElse( a * <span class="number">2</span> );</span><br><span class="line">  <span class="built_in">console</span>.log( b * <span class="number">3</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomethingElse</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line">doSomething( <span class="number">2</span> ); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><p>上述的例子中，就是一个反例，将应该私有的变量b和函数doSomethingElse(..)暴露给了外部作用域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doSomethingElse</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> b;</span><br><span class="line">  b = a + doSomethingElse( a * <span class="number">2</span> );</span><br><span class="line">  <span class="built_in">console</span>.log( b * <span class="number">3</span> );</span><br><span class="line">&#125;</span><br><span class="line">doSomething( <span class="number">2</span> ); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><p>修改后的代码，b和 <code>doSomethingElse(..)</code>都无法从外部被访问。</p><p><strong>规避冲突</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    i = <span class="number">3</span>; <span class="comment">// 修改 for 循环所属作用域中的 i</span></span><br><span class="line">    <span class="built_in">console</span>.log( a + i );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">    bar( i * <span class="number">2</span> ); <span class="comment">// 糟糕，无限循环了！</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure></p><p>bar(..) 内部的赋值表达式 i = 3 意外地覆盖了声明在 foo(..) 内部 for 循环中的 i。在这个例子中将会导致无限循环，因为 i 被固定设置为 3，永远满足小于 10 这个条件。</p><p>这里我们能选用两种方法，一种新声明一个本地变量，<code>var i = 3;</code>。另一种，新添加一个标识符名称，比如 <code>var j = 3</code>。</p><p>软件设计在某种情况下可能自然而然地要求使用同样的标识符名称，所以通过作用域来“隐藏”内部声明是唯一的最佳选择。</p><ol><li>全局命名空间<br>变量冲突的一个典型例子存在于全局作用域中。当程序中加载了多个第三方库时，如果它们没有妥善地将内部私有的函数或变量隐藏起来，就会很容易引发冲突。</li></ol><p>这些库通常会在全局作用域中声明一个名字足够独特的变量，通常是一个对象。这个对象被用作库的命名空间，所有需要暴露给外界的功能都会成为这个对象（命名空间）的属性，而不是将自己的标识符暴漏在顶级的词法作用域中。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyReallyCoolLibrary = &#123;</span><br><span class="line">  awesome: <span class="string">"stuff"</span>,</span><br><span class="line">  doSomething: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  doAnotherThing: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><ol start="2"><li>模块管理<br>这种避免冲突的方法和现代的木块机制很接近，从众多的模块管理器挑选一个使用。使用这些工具，任何库都无需将标识符加入到全局作用域中，而是通过依赖管理器的机制将库的标识符显式地导入到另外一个特定的作用域中。</li></ol><p>显而易见，这些工具并没有能够违反词法作用域规则的“神奇”功能。它们只是利用作用域的规则强制所有标识符都不能注入到共享作用域中，而是保持在私有、无冲突的作用域中，这样可以有效规避掉所有的意外冲突。</p><h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><p>在前面我们知道了，在任意代码片段外部添加包装函数，可以讲变量和函数定义“隐藏”起来，外部作用域无法访问包装函数内部的任何内容。</p><p>这个方法也有不理想之处。我们必须声明一个具名函数，这也就意味着，这个具名函数的名称已经“污染”了所在作用域。其次，必须显示的调用这个具名函数，才能运行其中的代码。</p><p>如果函数不需要函数名（或者至少函数名可以不污染所在作用域），并且能够自动运行，这将会更加理想。</p><p>JS中的同时解决两种问题的方案：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123; <span class="comment">// &lt;-- 添加这一行</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">console</span>.log( a ); <span class="comment">// 3</span></span><br><span class="line">&#125;)(); <span class="comment">// &lt;-- 以及这一行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( a ); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><p>包装函数的声明以 (function… 而不仅是以 function… 开始。尽管看上去这并不是一个很显眼的细节，但实际上却是非常重要的区别。函数会被当作函数表达式而不是一个标准的函数声明来处理。其实就是立即执行了。</p><blockquote><p>区分函数声明和表达式最简单的方法是看 function 关键字出现在声明中的位<br>置（不仅仅是一行代码，而是整个声明中的位置）。如果 function 是声明中<br>的第一个词，那么就是一个函数声明，否则就是一个函数表达式。</p></blockquote><p><strong>函数声明</strong> 和 <strong>函数表达式</strong> 之间最重要的区别是它们的名称标识符将会绑定在何处。</p><p>(function foo(){ .. }) 作为函数表达式意味着 foo 只能在 .. 所代表的位置中被访问，外部作用域则不行。foo 变量名被隐藏在自身中意味着不会非必要地污染外部作用域。</p><h3 id="匿名和具名"><a href="#匿名和具名" class="headerlink" title="匿名和具名"></a>匿名和具名</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"I waited 1 second!"</span>);</span><br><span class="line">&#125;, <span class="number">1000</span> );</span><br></pre></td></tr></table></figure><p>上述的定时的代码片段，我们很熟悉，这就是 <strong>匿名函数表达式</strong> , 因为<code>function()</code>.. 没有名称标识符。</p><p>匿名函数书写起来简单便捷，不过有几个缺点需要考虑。</p><ol><li>匿名函数在栈追踪中不会显示出有意义的函数名，使得调试很困难。</li><li>如果没有函数名，当函数需要引用自身时只能使用已经过期的 arguments.callee 引用，比如在递归中。另一个函数需要引用自身的例子，是在事件触发后事件监听器需要解绑自身。</li><li>匿名函数省略了对于代码可读性 / 可理解性很重要的函数名。一个描述性的名称可以让代码不言自明。</li></ol><h3 id="立即执行函数表达式"><a href="#立即执行函数表达式" class="headerlink" title="立即执行函数表达式"></a>立即执行函数表达式</h3><p><strong>IIFE</strong>, 代表立即执行函数表达式（Immediately Invoked Function Expression）；</p><p>函数名对于<strong>IIFE</strong>不是必需的，IIFE 最常见的用法是使用一个匿名函数表达式。</p><ul><li><strong>IIFE</strong> 的一个非常普遍的进阶用法是把它们当作函数调用并传递参数进去。</li><li><strong>IIFE</strong> 另一个场景，解决undefined 标识符的默认值被错误覆盖导致的异常（虽然不常见）。</li><li><strong>IIFE</strong> 是倒置代码的运行顺序，将需要运行的函数放在第二位，在 IIFE执行之后当作参数传递进去。</li></ul><h2 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log( i );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在 for 循环的头部直接定义了变量 i，通常是因为只想在 for 循环内部的上下文中使用 i，而忽略了 i 会被绑定在外部作用域（函数或全局）中的事实。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">var</span> bar = foo * <span class="number">2</span>;</span><br><span class="line">  bar = something( bar );</span><br><span class="line">  <span class="built_in">console</span>.log( bar );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 var 声明变量时，它写在哪里都是一样的，因为它们最终都会属于外部作用域。这段代码是为了风格更易读而伪装出的形式上的块作用域，如果使用这种形式，要确保没在作用域其他地方意外地使用 bar 只能依靠自觉性。</p><p>块作用域是一个用来对之前的最小授权原则进行扩展的工具，将代码从在函数中隐藏信息扩展为在块中隐藏信息。实现方法：</p><ol><li>with</li><li>try/catch catch分句会创建一个块作用域，其中声明的变量仅在 catch 内部有效。</li><li>let</li></ol><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>这里我们着重介绍下，let的实现原理。</p><p>let关键字可以将变量绑定到所在的任意作用域中，通常是{ .. } 内部.换句话说，let为其声明的变量隐式地了所在的块作用域。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">let</span> bar = foo * <span class="number">2</span>;</span><br><span class="line">  bar = something( bar );</span><br><span class="line">  <span class="built_in">console</span>.log( bar );</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( bar ); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure></p><p>用 let 将变量附加在一个已经存在的块作用域上的行为是隐式的。</p><p>在开发和修改代码的过程中，如果没有密切关注哪些块作用域中有绑定的变量，并且习惯性地移动这些块或者将其包含在其他的块中，就会导致代码变得混乱。</p><p>显示的块作用域，可以解决上述问题。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  &#123; <span class="comment">// &lt;-- 显式的快</span></span><br><span class="line">    <span class="keyword">let</span> bar = foo * <span class="number">2</span>;</span><br><span class="line">    bar = something( bar );</span><br><span class="line">    <span class="built_in">console</span>.log( bar );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( bar ); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure></p><p>例子中，我们在 if 声明内部显式地创建了一个块，如果需要对其进行重构，整个块都可以被方便地移动而不会对外部 if 声明的位置和语义产生任何影响</p><ol><li>垃圾收集</li></ol><p>另一个块作用域非常有用的原因和闭包及回收内存垃圾的回收机制相关。通过块作用域，能够让引擎知道我们执行后的代码片段不需要继续保存。</p><ol start="2"><li>let循环</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log( i );</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( i ); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure><p>for 循环头部的 let 不仅将 i 绑定到了 for 循环的块中，事实上它将其重新绑定到了循环的每一个迭代中，确保使用上一个循环迭代结束时的值重新进行赋值。</p><p>下面通过另一种方式来说明每次迭代时进行重新绑定的行为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> j;</span><br><span class="line">  <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;<span class="number">10</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = j; <span class="comment">// 每个迭代重新绑定！</span></span><br><span class="line">    <span class="built_in">console</span>.log( i );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>const</strong></p><p>同样可以用来创建块作用域变量，但其值是固定的（常量）。</p><h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><p>函数是 JavaScript 中最常见的作用域单元。本质上，声明在一个函数内部的变量或函数会在所处的作用域中“隐藏”起来，这是有意为之的良好软件的设计原则。</p><p>但函数不是唯一的作用域单元。块作用域指的是变量和函数不仅可以属于所处的作用域，也可以属于某个代码块（通常指 { .. } 内部）。</p><p>从 ES3 开始，try/catch 结构在 catch 分句中具有块作用域。</p><p>在 ES6 中引入了 let 关键字（var 关键字的表亲），用来在任意代码块中声明变量。if(..) { let a = 2; } 会声明一个劫持了 if 的 { .. } 块的变量，并且将变量添加到这个块中。</p><p>有些人认为块作用域不应该完全作为函数作用域的替代方案。两种功能应该同时存在，开发者可以并且也应该根据需要选择使用何种作用域，创造可读、可维护的优良代码。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天读了下《你不知道的JavaScript（上卷）》,对于书中&lt;strong&gt;作用域和闭包&lt;/strong&gt;的知识点做一下总结&lt;br&gt;
    
    </summary>
    
      <category term="JS基础" scheme="http://yoursite.com/categories/JS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="你不知道的JS" scheme="http://yoursite.com/tags/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JS/"/>
    
  </entry>
  
  <entry>
    <title>ES6之Promise（一）</title>
    <link href="http://yoursite.com/2018/01/18/ES6%E4%B9%8BPromise%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2018/01/18/ES6之Promise（一）/</id>
    <published>2018-01-18T02:50:44.000Z</published>
    <updated>2019-04-22T09:22:27.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Promise含义"><a href="#Promise含义" class="headerlink" title="Promise含义"></a>Promise含义</h1><p>javaScript异步最常用的方式就是通过成功的回调函数进行对返回过来的参数进行逻辑处理。一般的回调函数我们都会使用嵌套回调或者链式回调。这样的写法会影响后续的开发。</p><h2 id="会产生以下的问题："><a href="#会产生以下的问题：" class="headerlink" title="会产生以下的问题："></a>会产生以下的问题：</h2><p>1.当采用嵌套回调的时候，会导致层级他多，不利于维护；</p><p>2.所以我们又采用了链式回调，对嵌套回调进行拆分，拆分后的函数间的耦合度很高，容易产生BUG；</p><p>3.如果需要传递参数，函数之间的关联性会更高，参数需要校验，或者多参的时候，要进行多次判断提高代码的合理性；</p><p>4.如果回调函数的参数要提交给第三方库或者插件（支付，地图，第三方API，接口），就要考虑一些不可控因素；</p><ul><li>调用的时间太早</li><li>调用的时间太晚</li><li>多次调用，或者调用少</li></ul><p>在这个背景下，ES6诞生之时社区最早提出了更合理更强大的解决办法，ES6将其纳入写进了语言标准，统一了用法，原生提供了Promise对象。</p><h1 id="什么是Promise"><a href="#什么是Promise" class="headerlink" title="什么是Promise"></a>什么是Promise</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">设想一下这个场景，我去一家螺丝粉店，交给收银员老板娘10元，下单买一个螺蛳粉，下单付款。到这里，我已经发出了一个请求（购买了一份螺丝粉），启动了一次交易。</span><br><span class="line"></span><br><span class="line">但是厨房（系统）需要制作的时间（响应的时间），我不能马上得到螺蛳粉吃，收银员老板娘会给一张小票替代螺丝粉，这张小票就是一个承诺（Promise），保证我最后能得到这份螺蛳粉。</span><br><span class="line"></span><br><span class="line">所以我需要好好的保留的这张小票，对我来说，小票就是螺蛳粉，虽然这张小票不能吃，我需要等待螺蛳粉做好，等待收银员老板娘叫号通知我。</span><br><span class="line"></span><br><span class="line">在等待的过程中，我可以做别的事情，如：刷微博，撩老板娘……（loading等操作），pending（进行中）；</span><br><span class="line"></span><br><span class="line">收银员老板娘终于叫到我的号了，我就用这张小票去换螺丝粉；</span><br><span class="line"></span><br><span class="line">当然还有一种情况，当我去柜台取螺蛳粉的时候，收银员告诉我螺蛳粉卖光了，做螺蛳粉的师傅受伤了等等原因，导致了我无法得到这个螺蛳粉；</span><br><span class="line"></span><br><span class="line">虽然我有小票（承诺）Promise，但是可能得到螺蛳粉 fulfilled（已成功），可能得不到螺蛳粉 rejected（已失败）；</span><br><span class="line">我由等待螺蛳粉变成了等到或者等不到，这个过程不可逆。</span><br></pre></td></tr></table></figure><p>上面很形象的介绍了promise，上面的等待螺蛳粉和得到螺蛳粉，螺蛳粉卖光了，得不到螺蛳粉，分别对应promise的三种状态<br>三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）(一旦状态改变，就不会再变)。</p><h1 id="回调函数调用过早"><a href="#回调函数调用过早" class="headerlink" title="回调函数调用过早"></a>回调函数调用过早</h1><p>调用过早就是将异步函数作为同步处理了，</p><p>我们之前说过，javascript以单线程同步的方式执行主线程，遇到异步会将异步函数放入到任务队列中，</p><p>当主线程执行完毕，会循环执行任务队列中的函数，也就是事件循环，直到任务队列为空。</p><h2 id="事件循环和任务队列"><a href="#事件循环和任务队列" class="headerlink" title="事件循环和任务队列"></a>事件循环和任务队列</h2><p>事件循环就像是一个游乐场，玩过一个游戏后，你需要重新排到队尾才能再玩一次</p><p>任务队列就是，在你玩过一个游戏后，可以插队接着玩</p><p>果断举一个栗子🌰：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   resolve(<span class="string">"成功啦"</span>)</span><br><span class="line"> &#125;);</span><br><span class="line"> promise.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(res);</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"我是异步执行的"</span>);</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'我在主线程'</span>);</span><br></pre></td></tr></table></figure></p><p>输出顺序<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我在主线程</span></span><br><span class="line"><span class="comment">//成功啦</span></span><br><span class="line"><span class="comment">//我是异步执行的</span></span><br></pre></td></tr></table></figure></p><p>直接手动是promise的状态切为成功状态，console.log(“我是异步执行的”);这段代码也是异步执行的<br>提供给then()的回调永远都是异步执行的，所以promise中不会出现回调函数过早执行的情况。</p><h1 id="回调函数调用过晚或不被调用"><a href="#回调函数调用过晚或不被调用" class="headerlink" title="回调函数调用过晚或不被调用"></a>回调函数调用过晚或不被调用</h1><p>回调函数调用过晚的处理原理和调用过早很类似，</p><p>在promise的then()中存放着异步函数，所有的异步都存在于js的任务队列中，当js的主线程执行完毕后，会依次执行任务队列中的内容，不会出现执行过晚的情况</p><p>果断举一个栗子🌰：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> resolve(<span class="string">'成功啦'</span>))</span><br><span class="line">promise.then(<span class="function"><span class="params">s</span> =&gt;</span> <span class="built_in">console</span>.log(s));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'我在主线程'</span>);</span><br></pre></td></tr></table></figure></p><p>成功状态的输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//我在主线程</span><br><span class="line">//成功啦</span><br></pre></td></tr></table></figure></p><p>成功状态下回调被调用<br>继续看一下失败的回调<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(<span class="string">'失败啦'</span>))</span><br><span class="line">promise.then(<span class="literal">null</span>, s =&gt; <span class="built_in">console</span>.log(s));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'我在主线程'</span>);</span><br></pre></td></tr></table></figure></p><p>失败状态的输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//我在主线程</span><br><span class="line">//失败啦</span><br></pre></td></tr></table></figure></p><h1 id="回调函数调用次数过多或者过少"><a href="#回调函数调用次数过多或者过少" class="headerlink" title="回调函数调用次数过多或者过少"></a>回调函数调用次数过多或者过少</h1><p>调用次数过多<br>我们之前说了promise有三种状态<br>pending（进行中）、fulfilled（已成功）和rejected（已失败）状态一旦状态改变，就不会再变<br>一个栗子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  reject(<span class="string">'失败啦'</span>)</span><br><span class="line">  resolve(<span class="string">'成功啦'</span>)</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`我是异步执行的成功:<span class="subst">$&#123;res&#125;</span>`</span>);</span><br><span class="line">&#125;,err =&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`我是异步执行的失败:<span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'我在主线程'</span>);</span><br></pre></td></tr></table></figure></p><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//我在主线程</span><br><span class="line">//我是异步执行的失败:失败啦</span><br></pre></td></tr></table></figure><p>当状态变为失败时，就不会再变为成功，成功的函数也不会执行，反之亦然。</p><h1 id="Promise用法会封装请看下一篇。"><a href="#Promise用法会封装请看下一篇。" class="headerlink" title="Promise用法会封装请看下一篇。"></a>Promise用法会封装请看下一篇。</h1>]]></content>
    
    <summary type="html">
    
      Promise是ES6更新一个强大的异步对象，是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>javaScript高级</title>
    <link href="http://yoursite.com/2018/01/01/javaScript%E9%AB%98%E7%BA%A7/"/>
    <id>http://yoursite.com/2018/01/01/javaScript高级/</id>
    <published>2018-01-01T02:46:53.000Z</published>
    <updated>2019-05-27T03:01:44.979Z</updated>
    
    <content type="html"><![CDATA[<p>一些javaScript知识点总结<br><a id="more"></a></p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul><li>理解面向对象开发思想</li><li>掌握 JavaScript 面向对象开发相关模式</li><li>掌握在 JavaScript 中使用正则表达式</li></ul><h2 id="基本概念复习"><a href="#基本概念复习" class="headerlink" title="基本概念复习"></a>基本概念复习</h2><blockquote><p>由于 JavaScript 高级还是针对 JavaScript 语言本身的一个进阶学习，所以在开始之前我们先对以前所学过的 JavaScript 相关知识点做一个快速复习总结。</p></blockquote><h3 id="重新介绍-JavaScript"><a href="#重新介绍-JavaScript" class="headerlink" title="重新介绍 JavaScript"></a>重新介绍 JavaScript</h3><h4 id="JavaScript-是什么"><a href="#JavaScript-是什么" class="headerlink" title="JavaScript 是什么"></a>JavaScript 是什么</h4><ul><li>解析执行：轻量级解释型的，或是 JIT 编译型的程序设计语言</li><li>语言特点：动态，头等函数 (First-class Function)<ul><li>又称函数是 JavaScript 中的一等公民</li></ul></li><li>执行环境：在宿主环境（host environment）下运行，浏览器是最常见的 JavaScript 宿主环境<ul><li>但是在很多非浏览器环境中也使用 JavaScript ，例如 node.js</li></ul></li><li>编程范式：基于原型、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如：函数式编程）编程风格</li></ul><h4 id="JavaScript-的组成"><a href="#JavaScript-的组成" class="headerlink" title="JavaScript 的组成"></a>JavaScript 的组成</h4><table><thead><tr><th>组成部分</th><th>说明</th></tr></thead><tbody><tr><td>Ecmascript</td><td>描述了该语言的语法和基本对象</td></tr><tr><td>DOM</td><td>描述了处理网页内容的方法和接口</td></tr><tr><td>BOM</td><td>描述了与浏览器进行交互的方法和接口</td></tr></tbody></table><h4 id="JavaScript-可以做什么"><a href="#JavaScript-可以做什么" class="headerlink" title="JavaScript 可以做什么"></a>JavaScript 可以做什么</h4><blockquote><p>Any application that can be written in JavaScript, will eventually be written in JavaScript.<br>凡是能用 JavaScript 写出来的，最终都会用 JavaScript 写出来</p></blockquote><ul><li><a href="https://www.zhihu.com/question/20796866" target="_blank" rel="noopener">知乎 - JavaScript 能做什么，该做什么？</a></li><li><a href="https://github.com/phodal/articles/issues/1" target="_blank" rel="noopener">最流行的编程语言 JavaScript 能做什么？</a></li></ul><h4 id="JavaScript-发展历史"><a href="#JavaScript-发展历史" class="headerlink" title="JavaScript 发展历史"></a>JavaScript 发展历史</h4><blockquote><p><a href="http://javascript.ruanyifeng.com/introduction/history.html" target="_blank" rel="noopener">JavaScript 标准参考教程 - JavaScript 语言的历史</a></p></blockquote><ul><li>JavaScript 的诞生</li><li>JavaScript 与 Ecmascript 的关系</li><li>JavaScript 与 Java 的关系</li><li>JavaScript 的版本</li><li>JavaScript 周边大事记</li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><blockquote><p>本小节快速过即可，主要是对学过的内容做知识点梳理。</p></blockquote><ul><li>语法<ul><li>区分大小写</li><li>标识符</li><li>注释</li><li>严格模式</li><li>语句</li></ul></li><li>关键字和保留字</li><li>变量</li><li>数据类型<ul><li>typeof 操作符</li><li>Undefined</li><li>Null</li><li>Boolean</li><li>Number</li><li>String</li><li>Object</li></ul></li><li>操作符</li><li>流程控制语句</li><li>函数</li></ul><h3 id="JavaScript-中的数据类型"><a href="#JavaScript-中的数据类型" class="headerlink" title="JavaScript 中的数据类型"></a>JavaScript 中的数据类型</h3><p>JavaScript 有 5 种简单数据类型：<code>Undefined、Null、Boolean、Number、String</code> 和 1 种复杂数据类型 <code>Object</code> 。</p><h4 id="基本类型（值类型）"><a href="#基本类型（值类型）" class="headerlink" title="基本类型（值类型）"></a>基本类型（值类型）</h4><ul><li>Undefined</li><li>Null</li><li>Boolean</li><li>Number</li><li>String</li></ul><h4 id="复杂类型（引用类型）"><a href="#复杂类型（引用类型）" class="headerlink" title="复杂类型（引用类型）"></a>复杂类型（引用类型）</h4><ul><li>Object</li><li>Array</li><li>Date</li><li>RegExp</li><li>Function</li><li>基本包装类型<ul><li>Boolean</li><li>Number</li><li>String</li></ul></li><li>单体内置对象<ul><li>Global</li><li>Math</li></ul></li></ul><h4 id="类型检测"><a href="#类型检测" class="headerlink" title="类型检测"></a>类型检测</h4><ul><li><code>typeof</code></li><li><code>instanceof</code></li><li><code>Object.prototype.toString.call()</code></li></ul><h4 id="值类型和引用类型在内存中的存储方式（画图说明）"><a href="#值类型和引用类型在内存中的存储方式（画图说明）" class="headerlink" title="值类型和引用类型在内存中的存储方式（画图说明）"></a>值类型和引用类型在内存中的存储方式（画图说明）</h4><ul><li>值类型按值存储</li><li>引用类型按引用存储</li></ul><h4 id="值类型复制和引用类型复制（画图说明）"><a href="#值类型复制和引用类型复制（画图说明）" class="headerlink" title="值类型复制和引用类型复制（画图说明）"></a>值类型复制和引用类型复制（画图说明）</h4><ul><li>值类型按值复制</li><li>引用类型按引用复制</li></ul><h4 id="值类型和引用类型参数传递（画图说明）"><a href="#值类型和引用类型参数传递（画图说明）" class="headerlink" title="值类型和引用类型参数传递（画图说明）"></a>值类型和引用类型参数传递（画图说明）</h4><ul><li>值类型按值传递</li><li>引用类型按引用传递</li></ul><h4 id="值类型与引用类型的差别"><a href="#值类型与引用类型的差别" class="headerlink" title="值类型与引用类型的差别"></a>值类型与引用类型的差别</h4><ul><li>基本类型在内存中占据固定大小的空间，因此被保存在栈内存中</li><li>从一个变量向另一个变量复制基本类型的值，复制的是值的副本</li><li>引用类型的值是对象，保存在堆内存</li><li>包含引用类型值的变量实际上包含的并不是对象本身，而是一个指向该对象的指针</li><li>从一个变量向另一个变量复制引用类型的值的时候，复制是引用指针，因此两个变量最终都指向同一个对象</li></ul><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ul><li>类型检测方式</li><li>值类型和引用类型的存储方式</li><li>值类型复制和引用类型复制</li><li>方法参数中 值类型数据传递 和 引用类型数据传递</li></ul><h3 id="JavaScript-执行过程"><a href="#JavaScript-执行过程" class="headerlink" title="JavaScript 执行过程"></a>JavaScript 执行过程</h3><p>JavaScript 运行分为两个阶段：</p><ul><li>预解析<ul><li>全局预解析（所有变量和函数声明都会提前；同名的函数和变量函数的优先级高）</li><li>函数内部预解析（所有的变量、函数和形参都会参与预解析）<ul><li>函数</li><li>形参</li><li>普通变量</li></ul></li></ul></li><li>执行</li></ul><p>先预解析全局作用域，然后执行全局作用域中的代码，<br>在执行全局代码的过程中遇到函数调用就会先进行函数预解析，然后再执行函数内代码。</p><h2 id="JavaScript-面向对象编程"><a href="#JavaScript-面向对象编程" class="headerlink" title="JavaScript 面向对象编程"></a>JavaScript 面向对象编程</h2><h3 id="面向对象介绍"><a href="#面向对象介绍" class="headerlink" title="面向对象介绍"></a>面向对象介绍</h3><h4 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h4><blockquote><p>Everything is object （万物皆对象）</p></blockquote><p>对象到底是什么，我们可以从两次层次来理解。</p><p><strong>(1) 对象是单个事物的抽象。</strong></p><p>一本书、一辆汽车、一个人都可以是对象，一个数据库、一张网页、一个与远程服务器的连接也可以是对象。当实物被抽象成对象，实物之间的关系就变成了对象之间的关系，从而就可以模拟现实情况，针对对象进行编程。</p><p><strong>(2) 对象是一个容器，封装了属性（property）和方法（method）。</strong></p><p>属性是对象的状态，方法是对象的行为（完成某种任务）。比如，我们可以把动物抽象为animal对象，使用“属性”记录具体是那一种动物，使用“方法”表示动物的某种行为（奔跑、捕猎、休息等等）。</p><p>在实际开发中，对象是一个抽象的概念，可以将其简单理解为：<strong>数据集或功能集</strong>。</p><p>ECMAScript-262 把对象定义为：<strong>无序属性的集合，其属性可以包含基本值、对象或者函数</strong>。<br>严格来讲，这就相当于说对象是一组没有特定顺序的值。对象的每个属性或方法都有一个名字，而每个名字都<br>映射到一个值。</p><p class="tip"><br>  提示：每个对象都是基于一个引用类型创建的，这些类型可以是系统内置的原生类型，也可以是开发人员自定义的类型。<br></p><h4 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h4><blockquote><p>面向对象不是新的东西，它只是过程式代码的一种高度封装，目的在于提高代码的开发效率和可维护性。</p></blockquote><p>面向对象编程 —— Object Oriented Programming，简称 OOP ，是一种编程开发思想。<br>它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。</p><p>在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工，可以完成接受信息、处理数据、发出信息等任务。<br>因此，面向对象编程具有灵活、代码可复用、高度模块化等特点，容易维护和开发，比起由一系列函数或指令组成的传统的过程式编程（procedural programming），更适合多人合作的大型软件项目。</p><p>面向对象与面向过程：</p><ul><li>面向过程就是亲力亲为，事无巨细，面面俱到，步步紧跟，有条不紊</li><li>面向对象就是找一个对象，指挥得结果</li><li>面向对象将执行者转变成指挥者</li><li>面向对象不是面向过程的替代，而是面向过程的封装</li></ul><p>面向对象的特性：</p><ul><li>封装性</li><li>继承性</li><li>[多态性]</li></ul><p>扩展阅读：</p><ul><li><a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1" target="_blank" rel="noopener">维基百科 - 面向对象程序设计</a></li><li><a href="https://www.zhihu.com/question/19854505" target="_blank" rel="noopener">知乎：如何用一句话说明什么是面向对象思想？</a></li><li><a href="https://www.zhihu.com/question/31021366" target="_blank" rel="noopener">知乎：什么是面向对象编程思想？</a></li></ul><h4 id="程序中面向对象的基本体现"><a href="#程序中面向对象的基本体现" class="headerlink" title="程序中面向对象的基本体现"></a>程序中面向对象的基本体现</h4><p>在 JavaScript 中，所有数据类型都可以视为对象，当然也可以自定义对象。<br>自定义的对象数据类型就是面向对象中的类（ Class ）的概念。</p><p>我们以一个例子来说明面向过程和面向对象在程序流程上的不同之处。</p><p>假设我们要处理学生的成绩表，为了表示一个学生的成绩，面向过程的程序可以用一个对象表示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> std1 = &#123; <span class="attr">name</span>: <span class="string">'Michael'</span>, <span class="attr">score</span>: <span class="number">98</span> &#125;</span><br><span class="line"><span class="keyword">var</span> std2 = &#123; <span class="attr">name</span>: <span class="string">'Bob'</span>, <span class="attr">score</span>: <span class="number">81</span> &#125;</span><br></pre></td></tr></table></figure><p>而处理学生成绩可以通过函数实现，比如打印学生的成绩：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printScore</span> (<span class="params">student</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'姓名：'</span> + student.name + <span class="string">'  '</span> + <span class="string">'成绩：'</span> + student.score)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果采用面向对象的程序设计思想，我们首选思考的不是程序的执行流程，<br>而是 <code>Student</code> 这种数据类型应该被视为一个对象，这个对象拥有 <code>name</code> 和 <code>score</code> 这两个属性（Property）。<br>如果要打印一个学生的成绩，首先必须创建出这个学生对应的对象，然后，给对象发一个 <code>printScore</code> 消息，让对象自己把自己的数据打印出来。</p><p>抽象数据行为模板（Class）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, score</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.score = score</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.prototype.printScore = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'姓名：'</span> + <span class="keyword">this</span>.name + <span class="string">'  '</span> + <span class="string">'成绩：'</span> + <span class="keyword">this</span>.score)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据模板创建具体实例对象（Instance）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> std1 = <span class="keyword">new</span> Student(<span class="string">'Michael'</span>, <span class="number">98</span>)</span><br><span class="line"><span class="keyword">var</span> std2 = <span class="keyword">new</span> Student(<span class="string">'Bob'</span>, <span class="number">81</span>)</span><br></pre></td></tr></table></figure><p>实例对象具有自己的具体行为（给对象发消息）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std1.printScore() <span class="comment">// =&gt; 姓名：Michael  成绩：98</span></span><br><span class="line">std2.printScore() <span class="comment">// =&gt; 姓名：Bob  成绩 81</span></span><br></pre></td></tr></table></figure><p>面向对象的设计思想是从自然界中来的，因为在自然界中，类（Class）和实例（Instance）的概念是很自然的。<br>Class 是一种抽象概念，比如我们定义的 Class——Student ，是指学生这个概念，<br>而实例（Instance）则是一个个具体的 Student ，比如， Michael 和 Bob 是两个具体的 Student 。</p><p>所以，面向对象的设计思想是：</p><ul><li>抽象出 Class</li><li>根据 Class 创建 Instance</li><li>指挥 Instance 得结果</li></ul><p>面向对象的抽象程度又比函数要高，因为一个 Class 既包含数据，又包含操作数据的方法。</p><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><h4 id="简单方式"><a href="#简单方式" class="headerlink" title="简单方式"></a>简单方式</h4><p>我们可以直接通过 <code>new Object()</code> 创建：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">person.name = <span class="string">'Jack'</span></span><br><span class="line">person.age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">person.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次创建通过 <code>new Object()</code> 比较麻烦，所以可以通过它的简写形式对象字面量来创建：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">'Jack'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上面的写法固然没有问题，但是假如我们要生成两个 <code>person</code> 实例对象呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  name: <span class="string">'Jack'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = &#123;</span><br><span class="line">  name: <span class="string">'Mike'</span>,</span><br><span class="line">  age: <span class="number">16</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的代码我们不难看出，这样写的代码太过冗余，重复性太高。</p><h4 id="简单方式的改进：工厂函数"><a href="#简单方式的改进：工厂函数" class="headerlink" title="简单方式的改进：工厂函数"></a>简单方式的改进：工厂函数</h4><p>我们可以写一个函数，解决代码重复问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name: name,</span><br><span class="line">    age: age,</span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后生成实例对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = createPerson(<span class="string">'Jack'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = createPerson(<span class="string">'Mike'</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure><p>这样封装确实爽多了，通过工厂模式我们解决了创建多个相似对象代码冗余的问题，<br>但却没有解决对象识别的问题（即怎样知道一个对象的类型）。</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>内容引导：</p><ul><li>构造函数语法</li><li>分析构造函数</li><li>构造函数和实例对象的关系<ul><li>实例的 constructor 属性</li><li>instanceof 操作符</li></ul></li><li>普通函数调用和构造函数调用的区别</li><li>构造函数的返回值</li><li>构造函数的静态成员和实例成员<ul><li>函数也是对象</li><li>实例成员</li><li>静态成员</li></ul></li><li>构造函数的问题</li></ul><h4 id="更优雅的工厂函数：构造函数"><a href="#更优雅的工厂函数：构造函数" class="headerlink" title="更优雅的工厂函数：构造函数"></a>更优雅的工厂函数：构造函数</h4><p>一种更优雅的工厂函数就是下面这样，构造函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">18</span>)</span><br><span class="line">p1.sayName() <span class="comment">// =&gt; Jack</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Mike'</span>, <span class="number">23</span>)</span><br><span class="line">p2.sayName() <span class="comment">// =&gt; Mike</span></span><br></pre></td></tr></table></figure><h4 id="解析构造函数代码的执行"><a href="#解析构造函数代码的执行" class="headerlink" title="解析构造函数代码的执行"></a>解析构造函数代码的执行</h4><p>在上面的示例中，<code>Person()</code> 函数取代了 <code>createPerson()</code> 函数，但是实现效果是一样的。<br>这是为什么呢？</p><p>我们注意到，<code>Person()</code> 中的代码与 <code>createPerson()</code> 有以下几点不同之处：</p><ul><li>没有显示的创建对象</li><li>直接将属性和方法赋给了 <code>this</code> 对象</li><li>没有 <code>return</code> 语句</li><li>函数名使用的是大写的 <code>Person</code></li></ul><p>而要创建 <code>Person</code> 实例，则必须使用 <code>new</code> 操作符。<br>以这种方式调用构造函数会经历以下 4 个步骤：</p><ol><li>创建一个新对象</li><li>将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象）</li><li>执行构造函数中的代码</li><li>返回新对象</li></ol><p>下面是具体的伪代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当使用 new 操作符调用 Person() 的时候，实际上这里会先创建一个对象</span></span><br><span class="line">  <span class="comment">// var instance = &#123;&#125;</span></span><br><span class="line">  <span class="comment">// 然后让内部的 this 指向 instance 对象</span></span><br><span class="line">  <span class="comment">// this = instance</span></span><br><span class="line">  <span class="comment">// 接下来所有针对 this 的操作实际上操作的就是 instance</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在函数的结尾处会将 this 返回，也就是 instance</span></span><br><span class="line">  <span class="comment">// return this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造函数和实例对象的关系"><a href="#构造函数和实例对象的关系" class="headerlink" title="构造函数和实例对象的关系"></a>构造函数和实例对象的关系</h4><p>使用构造函数的好处不仅仅在于代码的简洁性，更重要的是我们可以识别对象的具体类型了。<br>在每一个实例对象中同时有一个 <code>constructor</code> 属性，该属性指向创建该实例的构造函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(p1.constructor === Person) <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(p2.constructor === Person) <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.constructor === p2.constructor) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>对象的 <code>constructor</code> 属性最初是用来标识对象类型的，<br>但是，如果要检测对象的类型，还是使用 <code>instanceof</code> 操作符更可靠一些：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> Person) <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(p2 <span class="keyword">instanceof</span> Person) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>构造函数是根据具体的事物抽象出来的抽象模板</li><li>实例对象是根据抽象的构造函数模板得到的具体实例对象</li><li>每一个实例对象都具有一个 <code>constructor</code> 属性，指向创建该实例的构造函数<ul><li>注意： <code>constructor</code> 是实例的属性的说法不严谨，具体后面的原型会讲到</li></ul></li><li>可以通过实例的 <code>constructor</code> 属性判断实例和构造函数之间的关系<ul><li>注意：这种方式不严谨，推荐使用 <code>instanceof</code> 操作符，后面学原型会解释为什么</li></ul></li></ul><h4 id="构造函数的问题"><a href="#构造函数的问题" class="headerlink" title="构造函数的问题"></a>构造函数的问题</h4><p>使用构造函数带来的最大的好处就是创建对象更方便了，但是其本身也存在一个浪费内存的问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'lpz'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>在该示例中，从表面上好像没什么问题，但是实际上这样做，有一个很大的弊端。<br>那就是对于每一个实例对象，<code>type</code> 和 <code>sayHello</code> 都是一模一样的内容，<br>每一次生成一个实例，都必须为重复的内容，多占用一些内存，如果实例对象很多，会造成极大的内存浪费。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(p1.sayHello === p2.sayHello) <span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><p>对于这种问题我们可以把需要共享的函数定义到构造函数外部：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span> = <span class="title">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.sayHello = sayHello</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'lpz'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayHello === p2.sayHello) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>这样确实可以了，但是如果有多个需要共享的函数的话就会造成全局命名空间冲突的问题。</p><p>你肯定想到了可以把多个函数放到一个对象中用来避免全局命名空间冲突的问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fns = &#123;</span><br><span class="line">  sayHello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">  &#125;,</span><br><span class="line">  sayAge: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.age)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.sayHello = fns.sayHello</span><br><span class="line">  <span class="keyword">this</span>.sayAge = fns.sayAge</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'lpz'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayHello === p2.sayHello) <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayAge === p2.sayAge) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>至此，我们利用自己的方式基本上解决了构造函数的内存浪费问题。<br>但是代码看起来还是那么的格格不入，那有没有更好的方式呢？</p><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><ul><li>构造函数语法</li><li>分析构造函数</li><li>构造函数和实例对象的关系<ul><li>实例的 constructor 属性</li><li>instanceof 操作符</li></ul></li><li>构造函数的问题</li></ul><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>内容引导：</p><ul><li>使用 prototype 原型对象解决构造函数的问题</li><li>分析 构造函数、prototype 原型对象、实例对象 三者之间的关系</li><li>属性成员搜索原则：原型链</li><li>实例对象读写原型对象中的成员</li><li>原型对象的简写形式</li><li>原生对象的原型<ul><li>Object</li><li>Array</li><li>String</li><li>…</li></ul></li><li>原型对象的问题</li><li>构造的函数和原型对象使用建议</li></ul><h4 id="更好的解决方案：-prototype"><a href="#更好的解决方案：-prototype" class="headerlink" title="更好的解决方案： prototype"></a>更好的解决方案： <code>prototype</code></h4><p>Javascript 规定，每一个构造函数都有一个 <code>prototype</code> 属性，指向另一个对象。<br>这个对象的所有属性和方法，都会被构造函数的实例继承。</p><p>这也就意味着，我们可以把所有对象实例需要共享的属性和方法直接定义在 <code>prototype</code> 对象上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype)</span><br><span class="line"></span><br><span class="line">Person.prototype.type = <span class="string">'human'</span></span><br><span class="line"></span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(...)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(...)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayName === p2.sayName) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>这时所有实例的 <code>type</code> 属性和 <code>sayName()</code> 方法，<br>其实都是同一个内存地址，指向 <code>prototype</code> 对象，因此就提高了运行效率。</p><h4 id="构造函数、实例、原型三者之间的关系"><a href="#构造函数、实例、原型三者之间的关系" class="headerlink" title="构造函数、实例、原型三者之间的关系"></a>构造函数、实例、原型三者之间的关系</h4><p>任何函数都具有一个 <code>prototype</code> 属性，该属性是一个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(F.prototype) <span class="comment">// =&gt; object</span></span><br><span class="line"></span><br><span class="line">F.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hi!'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数的 <code>prototype</code> 对象默认都有一个 <code>constructor</code> 属性，指向 <code>prototype</code> 对象所在函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(F.constructor === F) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>通过构造函数得到的实例对象内部会包含一个指向构造函数的 <code>prototype</code> 对象的指针 <code>__proto__</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> F()</span><br><span class="line"><span class="built_in">console</span>.log(instance.__proto__ === F.prototype) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p class="tip"><br>  <code>__proto__</code> 是非标准属性。<br></p><p>实例对象可以直接访问原型对象成员。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">instance.sayHi() <span class="comment">// =&gt; hi!</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>任何函数都具有一个 <code>prototype</code> 属性，该属性是一个对象</li><li>构造函数的 <code>prototype</code> 对象默认都有一个 <code>constructor</code> 属性，指向 <code>prototype</code> 对象所在函数</li><li>通过构造函数得到的实例对象内部会包含一个指向构造函数的 <code>prototype</code> 对象的指针 <code>__proto__</code></li><li>所有实例都直接或间接继承了原型对象的成员</li></ul><h4 id="属性成员的搜索原则：原型链"><a href="#属性成员的搜索原则：原型链" class="headerlink" title="属性成员的搜索原则：原型链"></a>属性成员的搜索原则：原型链</h4><p>了解了 <strong>构造函数-实例-原型对象</strong> 三者之间的关系后，接下来我们来解释一下为什么实例对象可以访问原型对象中的成员。</p><p>每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性</p><ul><li>搜索首先从对象实例本身开始</li><li>如果在实例中找到了具有给定名字的属性，则返回该属性的值</li><li>如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性</li><li>如果在原型对象中找到了这个属性，则返回该属性的值</li></ul><p>也就是说，在我们调用 <code>person1.sayName()</code> 的时候，会先后执行两次搜索：</p><ul><li>首先，解析器会问：“实例 person1 有 sayName 属性吗？”答：“没有。</li><li>”然后，它继续搜索，再问：“ person1 的原型有 sayName 属性吗？”答：“有。</li><li>”于是，它就读取那个保存在原型对象中的函数。</li><li>当我们调用 person2.sayName() 时，将会重现相同的搜索过程，得到相同的结果。</li></ul><p>而这正是多个对象实例共享原型所保存的属性和方法的基本原理。</p><p>总结：</p><ul><li>先在自己身上找，找到即返回</li><li>自己身上找不到，则沿着原型链向上查找，找到即返回</li><li>如果一直到原型链的末端还没有找到，则返回 <code>undefined</code></li></ul><h4 id="实例对象读写原型对象成员"><a href="#实例对象读写原型对象成员" class="headerlink" title="实例对象读写原型对象成员"></a>实例对象读写原型对象成员</h4><p>读取：</p><ul><li>先在自己身上找，找到即返回</li><li>自己身上找不到，则沿着原型链向上查找，找到即返回</li><li>如果一直到原型链的末端还没有找到，则返回 <code>undefined</code></li></ul><p>值类型成员写入（<code>实例对象.值类型成员 = xx</code>）：</p><ul><li>当实例期望重写原型对象中的某个普通数据成员时实际上会把该成员添加到自己身上</li><li>也就是说该行为实际上会屏蔽掉对原型对象成员的访问</li></ul><p>引用类型成员写入（<code>实例对象.引用类型成员 = xx</code>）：</p><ul><li>同上</li></ul><p>复杂类型修改（<code>实例对象.成员.xx = xx</code>）：</p><ul><li>同样会先在自己身上找该成员，如果自己身上找到则直接修改</li><li>如果自己身上找不到，则沿着原型链继续查找，如果找到则修改</li><li>如果一直到原型链的末端还没有找到该成员，则报错（<code>实例对象.undefined.xx = xx</code>）</li></ul><h4 id="更简单的原型语法"><a href="#更简单的原型语法" class="headerlink" title="更简单的原型语法"></a>更简单的原型语法</h4><p>我们注意到，前面例子中每添加一个属性和方法就要敲一遍 <code>Person.prototype</code> 。<br>为减少不必要的输入，更常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  type: <span class="string">'human'</span>,</span><br><span class="line">  sayHello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我叫'</span> + <span class="keyword">this</span>.name + <span class="string">'，我今年'</span> + <span class="keyword">this</span>.age + <span class="string">'岁了'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该示例中，我们将 <code>Person.prototype</code> 重置到了一个新的对象。<br>这样做的好处就是为 <code>Person.prototype</code> 添加成员简单了，但是也会带来一个问题，那就是原型对象丢失了 <code>constructor</code> 成员。</p><p>所以，我们为了保持 <code>constructor</code> 的指向正确，建议的写法是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: Person, // =&gt; 手动将 <span class="keyword">constructor</span> 指向正确的构造函数</span><br><span class="line">  type: 'human',</span><br><span class="line">  sayHello: function () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我叫'</span> + <span class="keyword">this</span>.name + <span class="string">'，我今年'</span> + <span class="keyword">this</span>.age + <span class="string">'岁了'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="原生对象的原型"><a href="#原生对象的原型" class="headerlink" title="原生对象的原型"></a>原生对象的原型</h4><p class="tip"><br>  所有函数都有 prototype 属性对象。<br></p><ul><li>Object.prototype</li><li>Function.prototype</li><li>Array.prototype</li><li>String.prototype</li><li>Number.prototype</li><li>Date.prototype</li><li>…</li></ul><p>练习：为数组对象和字符串对象扩展原型方法。</p><h4 id="原型对象的问题"><a href="#原型对象的问题" class="headerlink" title="原型对象的问题"></a>原型对象的问题</h4><ul><li>共享数组</li><li>共享对象</li></ul><p>如果真的希望可以被实例对象之间共享和修改这些共享数据那就不是问题。但是如果不希望实例之间共享和修改这些共享数据则就是问题。</p><p>一个更好的建议是，最好不要让实例之间互相共享这些数组或者对象成员，一旦修改的话会导致数据的走向很不明确而且难以维护。</p><h4 id="原型对象使用建议"><a href="#原型对象使用建议" class="headerlink" title="原型对象使用建议"></a>原型对象使用建议</h4><ul><li>私有成员（一般就是非函数成员）放到构造函数中</li><li>共享成员（一般就是函数）放到原型对象中</li><li>如果重置了 <code>prototype</code> 记得修正 <code>constructor</code> 的指向</li></ul><h3 id="案例：随机方块"><a href="#案例：随机方块" class="headerlink" title="案例：随机方块"></a>案例：随机方块</h3><h2 id="面向对象游戏案例：贪吃蛇"><a href="#面向对象游戏案例：贪吃蛇" class="headerlink" title="面向对象游戏案例：贪吃蛇"></a>面向对象游戏案例：贪吃蛇</h2><p>案例相关源码以上传到 GitHub ：<a href="https://github.com/lipengzhou/new-snake" target="_blank" rel="noopener">https://github.com/lipengzhou/new-snake</a></p><h3 id="案例介绍"><a href="#案例介绍" class="headerlink" title="案例介绍"></a>案例介绍</h3><h4 id="游戏演示"><a href="#游戏演示" class="headerlink" title="游戏演示"></a>游戏演示</h4><p>在线演示地址：<a href="https://lipengzhou.github.io/new-snake/" target="_blank" rel="noopener">贪吃蛇</a></p><h4 id="案例目标"><a href="#案例目标" class="headerlink" title="案例目标"></a>案例目标</h4><p>游戏的目的是用来体会js高级语法的使用 不需要具备抽象对象的能力，使用面向对象的方式分析问题，需要一个漫长的过程。</p><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><h4 id="搭建页面"><a href="#搭建页面" class="headerlink" title="搭建页面"></a>搭建页面</h4><p>放一个容器盛放游戏场景 div#map，设置样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#map</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析对象"><a href="#分析对象" class="headerlink" title="分析对象"></a>分析对象</h4><ul><li>游戏对象</li><li>蛇对象</li><li>食物对象</li></ul><h4 id="创建食物对象"><a href="#创建食物对象" class="headerlink" title="创建食物对象"></a>创建食物对象</h4><ul><li><p>Food</p><ul><li><p>属性</p><ul><li>x       </li><li>y</li><li>width</li><li>height</li><li>color       </li></ul></li><li><p>方法</p><ul><li>render       随机创建一个食物对象，并输出到map上</li></ul></li></ul></li><li><p>创建Food的构造函数，并设置属性</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> position = <span class="string">'absolute'</span>;</span><br><span class="line"><span class="keyword">var</span> elements = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Food</span>(<span class="params">x, y, width, height, color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x || <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.y = y || <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 食物的宽度和高度(像素)</span></span><br><span class="line">  <span class="keyword">this</span>.width = width || <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">this</span>.height = height || <span class="number">20</span>;</span><br><span class="line">  <span class="comment">// 食物的颜色</span></span><br><span class="line">  <span class="keyword">this</span>.color = color || <span class="string">'green'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过原型设置render方法，实现随机产生食物对象，并渲染到map上</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Food.prototype.render = <span class="function"><span class="keyword">function</span> (<span class="params">map</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 随机食物的位置，map.宽度/food.宽度，总共有多少分food的宽度，随机一下。然后再乘以food的宽度</span></span><br><span class="line">  <span class="keyword">this</span>.x = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * map.offsetWidth / <span class="keyword">this</span>.width) * <span class="keyword">this</span>.width;</span><br><span class="line">  <span class="keyword">this</span>.y = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * map.offsetHeight / <span class="keyword">this</span>.height) * <span class="keyword">this</span>.height;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 动态创建食物对应的div</span></span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  map.appendChild(div);</span><br><span class="line">  div.style.position = position;</span><br><span class="line">  div.style.left = <span class="keyword">this</span>.x + <span class="string">'px'</span>;</span><br><span class="line">  div.style.top = <span class="keyword">this</span>.y + <span class="string">'px'</span>;</span><br><span class="line">  div.style.width = <span class="keyword">this</span>.width + <span class="string">'px'</span>;</span><br><span class="line">  div.style.height = <span class="keyword">this</span>.height + <span class="string">'px'</span>;</span><br><span class="line">  div.style.backgroundColor = <span class="keyword">this</span>.color;</span><br><span class="line">  elements.push(div);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过自调用函数，进行封装，通过window暴露Food对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.Food = Food;</span><br></pre></td></tr></table></figure><h4 id="创建蛇对象"><a href="#创建蛇对象" class="headerlink" title="创建蛇对象"></a>创建蛇对象</h4><ul><li><p>Snake</p></li><li><p>属性</p><ul><li>width    蛇节的宽度 默认20</li><li>height   蛇节的高度 默认20</li><li>body     数组，蛇的头部和身体，第一个位置是蛇头</li><li>direction    蛇运动的方向  默认right  可以是 left  top bottom</li></ul></li><li><p>方法</p><ul><li>render  把蛇渲染到map上</li></ul></li><li><p>Snake构造函数</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> position = <span class="string">'absolute'</span>;</span><br><span class="line"><span class="keyword">var</span> elements = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Snake</span>(<span class="params">width, height, direction</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 设置每一个蛇节的宽度</span></span><br><span class="line">  <span class="keyword">this</span>.width = width || <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">this</span>.height = height || <span class="number">20</span>;</span><br><span class="line">  <span class="comment">// 蛇的每一部分, 第一部分是蛇头</span></span><br><span class="line">  <span class="keyword">this</span>.body = [</span><br><span class="line">    &#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">color</span>: <span class="string">'red'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">x</span>: <span class="number">2</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">color</span>: <span class="string">'red'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">color</span>: <span class="string">'red'</span>&#125;</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">this</span>.direction = direction || <span class="string">'right'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>render方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Snake.prototype.render = <span class="function"><span class="keyword">function</span>(<span class="params">map</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.body.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">this</span>.body[i];</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    map.appendChild(div);</span><br><span class="line">    div.style.left = obj.x * <span class="keyword">this</span>.width + <span class="string">'px'</span>;</span><br><span class="line">    div.style.top = obj.y * <span class="keyword">this</span>.height + <span class="string">'px'</span>;</span><br><span class="line">    div.style.position = position;</span><br><span class="line">    div.style.backgroundColor = obj.color;</span><br><span class="line">    div.style.width = <span class="keyword">this</span>.width + <span class="string">'px'</span>;</span><br><span class="line">    div.style.height = <span class="keyword">this</span>.height + <span class="string">'px'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在自调用函数中暴露Snake对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.Snake = Snake;</span><br></pre></td></tr></table></figure><h4 id="创建游戏对象"><a href="#创建游戏对象" class="headerlink" title="创建游戏对象"></a>创建游戏对象</h4><p>游戏对象，用来管理游戏中的所有对象和开始游戏</p><ul><li><p>Game</p><ul><li><p>属性</p><ul><li><p>food</p></li><li><p>snake</p></li><li><p>map</p></li></ul></li><li><p>方法</p><ul><li>start            开始游戏（绘制所有游戏对象）</li></ul></li></ul></li></ul><ul><li>构造函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Game</span>(<span class="params">map</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.food = <span class="keyword">new</span> Food();</span><br><span class="line">  <span class="keyword">this</span>.snake = <span class="keyword">new</span> Snake();</span><br><span class="line">  <span class="keyword">this</span>.map = map;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 开始游戏，渲染食物对象和蛇对象</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">Game.prototype.start = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.food.render(<span class="keyword">this</span>.map);</span><br><span class="line">  <span class="keyword">this</span>.snake.render(<span class="keyword">this</span>.map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="游戏的逻辑"><a href="#游戏的逻辑" class="headerlink" title="游戏的逻辑"></a>游戏的逻辑</h3><h4 id="写蛇的move方法"><a href="#写蛇的move方法" class="headerlink" title="写蛇的move方法"></a>写蛇的move方法</h4><ul><li>在蛇对象(snake.js)中，在Snake的原型上新增move方法</li></ul><ol><li>让蛇移动起来，把蛇身体的每一部分往前移动一下</li><li>蛇头部分根据不同的方向决定 往哪里移动</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Snake.prototype.move = <span class="function"><span class="keyword">function</span> (<span class="params">food, map</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 让蛇身体的每一部分往前移动一下</span></span><br><span class="line">  <span class="keyword">var</span> i = <span class="keyword">this</span>.body.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">this</span>.body[i].x = <span class="keyword">this</span>.body[i - <span class="number">1</span>].x;</span><br><span class="line">    <span class="keyword">this</span>.body[i].y = <span class="keyword">this</span>.body[i - <span class="number">1</span>].y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 根据移动的方向，决定蛇头如何处理</span></span><br><span class="line">  <span class="keyword">switch</span>(<span class="keyword">this</span>.direction) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'left'</span>: </span><br><span class="line">      <span class="keyword">this</span>.body[<span class="number">0</span>].x -= <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'right'</span>:</span><br><span class="line">      <span class="keyword">this</span>.body[<span class="number">0</span>].x += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'top'</span>:</span><br><span class="line">      <span class="keyword">this</span>.body[<span class="number">0</span>].y -= <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'bottom'</span>:</span><br><span class="line">      <span class="keyword">this</span>.body[<span class="number">0</span>].y += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在game中测试</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.snake.move(<span class="keyword">this</span>.food, <span class="keyword">this</span>.map);</span><br><span class="line"><span class="keyword">this</span>.snake.render(<span class="keyword">this</span>.map);</span><br></pre></td></tr></table></figure><h4 id="让蛇自己动起来"><a href="#让蛇自己动起来" class="headerlink" title="让蛇自己动起来"></a>让蛇自己动起来</h4><ul><li><p>私有方法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">什么是私有方法？</span><br><span class="line">  不能被外部访问的方法</span><br><span class="line">如何创建私有方法？</span><br><span class="line">  使用自调用函数包裹</span><br></pre></td></tr></table></figure></li><li><p>在game.js中 添加runSnake的私有方法，开启定时器调用蛇的move和render方法，让蛇动起来</p></li><li>判断蛇是否撞墙</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runSnake</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timerId = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.snake.move(<span class="keyword">this</span>.food, <span class="keyword">this</span>.map);</span><br><span class="line">    <span class="comment">// 在渲染前，删除之前的蛇</span></span><br><span class="line">    <span class="keyword">this</span>.snake.render(<span class="keyword">this</span>.map);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断蛇是否撞墙</span></span><br><span class="line">    <span class="keyword">var</span> maxX = <span class="keyword">this</span>.map.offsetWidth / <span class="keyword">this</span>.snake.width;</span><br><span class="line">    <span class="keyword">var</span> maxY = <span class="keyword">this</span>.map.offsetHeight / <span class="keyword">this</span>.snake.height;</span><br><span class="line">    <span class="keyword">var</span> headX = <span class="keyword">this</span>.snake.body[<span class="number">0</span>].x;</span><br><span class="line">    <span class="keyword">var</span> headY = <span class="keyword">this</span>.snake.body[<span class="number">0</span>].y;</span><br><span class="line">    <span class="keyword">if</span> (headX &lt; <span class="number">0</span> || headX &gt;= maxX) &#123;</span><br><span class="line">      clearInterval(timerId);</span><br><span class="line">      alert(<span class="string">'Game Over'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (headY &lt; <span class="number">0</span> || headY &gt;= maxY) &#123;</span><br><span class="line">      clearInterval(timerId);</span><br><span class="line">      alert(<span class="string">'Game Over'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;.bind(that), <span class="number">150</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在snake中添加删除蛇的私有方法，在render中调用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 删除渲染的蛇</span></span><br><span class="line">  <span class="keyword">var</span> i = elements.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="comment">// 删除页面上渲染的蛇</span></span><br><span class="line">    elements[i].parentNode.removeChild(elements[i]);</span><br><span class="line">    <span class="comment">// 删除elements数组中的元素</span></span><br><span class="line">    elements.splice(i, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在game中通过键盘控制蛇的移动方向</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindKey</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'keydown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (e.keyCode) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">37</span>:</span><br><span class="line">        <span class="comment">// left</span></span><br><span class="line">        <span class="keyword">this</span>.snake.direction = <span class="string">'left'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">38</span>:</span><br><span class="line">        <span class="comment">// top</span></span><br><span class="line">        <span class="keyword">this</span>.snake.direction = <span class="string">'top'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">39</span>:</span><br><span class="line">        <span class="comment">// right</span></span><br><span class="line">        <span class="keyword">this</span>.snake.direction = <span class="string">'right'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">        <span class="comment">// bottom</span></span><br><span class="line">        <span class="keyword">this</span>.snake.direction = <span class="string">'bottom'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;.bind(that), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在start方法中调用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindKey();</span><br></pre></td></tr></table></figure><h4 id="判断蛇是否吃到食物"><a href="#判断蛇是否吃到食物" class="headerlink" title="判断蛇是否吃到食物"></a>判断蛇是否吃到食物</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Snake的move方法中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在移动的过程中判断蛇是否吃到食物</span></span><br><span class="line"><span class="comment">// 如果蛇头和食物的位置重合代表吃到食物</span></span><br><span class="line"><span class="comment">// 食物的坐标是像素，蛇的坐标是几个宽度，进行转换</span></span><br><span class="line"><span class="keyword">var</span> headX = <span class="keyword">this</span>.body[<span class="number">0</span>].x * <span class="keyword">this</span>.width;</span><br><span class="line"><span class="keyword">var</span> headY = <span class="keyword">this</span>.body[<span class="number">0</span>].y * <span class="keyword">this</span>.height;</span><br><span class="line"><span class="keyword">if</span> (headX === food.x &amp;&amp; headY === food.y) &#123;</span><br><span class="line">  <span class="comment">// 吃到食物，往蛇节的最后加一节</span></span><br><span class="line">  <span class="keyword">var</span> last = <span class="keyword">this</span>.body[<span class="keyword">this</span>.body.length - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">this</span>.body.push(&#123;</span><br><span class="line">    x: last.x,</span><br><span class="line">    y: last.y,</span><br><span class="line">    color: last.color</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 把现在的食物对象删除，并重新随机渲染一个食物对象</span></span><br><span class="line">  food.render(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其它处理"><a href="#其它处理" class="headerlink" title="其它处理"></a>其它处理</h3><h4 id="把html中的js代码放到index-js中"><a href="#把html中的js代码放到index-js中" class="headerlink" title="把html中的js代码放到index.js中"></a>把html中的js代码放到index.js中</h4><p>避免html中出现js代码</p><h4 id="自调用函数的参数"><a href="#自调用函数的参数" class="headerlink" title="自调用函数的参数"></a>自调用函数的参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">window, undefined</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">document</span> = <span class="built_in">window</span>.document;</span><br><span class="line"></span><br><span class="line">&#125;(<span class="built_in">window</span>, <span class="literal">undefined</span>))</span><br></pre></td></tr></table></figure><ul><li>传入window对象</li></ul><p>将来代码压缩的时候，可以吧 function (window)  压缩成 function (w)</p><ul><li>传入undefined</li></ul><p>在将来会看到别人写的代码中会把undefined作为函数的参数(当前案例没有使用)<br>因为在有的老版本的浏览器中 undefined可以被重新赋值，防止undefined 被重新赋值</p><h4 id="整理代码"><a href="#整理代码" class="headerlink" title="整理代码"></a>整理代码</h4><p>现在的代码结构清晰，谁出问题就找到对应的js文件即可。<br>通过自调用函数，已经防止了变量命名污染的问题</p><p>但是，由于js文件数较多，需要在页面上引用，会产生文件依赖的问题(先引入那个js，再引入哪个js)<br>将来通过工具把js文件合并并压缩。现在手工合并js文件演示</p><ul><li>问题1</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果存在多个自调用函数要用分号分割，否则语法错误</span></span><br><span class="line"><span class="comment">// 下面代码会报错</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;())</span><br><span class="line"><span class="comment">// 所以代码规范中会建议在自调用函数之前加上分号</span></span><br><span class="line"><span class="comment">// 下面代码没有问题</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure><ul><li>问题2 </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当自调用函数 前面有函数声明时，会把自调用函数作为参数</span></span><br><span class="line"><span class="comment">// 所以建议自调用函数前，加上;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'11'</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'22'</span>);</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="什么是继承"><a href="#什么是继承" class="headerlink" title="什么是继承"></a>什么是继承</h3><ul><li>现实生活中的继承</li><li>程序中的继承</li></ul><h3 id="构造函数的属性继承：借用构造函数"><a href="#构造函数的属性继承：借用构造函数" class="headerlink" title="构造函数的属性继承：借用构造函数"></a>构造函数的属性继承：借用构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 借用构造函数继承属性成员</span></span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = Student(<span class="string">'张三'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s1.type, s1.name, s1.age) <span class="comment">// =&gt; human 张三 18</span></span><br></pre></td></tr></table></figure><h3 id="构造函数的原型方法继承：拷贝继承（for-in）"><a href="#构造函数的原型方法继承：拷贝继承（for-in）" class="headerlink" title="构造函数的原型方法继承：拷贝继承（for-in）"></a>构造函数的原型方法继承：拷贝继承（for-in）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型对象拷贝继承原型对象成员</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> Person.prototype) &#123;</span><br><span class="line">  Student.prototype[key] = Person.prototype[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = Student(<span class="string">'张三'</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">s1.sayName() <span class="comment">// =&gt; hello 张三</span></span><br></pre></td></tr></table></figure><h3 id="另一种继承方式：原型继承"><a href="#另一种继承方式：原型继承" class="headerlink" title="另一种继承方式：原型继承"></a>另一种继承方式：原型继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用原型的特性实现继承</span></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = Student(<span class="string">'张三'</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s1.type) <span class="comment">// =&gt; human</span></span><br><span class="line"></span><br><span class="line">s1.sayName() <span class="comment">// =&gt; hello 张三</span></span><br></pre></td></tr></table></figure><h2 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h2><h3 id="函数的定义方式"><a href="#函数的定义方式" class="headerlink" title="函数的定义方式"></a>函数的定义方式</h3><ul><li>函数声明</li><li>函数表达式</li><li><code>new Function</code></li></ul><h4 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数声明与函数表达式的区别"><a href="#函数声明与函数表达式的区别" class="headerlink" title="函数声明与函数表达式的区别"></a>函数声明与函数表达式的区别</h4><ul><li>函数声明必须有名字</li><li>函数声明会函数提升，在预解析阶段就已创建，声明前后都可以调用</li><li>函数表达式类似于变量赋值</li><li>函数表达式可以没有名字，例如匿名函数</li><li>函数表达式没有变量提升，在执行阶段创建，必须在表达式执行之后才可以调用</li></ul><p>下面是一个根据条件定义函数的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码执行结果在不同浏览器中结果不一致。</p><p>不过我们可以使用函数表达式解决上面的问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的调用方式"><a href="#函数的调用方式" class="headerlink" title="函数的调用方式"></a>函数的调用方式</h3><ul><li>普通函数</li><li>构造函数</li><li>对象方法</li></ul><h3 id="函数内-this-指向的不同场景"><a href="#函数内-this-指向的不同场景" class="headerlink" title="函数内 this 指向的不同场景"></a>函数内 <code>this</code> 指向的不同场景</h3><p>函数的调用方式决定了 <code>this</code> 指向的不同：</p><table><thead><tr><th>调用方式</th><th>非严格模式</th><th>备注</th></tr></thead><tbody><tr><td>普通函数调用</td><td>window</td><td>严格模式下是 undefined</td></tr><tr><td>构造函数调用</td><td>实例对象</td><td>原型方法中 this 也是实例对象</td></tr><tr><td>对象方法调用</td><td>该方法所属对象</td><td>紧挨着的对象</td></tr><tr><td>事件绑定方法</td><td>绑定事件对象</td><td></td></tr><tr><td>定时器函数</td><td>window</td></tr></tbody></table><p>这就是对函数内部 this 指向的基本整理，写代码写多了自然而然就熟悉了。</p><h3 id="函数也是对象"><a href="#函数也是对象" class="headerlink" title="函数也是对象"></a>函数也是对象</h3><ul><li>所有函数都是 <code>Function</code> 的实例</li></ul><h3 id="call、apply、bind"><a href="#call、apply、bind" class="headerlink" title="call、apply、bind"></a>call、apply、bind</h3><p>那了解了函数 this 指向的不同场景之后，我们知道有些情况下我们为了使用某种特定环境的 this 引用，<br>这时候时候我们就需要采用一些特殊手段来处理了，例如我们经常在定时器外部备份 this 引用，然后在定时器函数内部使用外部 this 的引用。<br>然而实际上对于这种做法我们的 JavaScript 为我们专门提供了一些函数方法用来帮我们更优雅的处理函数内部 this 指向问题。<br>这就是接下来我们要学习的 call、apply、bind 三个函数方法。</p><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><p><code>call()</code> 方法调用一个函数, 其具有一个指定的 <code>this</code> 值和分别地提供的参数(参数的列表)。</p><p class="danger"><br>  注意：该方法的作用和 <code>apply()</code> 方法类似，只有一个区别，就是 <code>call()</code> 方法接受的是若干个参数的列表，而 <code>apply()</code> 方法接受的是一个包含多个参数的数组。<br></p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.call(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li><p><code>thisArg</code></p><ul><li>在 fun 函数运行时指定的 this 值</li><li>如果指定了 null 或者 undefined 则内部 this 指向 window</li></ul></li><li><p><code>arg1, arg2, ...</code></p><ul><li>指定的参数列表</li></ul></li></ul><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><p><code>apply()</code> 方法调用一个函数, 其具有一个指定的 <code>this</code> 值，以及作为一个数组（或类似数组的对象）提供的参数。</p><p class="danger"><br>  注意：该方法的作用和 <code>call()</code> 方法类似，只有一个区别，就是 <code>call()</code> 方法接受的是若干个参数的列表，而 <code>apply()</code> 方法接受的是一个包含多个参数的数组。<br></p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.apply(thisArg, [argsArray])</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li><code>thisArg</code></li><li><code>argsArray</code></li></ul><p><code>apply()</code> 与 <code>call()</code> 非常相似，不同之处在于提供参数的方式。<br><code>apply()</code> 使用参数数组而不是一组参数列表。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.apply(<span class="keyword">this</span>, [<span class="string">'eat'</span>, <span class="string">'bananas'</span>])</span><br></pre></td></tr></table></figure><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><p>bind() 函数会创建一个新函数（称为绑定函数），新函数与被调函数（绑定函数的目标函数）具有相同的函数体（在 ECMAScript 5 规范中内置的call属性）。<br>当目标函数被调用时 this 值绑定到 bind() 的第一个参数，该参数不能被重写。绑定函数被调用时，bind() 也接受预设的参数提供给原函数。<br>一个绑定函数也能使用new操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数。</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.bind(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li><p>thisArg</p><ul><li>当绑定函数被调用时，该参数会作为原函数运行时的 this 指向。当使用new 操作符调用绑定函数时，该参数无效。</li></ul></li><li><p>arg1, arg2, …</p><ul><li>当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法。</li></ul></li></ul><p>返回值：</p><p>返回由指定的this值和初始化参数改造的原函数拷贝。</p><p>示例1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.x = <span class="number">9</span>; </span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">  x: <span class="number">81</span>,</span><br><span class="line">  getX: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.getX(); <span class="comment">// 返回 81</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> retrieveX = <span class="built_in">module</span>.getX;</span><br><span class="line">retrieveX(); <span class="comment">// 返回 9, 在这种情况下，"this"指向全局作用域</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新函数，将"this"绑定到module对象</span></span><br><span class="line"><span class="comment">// 新手可能会被全局的x变量和module里的属性x所迷惑</span></span><br><span class="line"><span class="keyword">var</span> boundGetX = retrieveX.bind(<span class="built_in">module</span>);</span><br><span class="line">boundGetX(); <span class="comment">// 返回 81</span></span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LateBloomer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.petalCount = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">12</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare bloom after a delay of 1 second</span></span><br><span class="line">LateBloomer.prototype.bloom = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.setTimeout(<span class="keyword">this</span>.declare.bind(<span class="keyword">this</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">LateBloomer.prototype.declare = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'I am a beautiful flower with '</span> +</span><br><span class="line">    <span class="keyword">this</span>.petalCount + <span class="string">' petals!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flower = <span class="keyword">new</span> LateBloomer();</span><br><span class="line">flower.bloom();  <span class="comment">// 一秒钟后, 调用'declare'方法</span></span><br></pre></td></tr></table></figure><h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><ul><li><p>call 和 apply 特性一样</p><ul><li>都是用来调用函数，而且是立即调用</li><li>但是可以在调用函数的同时，通过第一个参数指定函数内部 <code>this</code> 的指向</li><li>call 调用的时候，参数必须以参数列表的形式进行传递，也就是以逗号分隔的方式依次传递即可</li><li>apply 调用的时候，参数必须是一个数组，然后在执行的时候，会将数组内部的元素一个一个拿出来，与形参一一对应进行传递</li><li>如果第一个参数指定了 <code>null</code> 或者 <code>undefined</code> 则内部 this 指向 window</li></ul></li><li><p>bind</p><ul><li>可以用来指定内部 this 的指向，然后生成一个改变了 this 指向的新的函数</li><li>它和 call、apply 最大的区别是：bind 不会调用</li><li>bind 支持传递参数，它的传参方式比较特殊，一共有两个位置可以传递<ul><li><ol><li>在 bind 的同时，以参数列表的形式进行传递</li></ol></li><li><ol start="2"><li>在调用的时候，以参数列表的形式进行传递</li></ol></li><li>那到底以谁 bind 的时候传递的参数为准呢还是以调用的时候传递的参数为准</li><li>两者合并：bind 的时候传递的参数和调用的时候传递的参数会合并到一起，传递到函数内部</li></ul></li></ul></li></ul><h3 id="函数的其它成员"><a href="#函数的其它成员" class="headerlink" title="函数的其它成员"></a>函数的其它成员</h3><ul><li>arguments<ul><li>实参集合</li></ul></li><li>caller<ul><li>函数的调用者</li></ul></li><li>length<ul><li>形参的个数</li></ul></li><li>name<ul><li>函数的名称</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(fn.length) <span class="comment">// =&gt; 形参的个数</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>) <span class="comment">// 伪数组实参参数集合</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee === fn) <span class="comment">// 函数本身</span></span><br><span class="line">  <span class="built_in">console</span>.log(fn.caller) <span class="comment">// 函数的调用者</span></span><br><span class="line">  <span class="built_in">console</span>.log(fn.name) <span class="comment">// =&gt; 函数的名字</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fn(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f()</span><br></pre></td></tr></table></figure><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><ul><li>函数可以作为参数</li><li>函数可以作为返回值</li></ul><h4 id="作为参数"><a href="#作为参数" class="headerlink" title="作为参数"></a>作为参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eat</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃完了'</span>)</span><br><span class="line">    callback()</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eat(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'去唱歌'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="作为返回值"><a href="#作为返回值" class="headerlink" title="作为返回值"></a>作为返回值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genFun</span> (<span class="params">type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === type</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isArray = genFun(<span class="string">'[object Array]'</span>)</span><br><span class="line"><span class="keyword">var</span> isObject = genFun(<span class="string">'[object Object]'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isArray([])) <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(isArray(&#123;&#125;)) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><h3 id="函数闭包"><a href="#函数闭包" class="headerlink" title="函数闭包"></a>函数闭包</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getCount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(count)</span><br><span class="line">    &#125;,</span><br><span class="line">    setCount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fns = fn()</span><br><span class="line"></span><br><span class="line">fns.getCount() <span class="comment">// =&gt; 0</span></span><br><span class="line">fns.setCount()</span><br><span class="line">fns.getCount() <span class="comment">// =&gt; 1</span></span><br></pre></td></tr></table></figure><h4 id="作用域、作用域链、预解析"><a href="#作用域、作用域链、预解析" class="headerlink" title="作用域、作用域链、预解析"></a>作用域、作用域链、预解析</h4><ul><li>全局作用域</li><li>函数作用域</li><li><strong>没有块级作用域</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> foo = <span class="string">'bar'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure><p>作用域链示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">30</span></span><br><span class="line">    <span class="built_in">console</span>.log(a + b + c)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="number">40</span></span><br><span class="line">    <span class="built_in">console</span>.log(c + d)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fn1()</span><br><span class="line">  fn2()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>内层作用域可以访问外层作用域，反之不行</li></ul><h4 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h4><p>闭包就是能够读取其他函数内部变量的函数，<br>由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，<br>因此可以把闭包简单理解成 “定义在一个函数内部的函数”。<br>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p><p>闭包的用途：</p><ul><li>可以在函数外部读取函数内部成员</li><li>让函数内成员始终存活在内存中</li></ul><h4 id="一些关于闭包的例子"><a href="#一些关于闭包的例子" class="headerlink" title="一些关于闭包的例子"></a>一些关于闭包的例子</h4><p>示例1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">222</span>)</span><br></pre></td></tr></table></figure><p>示例3：投票</p><p>示例4：判断类型</p><p>示例5：沙箱模式</p><h4 id="闭包的思考题"><a href="#闭包的思考题" class="headerlink" title="闭包的思考题"></a>闭包的思考题</h4><p>思考题 1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  name: <span class="string">"My Object"</span>,</span><br><span class="line">  getNameFunc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFunc()())</span><br></pre></td></tr></table></figure><p>思考题 2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;　　</span><br><span class="line"><span class="keyword">var</span> object = &#123;　　　　</span><br><span class="line">  name: <span class="string">"My Object"</span>,</span><br><span class="line">  getNameFunc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> that.name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFunc()())</span><br></pre></td></tr></table></figure><h4 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h4><h3 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h3><h4 id="递归执行模型"><a href="#递归执行模型" class="headerlink" title="递归执行模型"></a>递归执行模型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">111</span>)</span><br><span class="line">  fn2()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn1'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">222</span>)</span><br><span class="line">  fn3()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn2'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">333</span>)</span><br><span class="line">  fn4()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn3'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn4</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">444</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn4'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn1()</span><br></pre></td></tr></table></figure><h4 id="举个栗子：计算阶乘的递归函数"><a href="#举个栗子：计算阶乘的递归函数" class="headerlink" title="举个栗子：计算阶乘的递归函数"></a>举个栗子：计算阶乘的递归函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num * factorial(num - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归应用场景"><a href="#递归应用场景" class="headerlink" title="递归应用场景"></a>递归应用场景</h4><ul><li>深拷贝</li><li>菜单树</li><li>遍历 DOM 树</li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><ul><li>了解正则表达式基本语法</li><li>能够使用JavaScript的正则对象</li></ul><h3 id="正则表达式简介"><a href="#正则表达式简介" class="headerlink" title="正则表达式简介"></a>正则表达式简介</h3><h4 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h4><p>正则表达式：用于匹配规律规则的表达式，正则表达式最初是科学家对人类神经系统的工作原理的早期研究，现在在编程语言中有广泛的应用。正则表通常被用来检索、替换那些符合某个模式(规则)的文本。<br>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p><h4 id="正则表达式的作用"><a href="#正则表达式的作用" class="headerlink" title="正则表达式的作用"></a>正则表达式的作用</h4><ol><li>给定的字符串是否符合正则表达式的过滤逻辑(匹配)</li><li>可以通过正则表达式，从字符串中获取我们想要的特定部分(提取)</li><li>强大的字符串替换能力(替换)</li></ol><h4 id="正则表达式的特点"><a href="#正则表达式的特点" class="headerlink" title="正则表达式的特点"></a>正则表达式的特点</h4><ol><li>灵活性、逻辑性和功能性非常的强</li><li>可以迅速地用极简单的方式达到字符串的复杂控制</li><li>对于刚接触的人来说，比较晦涩难懂</li></ol><h3 id="正则表达式的测试"><a href="#正则表达式的测试" class="headerlink" title="正则表达式的测试"></a>正则表达式的测试</h3><ul><li><a href="https://c.runoob.com/front-end/854" target="_blank" rel="noopener">在线测试正则</a></li><li>工具中使用正则表达式<ul><li>sublime/vscode/word</li><li>演示替换所有的数字</li></ul></li></ul><h3 id="正则表达式的组成"><a href="#正则表达式的组成" class="headerlink" title="正则表达式的组成"></a>正则表达式的组成</h3><ul><li>普通字符</li><li>特殊字符(元字符)：正则表达式中有特殊意义的字符</li></ul><p>示例演示：</p><ul><li><code>\d</code> 匹配数字</li><li><code>ab\d</code> 匹配 ab1、ab2</li></ul><h3 id="元字符串"><a href="#元字符串" class="headerlink" title="元字符串"></a>元字符串</h3><p>通过测试工具演示下面元字符的使用</p><h4 id="常用元字符串"><a href="#常用元字符串" class="headerlink" title="常用元字符串"></a>常用元字符串</h4><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\w</td><td>匹配字母或数字或下划线</td></tr><tr><td>\W</td><td>匹配任意不是字母，数字，下划线</td></tr><tr><td>\s</td><td>匹配任意的空白符</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>.</td><td>匹配除换行符以外的任意单个字符</td></tr><tr><td>^</td><td>表示匹配行首的文本(以谁开始)</td></tr><tr><td>$</td><td>表示匹配行尾的文本(以谁结束)</td></tr></tbody></table><h4 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h4><table><thead><tr><th>限定符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复零次或更多次</td></tr><tr><td>+</td><td>重复一次或更多次</td></tr><tr><td>?</td><td>重复零次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[] 字符串用中括号括起来，表示匹配其中的任一字符，相当于或的意思</span><br><span class="line">[^]  匹配除中括号以内的内容</span><br><span class="line">\ 转义符</span><br><span class="line">| 或者，选择两者中的一个。注意|将左右两边分为两部分，而不管左右两边有多长多乱</span><br><span class="line">() 从两个直接量中选择一个，分组</span><br><span class="line">   eg：gr(a|e)y匹配gray和grey</span><br><span class="line">[\u4e00-\u9fa5]  匹配汉字</span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>验证手机号：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;<span class="number">11</span>&#125;$</span><br></pre></td></tr></table></figure><p>验证邮编：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;<span class="number">6</span>&#125;$</span><br></pre></td></tr></table></figure><p>验证日期 2012-5-01</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;<span class="number">4</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;$</span><br></pre></td></tr></table></figure><p>验证邮箱 <a href="mailto:xxx@itcast.cn" target="_blank" rel="noopener">xxx@itcast.cn</a>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\w+@\w+\.\w+$</span><br></pre></td></tr></table></figure><p>验证IP地址 192.168.1.10</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;<span class="number">1</span>,<span class="number">3</span>&#125;\(.\d&#123;<span class="number">1</span>,<span class="number">3</span>&#125;)&#123;<span class="number">3</span>&#125;$</span><br></pre></td></tr></table></figure><h2 id="JavaScript-中使用正则表达式"><a href="#JavaScript-中使用正则表达式" class="headerlink" title="JavaScript 中使用正则表达式"></a>JavaScript 中使用正则表达式</h2><h3 id="创建正则对象"><a href="#创建正则对象" class="headerlink" title="创建正则对象"></a>创建正则对象</h3><p>方式1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> Regex(<span class="string">'\d'</span>, <span class="string">'i'</span>);</span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> Regex(<span class="string">'\d'</span>, <span class="string">'gi'</span>);</span><br></pre></td></tr></table></figure><p>方式2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/i</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/gi</span>;</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><table><thead><tr><th>标志</th><th>说明</th></tr></thead><tbody><tr><td>i</td><td>忽略大小写</td></tr><tr><td>g</td><td>全局匹配</td></tr><tr><td>gi</td><td>全局匹配+忽略大小写</td></tr></tbody></table><h3 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配日期</span></span><br><span class="line"><span class="keyword">var</span> dateStr = <span class="string">'2015-10-10'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;$/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(dateStr));</span><br></pre></td></tr></table></figure><h3 id="正则提取"><a href="#正则提取" class="headerlink" title="正则提取"></a>正则提取</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 提取工资</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"张三：1000，李四：5000，王五：8000。"</span>;</span><br><span class="line"><span class="keyword">var</span> array = str.match(<span class="regexp">/\d+/g</span>);</span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 提取email地址</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123123@xx.com,fangfang@valuedopinions.cn 286669312@qq.com 2、emailenglish@emailenglish.englishtown.com 286669312@qq.com..."</span>;</span><br><span class="line"><span class="keyword">var</span> array = str.match(<span class="regexp">/\w+@\w+\.\w+(\.\w+)?/g</span>);</span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 分组提取  </span></span><br><span class="line"><span class="comment">// 3. 提取日期中的年部分  2015-5-10</span></span><br><span class="line"><span class="keyword">var</span> dateStr = <span class="string">'2016-1-5'</span>;</span><br><span class="line"><span class="comment">// 正则表达式中的()作为分组来使用，获取分组匹配到的结果用Regex.$1 $2 $3....来获取</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d&#123;4&#125;)-\d&#123;1,2&#125;-\d&#123;1,2&#125;/</span>;</span><br><span class="line"><span class="keyword">if</span> (reg.test(dateStr)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 提取邮件中的每一部分</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w+)@(\w+)\.(\w+)(\.\w+)?/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123123@xx.com"</span>;</span><br><span class="line"><span class="keyword">if</span> (reg.test(str)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正则替换"><a href="#正则替换" class="headerlink" title="正则替换"></a>正则替换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 替换所有空白</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"   123AD  asadf   asadfasf  adf "</span>;</span><br><span class="line">str = str.replace(<span class="regexp">/\s/g</span>,<span class="string">"xx"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 替换所有,|，</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"abc,efg,123，abc,123，a"</span>;</span><br><span class="line">str = str.replace(<span class="regexp">/,|，/g</span>, <span class="string">"."</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><h3 id="案例：表单验证"><a href="#案例：表单验证" class="headerlink" title="案例：表单验证"></a>案例：表单验证</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QQ号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtQQ"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtEMail"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">手机：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtPhone"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">生日：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtBirthday"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtName"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取文本框</span></span><br><span class="line"><span class="keyword">var</span> txtQQ = <span class="built_in">document</span>.getElementById(<span class="string">"txtQQ"</span>);</span><br><span class="line"><span class="keyword">var</span> txtEMail = <span class="built_in">document</span>.getElementById(<span class="string">"txtEMail"</span>);</span><br><span class="line"><span class="keyword">var</span> txtPhone = <span class="built_in">document</span>.getElementById(<span class="string">"txtPhone"</span>);</span><br><span class="line"><span class="keyword">var</span> txtBirthday = <span class="built_in">document</span>.getElementById(<span class="string">"txtBirthday"</span>);</span><br><span class="line"><span class="keyword">var</span> txtName = <span class="built_in">document</span>.getElementById(<span class="string">"txtName"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">txtQQ.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//获取当前文本框对应的span</span></span><br><span class="line">  <span class="keyword">var</span> span = <span class="keyword">this</span>.nextElementSibling;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;5,12&#125;$/</span>;</span><br><span class="line">  <span class="comment">//判断验证是否成功</span></span><br><span class="line">  <span class="keyword">if</span>(!reg.test(<span class="keyword">this</span>.value) )&#123;</span><br><span class="line">    <span class="comment">//验证不成功</span></span><br><span class="line">    span.innerText = <span class="string">"请输入正确的QQ号"</span>;</span><br><span class="line">    span.style.color = <span class="string">"red"</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//验证成功</span></span><br><span class="line">    span.innerText = <span class="string">""</span>;</span><br><span class="line">    span.style.color = <span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//txtEMail</span></span><br><span class="line">txtEMail.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//获取当前文本框对应的span</span></span><br><span class="line">  <span class="keyword">var</span> span = <span class="keyword">this</span>.nextElementSibling;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^\w+@\w+\.\w+(\.\w+)?$/</span>;</span><br><span class="line">  <span class="comment">//判断验证是否成功</span></span><br><span class="line">  <span class="keyword">if</span>(!reg.test(<span class="keyword">this</span>.value) )&#123;</span><br><span class="line">    <span class="comment">//验证不成功</span></span><br><span class="line">    span.innerText = <span class="string">"请输入正确的EMail地址"</span>;</span><br><span class="line">    span.style.color = <span class="string">"red"</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//验证成功</span></span><br><span class="line">    span.innerText = <span class="string">""</span>;</span><br><span class="line">    span.style.color = <span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>表单验证部分，封装成函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regBirthday = <span class="regexp">/^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;$/</span>;</span><br><span class="line">addCheck(txtBirthday, regBirthday, <span class="string">"请输入正确的出生日期"</span>);</span><br><span class="line"><span class="comment">//给文本框添加验证</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addCheck</span>(<span class="params">element, reg, tip</span>) </span>&#123;</span><br><span class="line">  element.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取当前文本框对应的span</span></span><br><span class="line">    <span class="keyword">var</span> span = <span class="keyword">this</span>.nextElementSibling;</span><br><span class="line">    <span class="comment">//判断验证是否成功</span></span><br><span class="line">    <span class="keyword">if</span>(!reg.test(<span class="keyword">this</span>.value) )&#123;</span><br><span class="line">      <span class="comment">//验证不成功</span></span><br><span class="line">      span.innerText = tip;</span><br><span class="line">      span.style.color = <span class="string">"red"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//验证成功</span></span><br><span class="line">      span.innerText = <span class="string">""</span>;</span><br><span class="line">      span.style.color = <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过给元素增加自定义验证属性对表单进行验证：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"frm"</span>&gt;</span></span><br><span class="line">  QQ号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtQQ"</span> <span class="attr">data-rule</span>=<span class="string">"qq"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtEMail"</span> <span class="attr">data-rule</span>=<span class="string">"email"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  手机：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtPhone"</span> <span class="attr">data-rule</span>=<span class="string">"phone"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  生日：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtBirthday"</span> <span class="attr">data-rule</span>=<span class="string">"date"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtName"</span> <span class="attr">data-rule</span>=<span class="string">"cn"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有的验证规则</span></span><br><span class="line"><span class="keyword">var</span> rules = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'qq'</span>,</span><br><span class="line">    reg: <span class="regexp">/^\d&#123;5,12&#125;$/</span>,</span><br><span class="line">    tip: <span class="string">"请输入正确的QQ"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'email'</span>,</span><br><span class="line">    reg: <span class="regexp">/^\w+@\w+\.\w+(\.\w+)?$/</span>,</span><br><span class="line">    tip: <span class="string">"请输入正确的邮箱地址"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'phone'</span>,</span><br><span class="line">    reg: <span class="regexp">/^\d&#123;11&#125;$/</span>,</span><br><span class="line">    tip: <span class="string">"请输入正确的手机号码"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'date'</span>,</span><br><span class="line">    reg: <span class="regexp">/^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;$/</span>,</span><br><span class="line">    tip: <span class="string">"请输入正确的出生日期"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'cn'</span>,</span><br><span class="line">    reg: <span class="regexp">/^[\u4e00-\u9fa5]&#123;2,4&#125;$/</span>,</span><br><span class="line">    tip: <span class="string">"请输入正确的姓名"</span></span><br><span class="line">  &#125;];</span><br><span class="line"></span><br><span class="line">addCheck(<span class="string">'frm'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//给文本框添加验证</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addCheck</span>(<span class="params">formId</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">      len = <span class="number">0</span>,</span><br><span class="line">      frm =<span class="built_in">document</span>.getElementById(formId);</span><br><span class="line">  len = frm.children.length;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = frm.children[i];</span><br><span class="line">    <span class="comment">// 表单元素中有name属性的元素添加验证</span></span><br><span class="line">    <span class="keyword">if</span> (element.name) &#123;</span><br><span class="line">      element.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 使用dataset获取data-自定义属性的值</span></span><br><span class="line">        <span class="keyword">var</span> ruleName = <span class="keyword">this</span>.dataset.rule;</span><br><span class="line">        <span class="keyword">var</span> rule =getRuleByRuleName(rules, ruleName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> span = <span class="keyword">this</span>.nextElementSibling;</span><br><span class="line">        <span class="comment">//判断验证是否成功</span></span><br><span class="line">        <span class="keyword">if</span>(!rule.reg.test(<span class="keyword">this</span>.value) )&#123;</span><br><span class="line">          <span class="comment">//验证不成功</span></span><br><span class="line">          span.innerText = rule.tip;</span><br><span class="line">          span.style.color = <span class="string">"red"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="comment">//验证成功</span></span><br><span class="line">          span.innerText = <span class="string">""</span>;</span><br><span class="line">          span.style.color = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据规则的名称获取规则对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRuleByRuleName</span>(<span class="params">rules, ruleName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">      len = rules.length;</span><br><span class="line">  <span class="keyword">var</span> rule = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (rules[i].name == ruleName) &#123;</span><br><span class="line">      rule = rules[i];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> rule;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些javaScript知识点总结&lt;br&gt;
    
    </summary>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="知识点" scheme="http://yoursite.com/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>箭头函数</title>
    <link href="http://yoursite.com/2017/12/12/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/12/12/箭头函数/</id>
    <published>2017-12-12T08:07:38.000Z</published>
    <updated>2019-04-18T02:40:55.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="params">n</span> =&gt;</span> n;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等同于:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>箭头函数不需要参数或者多个参数，就用一个圆括号代表参数部分<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">//等同于:</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) (<span class="params">return <span class="number">10</span></span>);</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">sum</span> = (<span class="params">n1, n2</span>) =&gt; <span class="title">num1</span> + <span class="title">num2</span>;</span></span><br><span class="line"><span class="function">//等同于:</span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">sum</span> = <span class="title">function</span>(<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>如果大括号被解释为代码块，所以箭头函数直接返回一个对象，就需要在代码块外面加上括号<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="params">id</span> =&gt;</span> (&#123; <span class="attr">id</span>: id,<span class="attr">name</span>: <span class="string">"tony"</span>&#125;);</span><br></pre></td></tr></table></figure></p><p>箭头函数可以与变量结构结合使用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="function">(<span class="params">&#123;f1, f2&#125;</span>) =&gt;</span> f1 + <span class="string">'number'</span> +f2;</span><br><span class="line"><span class="comment">//等同于:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj.f1 + <span class="string">'number'</span> + f2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>箭头函数最大的有点就是简化回调函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常函数写法</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a.map(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n * <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 箭头函数写法</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a.map(<span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(n + <span class="number">1</span>);<span class="comment">//1,2,3</span></span><br><span class="line">  <span class="keyword">return</span> n + <span class="number">1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>箭头函数还可以和rest参数结合<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nf = <span class="function">(<span class="params">...a</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);<span class="comment">//[3,4,5,6]</span></span><br><span class="line">&#125;;</span><br><span class="line">nf(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nf = <span class="function">(<span class="params">a1,...a2</span>) =&gt;</span> [a1, a2];</span><br><span class="line">nf(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)<span class="comment">//[3,[4,5,6]]</span></span><br></pre></td></tr></table></figure></p><h1 id="需要注意点"><a href="#需要注意点" class="headerlink" title="需要注意点"></a>需要注意点</h1><p>1.函数体内的this对象，就是定义时候所在的对象，而不是使用时所在的对象。</p><p>2.不可以当作构造函数，不能使用new命令行否则抛出一个错误。</p><p>3.不可以使用arguments对象，如果参数比较多不想代码冗余，可以使用Rest参数代替。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一点要值得注意，在箭头函数中this对象的指向是固定的，例如如下</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    a2: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>),</span><br><span class="line">    a3: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fn4 = <span class="keyword">new</span> fn3()</span><br><span class="line"></span><br><span class="line">fn4.a2() <span class="comment">//this = fn3</span></span><br><span class="line">fn4.a3() <span class="comment">//this = fn4</span></span><br></pre></td></tr></table></figure><p>箭头函数可以让this指向固定化，这种特性对于封装回调函数很友好。例子如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = &#123;</span><br><span class="line">  num: <span class="number">123456</span>,</span><br><span class="line">  </span><br><span class="line">  init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>,</span><br><span class="line">    event =&gt; <span class="keyword">this</span>.doSomething(enent.type),<span class="literal">false</span>)</span><br><span class="line">   </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  doSomething: funciotn() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Handling '</span> + type + <span class="string">' for '</span> + <span class="keyword">this</span>.id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用过babel的都知道，es6语法能转换成es5语法（没有使用过可以看下博客下也有一篇对babel说明的文章）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//es6写法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      a2: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>),</span><br><span class="line">      a3: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//使用过babel转换后的写法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      a2: <span class="function"><span class="keyword">function</span> <span class="title">a2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(_this);</span><br><span class="line">      &#125;,</span><br><span class="line">      a3: <span class="function"><span class="keyword">function</span> <span class="title">a3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>上面代码中，转换后的 ES5 版本清楚地说明了，箭头函数里面根本没有自己的this，而是引用外层的this。</p>]]></content>
    
    <summary type="html">
    
      关于ES6的一个属性。
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>使用RequireJs的好处</title>
    <link href="http://yoursite.com/2017/10/31/RequireJs/"/>
    <id>http://yoursite.com/2017/10/31/RequireJs/</id>
    <published>2017-10-31T08:19:26.000Z</published>
    <updated>2019-04-08T09:49:47.945Z</updated>
    
    <content type="html"><![CDATA[<p>一、使用RequireJs的好处</p><p>最早的时候，所有Javascript代码都写在一个文件里面，只要加载这一个文件就够了。后来，代码越来越多，一个文件不够了，必须分成多个文件，依次加载。下面的网页代码，相信很多人都见过。</p><pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;./js/a.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;./js/b.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;./js/c.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;./js/d.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;./js/e.js&quot;&gt;&lt;/script&gt;</code></pre><p>这些js文件都是按照顺序从上到下依次同步加载的。</p><p>这样的写法有很大的缺点。首先，加载的时候，浏览器会停止网页渲染，加载文件越多，网页失去响应的时间就会越长；其次，由于js文件之间存在依赖关系，因此必须严格保证加载顺序（比如上例的a.js要在b.js的前面），依赖性最大的模块一定要放到最后加载，当依赖关系很复杂的时候，代码的编写和维护都会变得困难。</p><p>RequireJs很好的解决了两个问题及其优势：</p><p>1、实现js文件的异步加载，避免网页失去响应；</p><p>2、管理模块之间的依赖性，便于代码的编写和维护。</p><p>3、基于AMD模块化机制，让前端代码也能实现模块化。查看《CommonJS和AMD/CMD区别详解》。</p><p>开始今天的学习之前，首先需要准备4个文件，分别是【jQuery库】、【require库】、【bootstrap库】、【require加载css插件】，大家可以点击下面的链接进行下载：</p><p>1、jquery.js</p><p>2、require.js</p><p>3、bootstrap.min.js</p><p>4、require.css.js</p><p>二、如何使用RequireJs？</p><p>1、在html页面中引入require库，如下：</p><pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;./js/require.js&quot;&gt;&lt;/script&gt;</code></pre><p>2、加载require.js以后，下一步就要加载我们自己的代码了。假定我们自己的代码文件是main.js，也放在js目录下面。那么，只需要写成下面这样就行了：</p><pre><code>&lt;script src=&quot;js/require.js&quot; data-main=&quot;./js/main&quot;&gt;&lt;/script&gt;</code></pre><p>data-main属性的作用是，指定网页程序的主模块。在上例中，就是js目录下面的main.js，这个文件会第一个被require.js加载。由于require.js默认的文件后缀名是js，所以可以把main.js简写成main（data-main引入的main.js文件是异步加载的，所以在加载这个文件的同时也会加载其他js文件，其他文件要依赖这个main.js，所以可以将以上代码分开来写）。</p><pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;./js/require.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;./js/main.js&quot;&gt;&lt;/script&gt;</code></pre><p>3、主模块main.js的写法：</p><p>主模块main.js主要是加载requireJs的配置项，所以需要先了解一下这些配置项的意思：</p><p>（1）baseUrl：模块默认加载路径；</p><p>（2）paths：自定义模块加载路径；</p><p>（3）shim：定义模块之间的依赖关系。</p><p>下面具体来看下，这是我的目录结构：</p><p><img src="https://i.imgur.com/p7Cnmal.jpg" alt></p><pre><code>require.config({    &apos;baseUrl&apos; : &apos;./app/&apos;,    &apos;paths&apos; : {        &apos;jquery&apos; : &apos;../js/jquery&apos;,//只写文件名，不用带后缀    },});</code></pre><p>html页面调用：</p><pre><code>require([&apos;jquery&apos;], function(a){    console.log(a);//functionn()});</code></pre>]]></content>
    
    <summary type="html">
    
      初步认识模块化开发的理由。
    
    </summary>
    
      <category term="JS工具" scheme="http://yoursite.com/categories/JS%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="项目优化" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>babel使用</title>
    <link href="http://yoursite.com/2017/10/22/babel%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/10/22/babel使用/</id>
    <published>2017-10-22T06:47:10.000Z</published>
    <updated>2019-04-08T09:23:35.466Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/user-handbook.md" target="_blank" rel="noopener">babel-handbook</a></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><a id="toc-introduction"></a>介绍</h1><p>Babel 是一个通用的多用途 JavaScript 编译器。通过 Babel 你可以使用（并创建）下一代的 JavaScript，以及下一代的 JavaScript 工具。<br><a id="more"></a><br>作为一种语言，JavaScript 在不断发展，新的标准／提案和新的特性层出不穷。 在得到广泛普及之前，Babel 能够让你提前（甚至数年）使用它们。</p><p>Babel 把用最新标准编写的 JavaScript 代码向下编译成可以在今天随处可用的版本。 这一过程叫做“源码到源码”编译， 也被称为转换编译（transpiling，是一个自造合成词，即转换＋编译。以下也简称为转译）。</p><h1 id="安装-Babel"><a href="#安装-Babel" class="headerlink" title="安装 Babel"></a><a id="toc-setting-up-babel"></a>安装 Babel</h1><p>由于 JavaScript 社区没有统一的构建工具、框架、平台等等，因此 Babel 正式集成了对所有主流工具的支持。 从 Gulp 到 Browserify，从 Ember 到 Meteor，不管你的环境设置如何，Babel 都有正式的集成支持。</p><p>本手册的目的主要是介绍 Babel 内建方式的安装，不过你可以访问交互式的<a href="http://babeljs.io/docs/setup" target="_blank" rel="noopener">安装页面</a>来查看其它的整合方式。</p><h2 id="babel-cli"><a href="#babel-cli" class="headerlink" title="babel-cli"></a><a id="toc-babel-cli"></a><code>babel-cli</code></h2><p>Babel 的 CLI 是一种在命令行下使用 Babel 编译文件的简单方法。</p><p>让我们先全局安装它来学习基础知识。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --global babel-cli</span><br></pre></td></tr></table></figure><p>我们可以这样编译我们的第一个文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ babel my-file.js</span><br></pre></td></tr></table></figure><p>这将把编译后的结果直接输出至终端。使用 <code>--out-file</code> 或着 <code>-o</code> 可以将结果写入到指定的文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ babel example.js --out-file compiled.js</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">$ babel example.js -o compiled.js</span><br></pre></td></tr></table></figure><p>如果我们想要把一个目录整个编译成一个新的目录，可以使用 <code>--out-dir</code> 或者 <code>-d</code>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ babel src --out-dir lib</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">$ babel src -d lib</span><br></pre></td></tr></table></figure><h3 id="在项目内运行-Babel-CLI"><a href="#在项目内运行-Babel-CLI" class="headerlink" title=" 在项目内运行 Babel CLI"></a><a id="toc-running-babel-cli-from-within-a-project"></a> 在项目内运行 Babel CLI</h3><p>尽管你<em>可以</em>把 Babel CLI 全局安装在你的机器上，但是按项目逐个安装在<strong>本地</strong>会更好。</p><p>有两个主要的原因。</p><ol><li>在同一台机器上的不同项目或许会依赖不同版本的 Babel 并允许你有选择的更新。</li><li>这意味着你对工作环境没有隐式依赖，这让你的项目有很好的可移植性并且易于安装。</li></ol><p>要在（项目）本地安装 Babel CLI 可以运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>: 因为全局运行 Babel 通常不是什么好习惯所以如果你想要卸载全局安装的 Babel 的话，可以运行：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall --global babel-cli</span><br></pre></td></tr></table></figure><p>安装完成后，你的 <code>package.json</code> 应该如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"my-project"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"babel-cli"</span>: <span class="string">"^6.0.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们不直接从命令行运行 Babel 了，取而代之我们将把运行命令写在 <strong>npm scripts</strong> 里，这样可以使用 Babel 的本地版本。</p><p>只需将 <code>&quot;scripts&quot;</code> 字段添加到你的 <code>package.json</code> 文件内并且把 babel 命令写成 <code>build</code> 字段。.</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    "name": "my-project",</span><br><span class="line">    "version": "1.0.0",</span><br><span class="line"><span class="addition">+   "scripts": &#123;</span></span><br><span class="line"><span class="addition">+     "build": "babel src -d lib"</span></span><br><span class="line"><span class="addition">+   &#125;,</span></span><br><span class="line">    "devDependencies": &#123;</span><br><span class="line">      "babel-cli": "^6.0.0"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>现在可以在终端里运行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>这将以与之前同样的方式运行 Babel，但这一次我们使用的是本地副本。</p><h3 id="babel-register"><a href="#babel-register" class="headerlink" title="babel-register"></a><a id="toc-babel-register"></a><code>babel-register</code></h3><p>下一个常用的运行 Babel 的方法是通过 <code>babel-register</code>。这种方法只需要引入文件就可以运行 Babel，或许能更好地融入你的项目设置。</p><p>但请注意这种方法并不适合正式产品环境使用。 直接部署用此方式编译的代码不是好的做法。 在部署之前预先编译会更好。 不过用在构建脚本或是其他本地运行的脚本中是非常合适的。</p><p>让我们先在项目中创建 <code>index.js</code> 文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hello world"</span>)</span><br></pre></td></tr></table></figure><p>如果我们用 <code>node index.js</code> 来运行它是不会使用 Babel 来编译的。所以我们需要设置 <code>babel-register</code>。.</p><p>首先安装 <code>babel-register</code>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev babel-register</span><br></pre></td></tr></table></figure><p>接着，在项目中创建 <code>register.js</code> 文件并添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"babel-register"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./index.js"</span>);</span><br></pre></td></tr></table></figure><p>这样做可以把 Babel <em>注册</em>到 Node 的模块系统中并开始编译其中 <code>require</code> 的所有文件。</p><p>现在我们可以使用 <code>register.js</code> 来代替 <code>node index.js</code> 来运行了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node register.js</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：你不能在你要编译的文件内同时注册 Babel，因为 node 会在 Babel 编译它之前就将它执行了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"babel-register"</span>);</span><br><span class="line"><span class="comment">// 未编译的：</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hello world!"</span>);</span><br></pre></td></tr></table></figure><h2 id="babel-node"><a href="#babel-node" class="headerlink" title="babel-node"></a><a id="toc-babel-node"></a><code>babel-node</code></h2><p>如果你要用 <code>node</code> CLI 来运行代码，那么整合 Babel 最简单的方式就是使用 <code>babel-node</code> CLI，它是 <code>node</code> CLI 的替代品。</p><p>但请注意这种方法并不适合正式产品环境使用。 直接部署用此方式编译的代码不是好的做法。 在部署之前预先编译会更好。 不过用在构建脚本或是其他本地运行的脚本中是非常合适的。</p><p>首先确保 <code>babel-cli</code> 已经安装了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure><p>然后用<code>babel-node</code> 来替代<code>node</code>运行所有的代码。</p><p>如果用 npm <code>script</code> 的话只需要这样做：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    "scripts": &#123;</span><br><span class="line"><span class="deletion">-     "script-name": "node script.js"</span></span><br><span class="line"><span class="addition">+     "script-name": "babel-node script.js"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>要不然的话你需要写全 <code>babel-node</code> 的路径。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- node script.js</span></span><br><span class="line"><span class="addition">+ ./node_modules/.bin/babel-node script.js</span></span><br></pre></td></tr></table></figure><blockquote><p>提示：你可以使用 <a href="https://www.npmjs.com/package/npm-run" target="_blank" rel="noopener"><code>npm-run</code></a></p></blockquote><h2 id="babel-core"><a href="#babel-core" class="headerlink" title="babel-core"></a><a id="toc-babel-core"></a><code>babel-core</code></h2><p>如果你需要以编程的方式来使用 Babel，可以使用 <code>babel-core</code> 这个包。</p><p>首先安装 <code>babel-core</code>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install babel-core</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">"babel-core"</span>);</span><br></pre></td></tr></table></figure><p>字符串形式的 JavaScript 代码可以直接使用 <code>babel.transform</code> 来编译。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">babel.transform(<span class="string">"code();"</span>, options);</span><br><span class="line"><span class="comment">// =&gt; &#123; code, map, ast &#125;</span></span><br></pre></td></tr></table></figure><p>如果是文件的话，可以使用异步 api：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">babel.transformFile(<span class="string">"filename.js"</span>, options, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">  result; <span class="comment">// =&gt; &#123; code, map, ast &#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>或者是同步 api：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">babel.transformFileSync(<span class="string">"filename.js"</span>, options);</span><br><span class="line"><span class="comment">// =&gt; &#123; code, map, ast &#125;</span></span><br></pre></td></tr></table></figure><p>要是已经有一个 Babel AST（抽象语法树）了就可以直接从 AST 进行转换。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">babel.transformFromAst(ast, code, options);</span><br><span class="line"><span class="comment">// =&gt; &#123; code, map, ast &#125;</span></span><br></pre></td></tr></table></figure><p>对于上述所有方法，<code>options</code> 指的都是 <a href="http://babeljs.io/docs/usage/options/" target="_blank" rel="noopener">http://babeljs.io/docs/usage/options/</a></p><hr><h1 id="配置-Babel"><a href="#配置-Babel" class="headerlink" title="配置 Babel"></a><a id="toc-configuring-babel"></a>配置 Babel</h1><p>你或许已经注意到了，目前为止通过运行 Babel 自己我们并没能“翻译”代码，而仅仅是把代码从一处拷贝到了另一处。</p><p>这是因为我们还没告诉 Babel 要做什么。</p><blockquote><p>由于 Babel 是一个可以用各种花样去使用的通用编译器，因此默认情况下它反而什么都不做。你必须明确地告诉 Babel 应该要做什么。</p></blockquote><p>你可以通过安装<strong>插件</strong>（plugins）或<strong>预设</strong>（presets，也就是一组插件）来指示 Babel 去做什么事情。</p><h2 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a><a id="toc-babelrc"></a><code>.babelrc</code></h2><p>在我们告诉 Babel 该做什么之前，我们需要创建一个配置文件。你需要做的就是在项目的根路径下创建 <code>.babelrc</code> 文件。然后输入以下内容作为开始：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [],</span><br><span class="line">  <span class="string">"plugins"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个文件就是用来告诉Babel做你要他做的事情的配置文件。</p><blockquote><p><strong>注意</strong>:尽管你也可以用其他方式给 Babel 传递选项，但 <code>.babelrc</code> 文件是约定也是最好的方式。</p></blockquote><h2 id="babel-preset-es2015"><a href="#babel-preset-es2015" class="headerlink" title="babel-preset-es2015"></a><a id="toc-babel-preset-es2015"></a><code>babel-preset-es2015</code></h2><p>我们先从让 Babel 把 ES2015（最新版本的 JavaScript 标准，也叫做 ES6）编译成 ES5（现今在大多数 JavaScript 环境下可用的版本）开始吧。</p><p>我们需要安装 “es2015” Babel 预设：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev babel-preset-es2015</span><br></pre></td></tr></table></figure><p>我们修改 <code>.babelrc</code> 来包含这个预设。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    "presets": [</span><br><span class="line"><span class="addition">+     "es2015"</span></span><br><span class="line">    ],</span><br><span class="line">    "plugins": []</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="babel-preset-stage-x"><a href="#babel-preset-stage-x" class="headerlink" title="babel-preset-stage-x"></a><a id="toc-babel-preset-stage-x"></a><code>babel-preset-stage-x</code></h2><p>JavaScript 还有一些提案，正在积极通过 TC39（ECMAScript 标准背后的技术委员会）的流程成为标准的一部分。</p><p>这个流程分为 5（0－4）个阶段。 随着提案得到越多的关注就越有可能被标准采纳，于是他们就继续通过各个阶段，最终在阶段 4 被标准正式采纳。</p><p>以下是4 个不同阶段的（打包的）预设：</p><ul><li><code>babel-preset-stage-0</code></li><li><code>babel-preset-stage-1</code></li><li><code>babel-preset-stage-2</code></li><li><code>babel-preset-stage-3</code></li></ul><blockquote><p>注意 stage-4 预设是不存在的因为它就是上面的 <code>es2015</code> 预设。</p></blockquote><p>以上每种预设都依赖于紧随的后期阶段预设。例如，<code>babel-preset-stage-1</code> 依赖 <code>babel-preset-stage-2</code>，后者又依赖 <code>babel-preset-stage-3</code>。.</p><p>使用的时候只需要安装你想要的阶段就可以了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev babel-preset-stage-2</span><br></pre></td></tr></table></figure><p>然后添加进你的 <code>.babelrc</code> 配置文件。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    "presets": [</span><br><span class="line">      "es2015",</span><br><span class="line"><span class="addition">+     "stage-2"</span></span><br><span class="line">    ],</span><br><span class="line">    "plugins": []</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="执行-Babel-生成的代码"><a href="#执行-Babel-生成的代码" class="headerlink" title="执行 Babel 生成的代码"></a><a id="toc-executing-babel-generated-code"></a>执行 Babel 生成的代码</h1><p>即便你已经用 Babel 编译了你的代码，但这还不算完。</p><h2 id="babel-polyfill"><a href="#babel-polyfill" class="headerlink" title="babel-polyfill"></a><a id="toc-babel-polyfill"></a><code>babel-polyfill</code></h2><p>Babel 几乎可以编译所有时新的 JavaScript 语法，但对于 APIs 来说却并非如此。</p><p>比方说，下列含有箭头函数的需要编译的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>).reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终会变成这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>).reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而，它依然无法随处可用因为不是所有的 JavaScript 环境都支持 <code>Array.from</code>。</p><pre><code>Uncaught TypeError: Array.from is not a function</code></pre><p>为了解决这个问题，我们使用一种叫做 <a href="https://remysharp.com/2010/10/08/what-is-a-polyfill" target="_blank" rel="noopener">Polyfill（代码填充，也可译作兼容性补丁）</a> 的技术。 简单地说，polyfill 即是在当前运行环境中用来复制（意指模拟性的复制，而不是拷贝）尚不存在的原生 api 的代码。 能让你提前使用还不可用的 APIs，<code>Array.from</code> 就是一个例子。</p><p>Babel 用了优秀的 <a href="https://github.com/zloirock/core-js" target="_blank" rel="noopener">core-js</a> 用作 polyfill，并且还有定制化的 <a href="https://github.com/facebook/regenerator" target="_blank" rel="noopener">regenerator</a> 来让 generators（生成器）和 async functions（异步函数）正常工作。</p><p>要使用 Babel polyfill，首先用 npm 安装它：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save babel-polyfill</span><br></pre></td></tr></table></figure><p>然后只需要在文件顶部导入 polyfill 就可以了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"babel-polyfill"</span>;</span><br></pre></td></tr></table></figure><h2 id="babel-runtime"><a href="#babel-runtime" class="headerlink" title="babel-runtime"></a><a id="toc-babel-runtime"></a><code>babel-runtime</code></h2><p>为了实现 ECMAScript 规范的细节，Babel 会使用“助手”方法来保持生成代码的整洁。</p><p>由于这些助手方法可能会特别长并且会被添加到每一个文件的顶部，因此你可以把它们统一移动到一个单一的“运行时（runtime）”中去。</p><p>通过安装 <code>babel-plugin-transform-runtime</code> 和 <code>babel-runtime</code> 来开始。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev babel-plugin-transform-runtime</span><br><span class="line">$ npm install --save babel-runtime</span><br></pre></td></tr></table></figure><p>然后更新 <code>.babelrc</code>：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    "plugins": [</span><br><span class="line"><span class="addition">+     "transform-runtime",</span></span><br><span class="line">      "transform-es2015-classes"</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>现在，Babel 会把这样的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  method() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _classCallCheck <span class="keyword">from</span> <span class="string">"babel-runtime/helpers/classCallCheck"</span>;</span><br><span class="line"><span class="keyword">import</span> _createClass <span class="keyword">from</span> <span class="string">"babel-runtime/helpers/createClass"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    _classCallCheck(<span class="keyword">this</span>, Foo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _createClass(Foo, [&#123;</span><br><span class="line">    key: <span class="string">"method"</span>,</span><br><span class="line">    value: <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  &#125;]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Foo;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>这样就不需要把 <code>_classCallCheck</code> 和 <code>_createClass</code> 这两个助手方法放进每一个需要的文件里去了。</p><hr><h1 id="配置-Babel（进阶）"><a href="#配置-Babel（进阶）" class="headerlink" title="配置 Babel（进阶）"></a><a id="toc-configuring-babel-advanced"></a>配置 Babel（进阶）</h1><p>大多数人使用 Babel 的内建预设就足够了，不过 Babel 提供了更多更细粒度的能力。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/user-handbook.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;babel-handbook&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;&lt;a id=&quot;toc-introduction&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;Babel 是一个通用的多用途 JavaScript 编译器。通过 Babel 你可以使用（并创建）下一代的 JavaScript，以及下一代的 JavaScript 工具。&lt;br&gt;
    
    </summary>
    
      <category term="babel" scheme="http://yoursite.com/categories/babel/"/>
    
    
      <category term="JS模块" scheme="http://yoursite.com/tags/JS%E6%A8%A1%E5%9D%97/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>vue-music目录及样式初始化</title>
    <link href="http://yoursite.com/2017/10/12/vue-music%E7%9B%AE%E5%BD%95%E5%8F%8A%E6%A0%B7%E5%BC%8F%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>http://yoursite.com/2017/10/12/vue-music目录及样式初始化/</id>
    <published>2017-10-12T03:06:30.000Z</published>
    <updated>2019-04-08T09:50:43.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录初始化"><a href="#目录初始化" class="headerlink" title="目录初始化"></a>目录初始化</h1><h2 id="常用目录"><a href="#常用目录" class="headerlink" title="常用目录"></a>常用目录</h2><ul><li>api</li><li>base</li><li>common<ul><li>fonts</li><li>image</li><li>js</li><li>stylus </li></ul></li><li>components</li><li>router</li><li>store<ul><li>actions</li><li>getters</li><li>index</li><li>mutation-types</li><li>mutations</li><li>state</li></ul></li></ul><a id="more"></a><h3 id="api"><a href="#api" class="headerlink" title="api"></a>api</h3><p>放置后端获取数据的js文件，常用方式有jsonp/axios。</p><ul><li><a href="https://github.com/webmodules/jsonp" target="_blank" rel="noopener">jsonp的github</a></li><li><a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios的github</a><h3 id="base"><a href="#base" class="headerlink" title="base"></a>base</h3>存放常用的可复用的基础component<h3 id="common"><a href="#common" class="headerlink" title="common"></a>common</h3>存放网页所需字体，图片，复用的js文件，和css样式文件。<br><br>其中需要注意stylus文件引用顺序<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;./reset.styl&quot;</span><br><span class="line">@import &quot;./base.styl&quot;</span><br><span class="line">@import &quot;./icon.styl&quot;</span><br></pre></td></tr></table></figure></li></ul><h3 id="components"><a href="#components" class="headerlink" title="components"></a>components</h3><p>存放网页所需component</p><h3 id="router"><a href="#router" class="headerlink" title="router"></a>router</h3><p>存放网页路由文件</p><h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><p>存放网页vuex的共享数据</p><h1 id="eslint常用配置"><a href="#eslint常用配置" class="headerlink" title="eslint常用配置"></a>eslint常用配置</h1><p><a href="http://eslint.cn/docs/rules/" target="_blank" rel="noopener">eslint规则</a><br><br>可以在官网查询配置相关规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&apos;rules&apos;: &#123;</span><br><span class="line">    // allow paren-less arrow functions</span><br><span class="line">    &apos;arrow-parens&apos;: 0,</span><br><span class="line">    // allow async-await</span><br><span class="line">    &apos;generator-star-spacing&apos;: 0,</span><br><span class="line">    // allow debugger during development</span><br><span class="line">    &apos;no-debugger&apos;: process.env.NODE_ENV === &apos;production&apos; ? 2 : 0,</span><br><span class="line">    &apos;eol-last&apos;: 0,</span><br><span class="line">    &apos;space-before-function-paren&apos;: 0</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>eslint规则的等级有三种:</p><ul><li>“off” 或者 0：关闭规则。</li><li>“warn” 或者 1：打开规则，并且作为一个警告（不影响exit code）。</li><li>“error” 或者 2：打开规则，并且作为一个错误（exit code将会是1）。</li></ul><p>我们所配置的rules:</p><ul><li>arrow-parens: 要求箭头函数的参数使用圆括号</li><li>generator-star-spacing: 强制 generator 函数中 * 号周围使用一致的空格</li><li>no-debugger: 禁用debugger</li><li>eol-last: 要求或禁止文件末尾存在空行</li><li>space-before-function-paren: 强制在 function的左括号之前使用一致的空格</li></ul><h1 id="webpack-base-conf-配置引用别名"><a href="#webpack-base-conf-配置引用别名" class="headerlink" title="webpack.base.conf 配置引用别名"></a>webpack.base.conf 配置引用别名</h1><p>配置别名，项目中引用不用添加src了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    extensions: [&apos;.js&apos;, &apos;.vue&apos;, &apos;.json&apos;],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      &apos;@&apos;: resolve(&apos;src&apos;),</span><br><span class="line">      &apos;common&apos;: resolve(&apos;src/common&apos;),</span><br><span class="line">      &apos;components&apos;: resolve(&apos;src/components&apos;),</span><br><span class="line">      &apos;base&apos;: resolve(&apos;src/base&apos;),</span><br><span class="line">      &apos;api&apos;: resolve(&apos;src/api&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      慕课网比较出名的Vue项目的项目结构，也是比较经典的Vue框架，适合中级前端开发工程师看。
    
    </summary>
    
      <category term="vue-items" scheme="http://yoursite.com/categories/vue-items/"/>
    
    
      <category term="vue-music" scheme="http://yoursite.com/tags/vue-music/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli(configJS)</title>
    <link href="http://yoursite.com/2017/08/11/vue-cli-configJS/"/>
    <id>http://yoursite.com/2017/08/11/vue-cli-configJS/</id>
    <published>2017-08-11T02:30:12.000Z</published>
    <updated>2019-04-08T09:51:34.942Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、此配置文件是用来定义开发环境和生产环境中所需要的参数"><a href="#1、此配置文件是用来定义开发环境和生产环境中所需要的参数" class="headerlink" title="1、此配置文件是用来定义开发环境和生产环境中所需要的参数"></a>1、此配置文件是用来定义开发环境和生产环境中所需要的参数</h4><h4 id="2、关于注释，当涉及到较复杂的解释我将通过标识的方式-如（1）-将解释写到单独的注释模块，请自行查看"><a href="#2、关于注释，当涉及到较复杂的解释我将通过标识的方式-如（1）-将解释写到单独的注释模块，请自行查看" class="headerlink" title="2、关于注释，当涉及到较复杂的解释我将通过标识的方式(如（1）)将解释写到单独的注释模块，请自行查看"></a>2、关于注释，当涉及到较复杂的解释我将通过标识的方式(如（1）)将解释写到单独的注释模块，请自行查看</h4><h4 id="3、上代码"><a href="#3、上代码" class="headerlink" title="3、上代码"></a>3、上代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">// see http://vuejs-templates.github.io/webpack for documentation.</span><br><span class="line">// path是node.js的路径模块，用来处理路径统一的问题</span><br><span class="line">var path = require(&apos;path&apos;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    // 下面是build也就是生产编译环境下的一些配置</span><br><span class="line">    build: &#123;</span><br><span class="line">        // 导入prod.env.js配置文件，只要用来指定当前环境，详细见(1)</span><br><span class="line">        env: require(&apos;./prod.env&apos;),</span><br><span class="line">        // 下面是相对路径的拼接，假如当前跟目录是config，那么下面配置的index属性的属性值就是dist/index.html</span><br><span class="line">        index: path.resolve(__dirname, &apos;../dist/index.html&apos;),</span><br><span class="line">        // 下面定义的是静态资源的根目录 也就是dist目录</span><br><span class="line">        assetsRoot: path.resolve(__dirname, &apos;../dist&apos;),</span><br><span class="line">        // 下面定义的是静态资源根目录的子目录static，也就是dist目录下面的static</span><br><span class="line">        assetsSubDirectory: &apos;static&apos;,</span><br><span class="line">        // 下面定义的是静态资源的公开路径，也就是真正的引用路径</span><br><span class="line">        assetsPublicPath: &apos;/&apos;,</span><br><span class="line">        // 下面定义是否生成生产环境的sourcmap，sourcmap是用来debug编译后文件的，通过映射到编译前文件来实现</span><br><span class="line">        productionSourceMap: true,</span><br><span class="line">        // Gzip off by default as many popular static hosts such as</span><br><span class="line">        // Surge or Netlify already gzip all static assets for you.</span><br><span class="line">        // Before setting to `true`, make sure to:</span><br><span class="line">        // npm install --save-dev compression-webpack-plugin</span><br><span class="line">        // 下面是是否在生产环境中压缩代码，如果要压缩必须安装compression-webpack-plugin</span><br><span class="line">        productionGzip: false,</span><br><span class="line">        // 下面定义要压缩哪些类型的文件</span><br><span class="line">        productionGzipExtensions: [&apos;js&apos;, &apos;css&apos;],</span><br><span class="line">        // Run the build command with an extra argument to</span><br><span class="line">        // View the bundle analyzer report after build finishes:</span><br><span class="line">        // `npm run build --report`</span><br><span class="line">        // Set to `true` or `false` to always turn it on or off</span><br><span class="line">        // 下面是用来开启编译完成后的报告，可以通过设置值为true和false来开启或关闭</span><br><span class="line">        // 下面的process.env.npm_config_report表示定义的一个npm_config_report环境变量，可以自行设置</span><br><span class="line">        bundleAnalyzerReport: process.env.npm_config_report</span><br><span class="line">    &#125;,</span><br><span class="line">    dev: &#123;</span><br><span class="line">        // 引入当前目录下的dev.env.js，用来指明开发环境，详见(2)</span><br><span class="line">        env: require(&apos;./dev.env&apos;),</span><br><span class="line">        // 下面是dev-server的端口号，可以自行更改</span><br><span class="line">        port: 8080,</span><br><span class="line">        // 下面表示是否自定代开浏览器</span><br><span class="line">        autoOpenBrowser: true,</span><br><span class="line">        assetsSubDirectory: &apos;static&apos;,</span><br><span class="line">        assetsPublicPath: &apos;/&apos;,</span><br><span class="line">        // 下面是代理表，作用是用来，建一个虚拟api服务器用来代理本机的请求，只能用于开发模式</span><br><span class="line">        // 详见(3)</span><br><span class="line">        proxyTable: &#123;&#125;,</span><br><span class="line">        // CSS Sourcemaps off by default because relative paths are &quot;buggy&quot;</span><br><span class="line">        // with this option, according to the CSS-Loader README</span><br><span class="line">        // (https://github.com/webpack/css-loader#sourcemaps)</span><br><span class="line">        // In our experience, they generally work as expected,</span><br><span class="line">        // just be aware of this issue when enabling this option.</span><br><span class="line">        // 是否生成css，map文件，上面这段英文就是说使用这个cssmap可能存在问题，但是按照经验，问题不大，可以使用</span><br><span class="line">        // 给人觉得没必要用这个，css出了问题，直接控制台不就完事了</span><br><span class="line">        cssSourceMap: false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">(1)下面是prod.env.js的配置内容</span><br><span class="line">    module.exports = &#123;</span><br><span class="line">        // 作用很明显，就是导出一个对象，NODE_ENV是一个环境变量，指定production环境</span><br><span class="line">        NODE_ENV: &apos;&quot;production&quot;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">(2)下面是dev.env.js的配置内容</span><br><span class="line">    // 首先引入的是webpack的merge插件，该插件是用来合并对象，也就是配置文件用的，相同的选项会被覆盖，至于这里为什么多次一举，可能另有他图吧</span><br><span class="line">    var merge = require(&apos;webpack-merge&apos;)</span><br><span class="line">    // 导入prod.env.js配置文件</span><br><span class="line">    var prodEnv = require(&apos;./prod.env&apos;)</span><br><span class="line">    // 将两个配置对象合并，最终结果是 NODE_ENV: &apos;&quot;development&quot;&apos;</span><br><span class="line">    module.exports = merge(prodEnv, &#123;</span><br><span class="line">        NODE_ENV: &apos;&quot;development&quot;&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">(3)下面是proxyTable的一般用法</span><br><span class="line">    vue-cli使用这个功能是借助http-proxy-middleware插件，一般解决跨域请求api</span><br><span class="line">    proxyTable: &#123;</span><br><span class="line">        &apos;/list&apos;: &#123;</span><br><span class="line">            target: &apos;http://api.xxxxxxxx.com&apos;, -&gt; 目标url地址</span><br><span class="line">            changeOrigin: true, -&gt; 指示是否跨域</span><br><span class="line">            pathRewrite: &#123;</span><br><span class="line">            &apos;^/list&apos;: &apos;/list&apos; -&gt; 可以使用 /list 等价于 api.xxxxxxxx.com/list</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      了解一下VueJs框架里面一个叫config.js里面的一些参数和作用。
    
    </summary>
    
      <category term="JS工具" scheme="http://yoursite.com/categories/JS%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="config.js配置参数" scheme="http://yoursite.com/tags/config-js%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>transform/transtion/animation</title>
    <link href="http://yoursite.com/2017/02/06/posttransform-transtion-animation/"/>
    <id>http://yoursite.com/2017/02/06/posttransform-transtion-animation/</id>
    <published>2017-02-06T06:50:01.000Z</published>
    <updated>2019-04-08T09:52:06.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="fransform"><a href="#fransform" class="headerlink" title="fransform"></a>fransform</h2><p>在CSS3中transform主要包括以下几种：旋转rotate、扭曲skew、缩放scale和移动translate以及矩阵变形matrix。一起来看看CSS3中transform的旋转rotate、扭曲skew、缩放scale和移动translate具体如何实现，从transform的语法开始吧。是构成transtion和animation的基础。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform: rotate | scale | skew | translate |matrix;</span><br></pre></td></tr></table></figure><h4 id="一、旋转rotate"><a href="#一、旋转rotate" class="headerlink" title="一、旋转rotate"></a>一、旋转rotate</h4><p>  retate(value):通过指定的角度参数对原元素指定一个2D rotation(2D旋转)，需先有transform-origin属性的定义。transform-origin定义的是旋转点的基点，其中value是指旋转的角度，如果设置的值为正数表示顺时针，反之逆时针；</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform:rolate(30deg);</span><br></pre></td></tr></table></figure><h4 id="二、移动translate-x-y"><a href="#二、移动translate-x-y" class="headerlink" title="二、移动translate(x,y)"></a>二、移动translate(x,y)</h4><p>  移动tranlate(x,y),x水平和y垂直移动；</p><p>  translate(x,y):通过矢量(x,y)指定一个2D translation，x是第一个过渡值参数，y是第二个过渡值参数,如果 未被提供，则y以 0 作为其值。按照设定的x,y参数值,当值为负数时，反方向移动物<br>  体，其基点默认为元素 中心点，也可以根据transform-origin进行改变基点。如</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform:translate(100px,20px)</span><br></pre></td></tr></table></figure><h4 id="三、缩放scale-value-value"><a href="#三、缩放scale-value-value" class="headerlink" title="三、缩放scale(value,value)"></a>三、缩放scale(value,value)</h4><p>  缩放scale和移动translate是极其相似，也具有三种情况：scale(x,y)使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）；scaleX(x)元素仅水平方向缩放（X轴缩放）；scaleY(y)元素仅垂直方向缩放（Y轴缩放），但它们具有相同的缩放中心点和基数，其中心点就是元素的中心位置，缩放基数为1，如果其值大于1元素就放大，反之其值小于1，元素缩小。下面我们具体来看看这三种情况具体使用方法：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">transform:scale(2,1.5)</span><br><span class="line">transform:scaleX(2)</span><br><span class="line">transform:scaleY(1.5)</span><br></pre></td></tr></table></figure></p><h4 id="四、扭曲skew"><a href="#四、扭曲skew" class="headerlink" title="四、扭曲skew"></a>四、扭曲skew</h4><p>  第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则值为0，也就是Y轴方向上无斜切。skew是用来对元素进行扭曲变行，第一个参数是水平方向扭曲角度，第二个参数是垂直方向扭曲角度。其中第二个参数是可选参数，如果没有设置第二个参数，那么Y轴为0deg。同样是以元素中心为基点，我们也可以通过transform-origin来改变元素的基点位置。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform:skew(30deg,10deg);</span><br></pre></td></tr></table></figure></p><h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h2><h4 id="一、transition-property"><a href="#一、transition-property" class="headerlink" title="一、transition-property"></a>一、transition-property</h4><p>  transition-property是用来指定当元素其中一个属性改变时执行transition效果，其主要有以下几个值：none(没有属性改变)；all（所有属性改变）这个也是其默认值；indent（元素属性名）。当其值为none时，transition马上停止执行，当指定为all时，则元素产生任何属性值变化时都将执行transition效果，ident是可以指定元素的某一个属性值。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">color: 通过红、绿、蓝和透明度组件变换（每个数值处理）如：background-color,border-color,color,outline-color等css属性；</span><br><span class="line"></span><br><span class="line">length: 真实的数字 如：word-spacing,width,vertical-align,top,right,bottom,left,padding,outline-width,margin,min-width,min-height,max-width,max-height,line-height,height,border-width,border-spacing,background-position等属性；</span><br><span class="line"></span><br><span class="line">percentage:真实的数字 如：word-spacing,width,vertical-align,top,right,bottom,left,min-width,min-height,max-width,max-height,line-height,height,background-position等属性；</span><br><span class="line"></span><br><span class="line">integer离散步骤（整个数字），在真实的数字空间，以及使用floor()转换为整数时发生 如：outline-offset,z-index等属性；</span><br><span class="line"></span><br><span class="line">number真实的（浮点型）数值，如：zoom,opacity,font-weight,等属性；</span><br><span class="line"></span><br><span class="line">transform list:详情请参阅：《CSS3 Transform》</span><br><span class="line"></span><br><span class="line">rectangle:通过x, y, width 和 height（转为数值）变换，如：crop</span><br><span class="line"></span><br><span class="line">visibility: 离散步骤，在0到1数字范围之内，0表示“隐藏”，1表示完全“显示”,如：visibility</span><br><span class="line"></span><br><span class="line">shadow: 作用于color, x, y 和 blur（模糊）属性,如：text-shadow</span><br><span class="line"></span><br><span class="line">gradient: 通过每次停止时的位置和颜色进行变化。它们必须有相同的类型（放射状的或是线性的）和相同的停止数值以便执行动画,如：background-image</span><br><span class="line"></span><br><span class="line">paint server (SVG): 只支持下面的情况：从gradient到gradient以及color到color，然后工作与上面类似</span><br><span class="line"></span><br><span class="line">space-separated list of above:如果列表有相同的项目数值，则列表每一项按照上面的规则进行变化，否则无变化</span><br><span class="line"></span><br><span class="line">a shorthand property: 如果缩写的所有部分都可以实现动画，则会像所有单个属性变化一样变化</span><br></pre></td></tr></table></figure></p><h4 id="二、transition-duration"><a href="#二、transition-duration" class="headerlink" title="二、transition-duration"></a>二、transition-duration</h4><p>  语法：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transition-duration:time 如(transition-duration: 2.2s;)</span><br></pre></td></tr></table></figure></p><h4 id="三、transition-timing-function"><a href="#三、transition-timing-function" class="headerlink" title="三、transition-timing-function"></a>三、transition-timing-function</h4><p>  语法：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transition-timing-function:ease | linear | ease-in | ease-out | ease-in-out |</span><br></pre></td></tr></table></figure></p><p>  取值：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">transition-timing-function的值允许你根据时间的推进去改变属性值的变换速率，transition-timing-function有6个可能值：</span><br><span class="line"></span><br><span class="line">ease：（逐渐变慢）默认值，ease函数等同于贝塞尔曲线(0.25, 0.1, 0.25, 1.0).</span><br><span class="line"></span><br><span class="line">linear：（匀速），linear 函数等同于贝塞尔曲线(0.0, 0.0, 1.0, 1.0).</span><br><span class="line"></span><br><span class="line">ease-in：(加速)，ease-in 函数等同于贝塞尔曲线(0.42, 0, 1.0, 1.0).</span><br><span class="line"></span><br><span class="line">ease-out：（减速），ease-out 函数等同于贝塞尔曲线(0, 0, 0.58, 1.0).</span><br><span class="line"></span><br><span class="line">ease-in-out：（加速然后减速），ease-in-out 函数等同于贝塞尔曲线(0.42, 0, 0.58, 1.0)</span><br><span class="line"></span><br><span class="line">cubic-bezier：（该值允许你去自定义一个时间曲线）， 特定的cubic-bezier曲线。 (x1, y1, x2, y2)四个值特定于曲线上点P1和点P2。所有值需在[0, 1]区域内，否则无效。</span><br><span class="line">如（cubic-bezier(0.94,-0.1, 0.29, 1.2)）</span><br></pre></td></tr></table></figure></p><!-- #### 四、transition-delay -->]]></content>
    
    <summary type="html">
    
      初步css3自带的动画属性。
    
    </summary>
    
      <category term="css3动画属性" scheme="http://yoursite.com/categories/css3%E5%8A%A8%E7%94%BB%E5%B1%9E%E6%80%A7/"/>
    
    
      <category term="css3" scheme="http://yoursite.com/tags/css3/"/>
    
      <category term="动画" scheme="http://yoursite.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
</feed>
